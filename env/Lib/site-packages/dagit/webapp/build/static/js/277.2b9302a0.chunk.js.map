{"version":3,"file":"static/js/277.2b9302a0.chunk.js","mappings":"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","sources":["../../core/src/pipelines/PipelineExplorerRoot.tsx","../../core/src/pipelines/PipelineRunsRoot.tsx","../../core/src/ui/StickyTableContainer.tsx","../../core/src/assets/AssetGroupRoot.tsx","../../core/src/launchpad/LaunchpadSetupFromRunRoot.tsx","../../core/src/launchpad/LaunchpadSetupRoot.tsx","../../core/src/nav/LatestRunTag.tsx","../../core/src/nav/JobMetadata.tsx","../../core/src/nav/PipelineNav.tsx","../../core/src/assets/usePartitionNameForPipeline.tsx","../../core/src/partitions/JobBackfillsTable.tsx","../../core/src/partitions/PartitionRunStatusCheckboxes.tsx","../../core/src/partitions/BackfillSelector.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/OpJobPartitionsView.tsx","../../core/src/partitions/AssetJobPartitionsView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/PipelineOrJobDisambiguationRoot.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/ticks/TickLogDialog.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickDetailsDialog.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/ticks/EvaluateScheduleDialog.tsx","../../core/src/schedules/SchedulePartitionStatus.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleUtils.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorFragment.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/VirtualizedRepoAssetTable.tsx","../../core/src/workspace/WorkspaceAssetsRoot.tsx","../../core/src/workspace/VirtualizedGraphTable.tsx","../../core/src/workspace/WorkspaceGraphsRoot.tsx","../../core/src/workspace/VirtualizedJobTable.tsx","../../core/src/workspace/WorkspaceJobsRoot.tsx","../../core/src/ops/OpCard.tsx","../../core/src/ops/OpDetailsRoot.tsx","../../core/src/ops/OpsRoot.tsx","../../core/src/workspace/WorkspaceOpsRoot.tsx","../../core/src/workspace/VirtualizedScheduleTable.tsx","../../core/src/workspace/WorkspaceSchedulesRoot.tsx","../../core/src/workspace/VirtualizedSensorTable.tsx","../../core/src/workspace/WorkspaceSensorsRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx"],"sourcesContent":["import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Loading} from '../ui/Loading';\nimport {buildPipelineSelector} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explodeCompositesInHandleGraph} from './CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_ASSET_NODE_FRAGMENT,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from './GraphExplorer';\nimport {NonIdealPipelineQueryResult} from './NonIdealPipelineQueryResult';\nimport {ExplorerPath, explorerPathFromString, explorerPathToString} from './PipelinePathUtils';\nimport {\n  PipelineExplorerRootQuery,\n  PipelineExplorerRootQueryVariables,\n} from './types/PipelineExplorerRoot.types';\n\nexport const PipelineExplorerSnapshotRoot = () => {\n  useTrackPageView();\n\n  const params = useParams();\n  const explorerPath = explorerPathFromString((params as any)['0']);\n  const {pipelineName, snapshotId} = explorerPath;\n  const history = useHistory();\n\n  useDocumentTitle(`Snapshot: ${pipelineName}${snapshotId ? `@${snapshotId.slice(0, 8)}` : ''}`);\n\n  return (\n    <PipelineExplorerContainer\n      explorerPath={explorerPath}\n      onChangeExplorerPath={(path, mode) => {\n        history[mode](`/snapshots/${explorerPathToString(path)}`);\n      }}\n      onNavigateToSourceAssetNode={({assetKey}) => {\n        history.push(assetDetailsPathForKey(assetKey));\n      }}\n    />\n  );\n};\n\nexport const PipelineExplorerContainer: React.FC<{\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n  repoAddress?: RepoAddress;\n  isGraph?: boolean;\n}> = ({\n  explorerPath,\n  repoAddress,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode,\n  isGraph = false,\n}) => {\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: explorerPath.explodeComposites ?? false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const pipelineSelector = buildPipelineSelector(repoAddress || null, explorerPath.pipelineName);\n\n  const pipelineResult = useQuery<PipelineExplorerRootQuery, PipelineExplorerRootQueryVariables>(\n    PIPELINE_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        snapshotPipelineSelector: explorerPath.snapshotId ? undefined : pipelineSelector,\n        snapshotId: explorerPath.snapshotId ? explorerPath.snapshotId : undefined,\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<PipelineExplorerRootQuery> queryResult={pipelineResult}>\n      {({pipelineSnapshotOrError: result}) => {\n        if (result.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph={isGraph}\n              result={result}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n        const assetNodesPresent = result.solidHandles.some(\n          (h) => h.solid.definition.assetNodes.length > 0,\n        );\n        if (options.preferAssetRendering && assetNodesPresent) {\n          return (\n            <AssetGraphExplorer\n              options={options}\n              setOptions={setOptions}\n              fetchOptions={{pipelineSelector}}\n              explorerPath={explorerPath}\n              onChangeExplorerPath={onChangeExplorerPath}\n              onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n            />\n          );\n        }\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={onChangeExplorerPath}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={isGraph}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const PIPELINE_EXPLORER_ROOT_QUERY = gql`\n  query PipelineExplorerRootQuery(\n    $snapshotPipelineSelector: PipelineSelector\n    $snapshotId: String\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    pipelineSnapshotOrError(\n      snapshotId: $snapshotId\n      activePipelineSelector: $snapshotPipelineSelector\n    ) {\n      ... on PipelineSnapshot {\n        id\n        name\n        metadataEntries {\n          ...MetadataEntryFragment\n        }\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n            definition {\n              assetNodes {\n                id\n                ...GraphExplorerAssetNodeFragment\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_ASSET_NODE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {\n  Box,\n  CursorHistoryControls,\n  NonIdealState,\n  Page,\n  Tag,\n  TokenizingFieldValue,\n  tokenToString,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunsQueryRefetchContext} from '../runs/RunUtils';\nimport {\n  RunFilterTokenType,\n  RunsFilterInput,\n  runsFilterForSearchTokens,\n  useQueryPersistedRunFilters,\n  RunFilterToken,\n} from '../runs/RunsFilterInput';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\nimport {StickyTableContainer} from '../ui/StickyTableContainer';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\nimport {\n  PipelineRunsRootQuery,\n  PipelineRunsRootQueryVariables,\n} from './types/PipelineRunsRoot.types';\nimport {useJobTitle} from './useJobTitle';\n\nconst PAGE_SIZE = 25;\nconst ENABLED_FILTERS: RunFilterTokenType[] = ['status', 'tag'];\n\ninterface Props {\n  repoAddress?: RepoAddress;\n}\n\nexport const PipelineRunsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n  const {repoAddress = null} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [filterTokens, setFilterTokens] = useQueryPersistedRunFilters(ENABLED_FILTERS);\n  const permanentTokens = React.useMemo(() => {\n    return [\n      isJob ? {token: 'job', value: pipelineName} : {token: 'pipeline', value: pipelineName},\n      snapshotId ? {token: 'snapshotId', value: snapshotId} : null,\n    ].filter(Boolean) as TokenizingFieldValue[];\n  }, [isJob, pipelineName, snapshotId]);\n\n  const allTokens = [...filterTokens, ...permanentTokens];\n  if (repoAddress) {\n    const repoToken = {\n      token: 'tag',\n      value: `${DagsterTag.RepositoryLabelTag}=${repoAddressAsTag(repoAddress)}`,\n    };\n    allTokens.push(repoToken);\n  }\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    PipelineRunsRootQuery,\n    PipelineRunsRootQueryVariables\n  >({\n    query: PIPELINE_RUNS_ROOT_QUERY,\n    pageSize: PAGE_SIZE,\n    variables: {\n      filter: {...runsFilterForSearchTokens(allTokens), pipelineName, snapshotId},\n    },\n    nextCursorForResult: (runs) => {\n      if (runs.pipelineRunsOrError.__typename !== 'Runs') {\n        return undefined;\n      }\n      return runs.pipelineRunsOrError.results[PAGE_SIZE - 1]?.runId;\n    },\n    getResultArray: (data) => {\n      if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n        return [];\n      }\n      return data.pipelineRunsOrError.results;\n    },\n  });\n\n  const onAddTag = React.useCallback(\n    (token: RunFilterToken) => {\n      const tokenAsString = tokenToString(token);\n      if (!filterTokens.some((token) => tokenToString(token) === tokenAsString)) {\n        setFilterTokens([...filterTokens, token]);\n      }\n    },\n    [filterTokens, setFilterTokens],\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <RunsQueryRefetchContext.Provider value={{refetch: queryResult.refetch}}>\n      <Page>\n        <Loading queryResult={queryResult} allowStaleData={true}>\n          {({pipelineRunsOrError}) => {\n            if (pipelineRunsOrError.__typename !== 'Runs') {\n              return (\n                <Box padding={{vertical: 64}}>\n                  <NonIdealState\n                    icon=\"error\"\n                    title=\"Query Error\"\n                    description={pipelineRunsOrError.message}\n                  />\n                </Box>\n              );\n            }\n            const runs = pipelineRunsOrError.results;\n            const displayed = runs.slice(0, PAGE_SIZE);\n            const {hasNextCursor, hasPrevCursor} = paginationProps;\n            return (\n              <>\n                <Box\n                  flex={{alignItems: 'flex-start', justifyContent: 'space-between'}}\n                  padding={{top: 8, horizontal: 24}}\n                >\n                  <Box flex={{direction: 'row', gap: 8}}>\n                    {permanentTokens.map(({token, value}) => (\n                      <Tag key={token}>{`${token}:${value}`}</Tag>\n                    ))}\n                  </Box>\n                  <QueryRefreshCountdown refreshState={refreshState} />\n                </Box>\n                <StickyTableContainer $top={0}>\n                  <RunTable\n                    runs={displayed}\n                    onAddTag={onAddTag}\n                    actionBarComponents={\n                      <RunsFilterInput\n                        enabledFilters={ENABLED_FILTERS}\n                        tokens={filterTokens}\n                        onChange={setFilterTokens}\n                        loading={queryResult.loading}\n                      />\n                    }\n                  />\n                </StickyTableContainer>\n                {hasNextCursor || hasPrevCursor ? (\n                  <div style={{marginTop: '20px'}}>\n                    <CursorHistoryControls {...paginationProps} />\n                  </div>\n                ) : null}\n              </>\n            );\n          }}\n        </Loading>\n      </Page>\n    </RunsQueryRefetchContext.Provider>\n  );\n};\n\nconst PIPELINE_RUNS_ROOT_QUERY = gql`\n  query PipelineRunsRootQuery($limit: Int, $cursor: String, $filter: RunsFilter!) {\n    pipelineRunsOrError(limit: $limit, cursor: $cursor, filter: $filter) {\n      ... on Runs {\n        results {\n          id\n          ...RunTableRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\ninterface Props {\n  $top: number;\n}\n\n/**\n * Wrap a `Table` component with this to cause its `thead` to be sticky while scrolling.\n *\n * `$top` is the pixel value of the point in the scrolling container that the `thead`\n * should stick to. Probably `0`.\n */\nexport const StickyTableContainer = styled.div<Props>`\n  thead tr {\n    position: sticky;\n    top: ${({$top}) => $top}px;\n    background-color: ${Colors.White};\n    z-index: 1;\n  }\n\n  /**\n   * Safari won't render a box-shadow on the \\`tr\\` and we don't want an inset\n   * box-shadow on \\`th\\` elements because it will create a double-border on the\n   * bottom of the \\`thead\\` in the non-stuck state.\n   *\n   * We therefore render an absoulutely-positioned keyline on the bottom of the\n   * \\`th\\` elements. This will appear as a border in the stuck state, and will\n   * overlap the top box-shadow of the first row in the non-stuck state.\n   */\n  thead tr th {\n    position: relative;\n  }\n\n  thead tr th::after {\n    content: '';\n    display: block;\n    height: 1px;\n    background-color: ${Colors.KeylineGray};\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n  }\n`;\n","import {Page, PageHeader, Heading, Box, Tag, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetGlobalLineageLink} from './AssetPageHeader';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  groupName: string;\n  prefixPath: string;\n  0: string;\n}\n\nexport const AssetGroupRoot: React.FC<{repoAddress: RepoAddress; tab: 'lineage' | 'list'}> = ({\n  repoAddress,\n  tab,\n}) => {\n  useTrackPageView();\n\n  const {groupName, 0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Asset Group: ${groupName}`);\n\n  const groupPath = workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`);\n  const groupSelector = React.useMemo(\n    () => ({\n      groupName,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [groupName, repoAddress],\n  );\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](`${groupPath}/${explorerPathToString(path)}`);\n    },\n    [groupPath, history],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (node.groupName && node.repoAddress) {\n        history.replace(\n          workspacePathFromAddress(\n            node.repoAddress,\n            `/asset-groups/${node.groupName}/lineage/${node.assetKey.path\n              .map(encodeURIComponent)\n              .join('/')}`,\n          ),\n        );\n      } else {\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n      }\n    },\n    [history],\n  );\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>{groupName}</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n        tags={\n          <Tag icon=\"asset_group\">\n            Asset Group in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        tabs={\n          <Box\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            margin={{right: 4}}\n          >\n            <Tabs selectedTabId={tab}>\n              <TabLink id=\"lineage\" title=\"Lineage\" to={`${groupPath}/lineage`} />\n              <TabLink id=\"list\" title=\"List\" to={`${groupPath}/list`} />\n            </Tabs>\n            <AssetGlobalLineageLink />\n          </Box>\n        }\n      />\n      {tab === 'lineage' ? (\n        <AssetGraphExplorer\n          fetchOptions={{groupSelector}}\n          options={{preferAssetRendering: true, explodeComposites: true}}\n          explorerPath={explorerPathFromString(path || 'lineage/')}\n          onChangeExplorerPath={onChangeExplorerPath}\n          onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n        />\n      ) : (\n        <AssetsCatalogTable\n          groupSelector={groupSelector}\n          prefixPath={path.split('/').map(decodeURIComponent).filter(Boolean)}\n          setPrefixPath={(prefixPath) =>\n            history.push(`${groupPath}/list/${prefixPath.map(encodeURIComponent).join('/')}`)\n          }\n        />\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {\n  ConfigForRunQuery,\n  ConfigForRunQueryVariables,\n} from './types/LaunchpadSetupFromRunRoot.types';\n\nexport const LaunchpadSetupFromRunRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {\n    permissions: {canLaunchPipelineExecution},\n  } = usePermissionsForLocation(repoAddress.location);\n  const {repoPath, pipelinePath, runId} = useParams<{\n    repoPath: string;\n    pipelinePath: string;\n    runId: string;\n  }>();\n\n  if (!canLaunchPipelineExecution) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return (\n    <LaunchpadSetupFromRunAllowedRoot\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n      runId={runId}\n    />\n  );\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  runId: string;\n}\n\n/**\n * For a given run ID, retrieve the run config and populate a new Launchpad session with its\n * values, then redirect to the launchpad. The newly created session will be the open launchpad\n * config tab.\n */\nconst LaunchpadSetupFromRunAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress, runId} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [storageData, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n\n  const {data, loading} = useQuery<ConfigForRunQuery, ConfigForRunQueryVariables>(\n    CONFIG_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const runOrError = data?.runOrError;\n  const run = runOrError?.__typename === 'Run' ? runOrError : null;\n\n  React.useEffect(() => {\n    // Wait until we have a run, then create the session.\n    if (!run) {\n      return;\n    }\n\n    const {runConfigYaml, mode, solidSelection} = run;\n    if (runConfigYaml || mode || solidSelection) {\n      // Name the session after this run ID.\n      const newSession: Partial<IExecutionSession> = {name: `From run ${run.id.slice(0, 8)}`};\n\n      if (typeof runConfigYaml === 'string') {\n        newSession.runConfigYaml = runConfigYaml;\n      }\n      if (typeof mode === 'string') {\n        newSession.mode = mode;\n      }\n      if (solidSelection instanceof Array && solidSelection.length > 0) {\n        newSession.solidSelection = solidSelection as string[];\n      } else if (typeof solidSelection === 'string' && solidSelection) {\n        newSession.solidSelection = [solidSelection];\n      }\n\n      onSave(applyCreateSession(storageData, newSession));\n    }\n  }, [run, storageData, onSave]);\n\n  if (loading) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (!runOrError || runOrError.__typename === 'RunNotFoundError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"No run found\"\n        description=\"The run with this ID does not exist or has been cleaned up.\"\n      />\n    );\n  }\n\n  if (runOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError icon=\"error\" title=\"Python error\" description={runOrError.message} />\n    );\n  }\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n\nconst CONFIG_FOR_RUN_QUERY = gql`\n  query ConfigForRunQuery($runId: ID!) {\n    runOrError(runId: $runId) {\n      ... on Run {\n        id\n        mode\n        runConfigYaml\n        solidSelection\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import qs from 'qs';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const LaunchpadSetupRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {\n    permissions: {canLaunchPipelineExecution},\n  } = usePermissionsForLocation(repoAddress.location);\n  const {repoPath, pipelinePath} = useParams<{repoPath: string; pipelinePath: string}>();\n\n  if (!canLaunchPipelineExecution) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return <LaunchpadSetupAllowedRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />;\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nconst LaunchpadSetupAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [data, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n  const queryString = qs.parse(window.location.search, {ignoreQueryPrefix: true});\n\n  React.useEffect(() => {\n    if (queryString.config || queryString.mode || queryString.solidSelection || queryString.tags) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof queryString.config === 'string') {\n        newSession.runConfigYaml = queryString.config;\n      }\n      if (typeof queryString.mode === 'string') {\n        newSession.mode = queryString.mode;\n      }\n      if (queryString.solidSelection instanceof Array && queryString.solidSelection.length > 0) {\n        newSession.solidSelection = queryString.solidSelection as string[];\n      } else if (typeof queryString.solidSelection === 'string' && queryString.solidSelection) {\n        newSession.solidSelection = [queryString.solidSelection];\n      }\n      if (typeof queryString.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = queryString.solidSelectionQuery;\n      }\n\n      if (queryString.tags instanceof Array) {\n        newSession.tags = queryString.tags as any;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, StyledTable, Tag, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {RunStatus} from '../graphql/types';\nimport {timingStringForStatus} from '../runs/RunDetails';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunTime, RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTagQuery, LatestRunTagQueryVariables} from './types/LatestRunTag.types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const LatestRunTag: React.FC<{pipelineName: string; repoAddress: RepoAddress}> = ({\n  pipelineName,\n  repoAddress,\n}) => {\n  const lastRunQuery = useQuery<LatestRunTagQuery, LatestRunTagQueryVariables>(\n    LATEST_RUN_TAG_QUERY,\n    {\n      variables: {\n        runsFilter: {\n          pipelineName,\n          tags: [\n            {\n              key: DagsterTag.RepositoryLabelTag,\n              value: repoAddressAsTag(repoAddress),\n            },\n          ],\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(lastRunQuery, FIFTEEN_SECONDS);\n\n  const run = React.useMemo(() => {\n    const runsOrError = lastRunQuery.data?.pipelineRunsOrError;\n    if (runsOrError && runsOrError.__typename === 'Runs') {\n      return runsOrError.results[0] || null;\n    }\n    return null;\n  }, [lastRunQuery]);\n\n  if (!run) {\n    return null;\n  }\n\n  const stats = {start: run.startTime, end: run.endTime, status: run.status};\n  const intent = () => {\n    switch (run.status) {\n      case RunStatus.SUCCESS:\n        return 'success';\n      case RunStatus.CANCELED:\n      case RunStatus.CANCELING:\n      case RunStatus.FAILURE:\n        return 'danger';\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <Tag intent={intent()}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={run.status} size={10} />\n        Latest run:\n        {stats ? (\n          <Tooltip\n            placement=\"bottom\"\n            content={\n              <StyledTable>\n                <tbody>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>\n                      <Box padding={{right: 16}}>Started</Box>\n                    </td>\n                    <td>\n                      {stats.start ? (\n                        <TimestampDisplay timestamp={stats.start} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>Ended</td>\n                    <td>\n                      {stats.end ? (\n                        <TimestampDisplay timestamp={stats.end} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </StyledTable>\n            }\n          >\n            <Link to={`/runs/${run.id}`}>\n              <RunTime run={run} />\n            </Link>\n          </Tooltip>\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n\nconst LATEST_RUN_TAG_QUERY = gql`\n  query LatestRunTagQuery($runsFilter: RunsFilter) {\n    pipelineRunsOrError(filter: $runsFilter, limit: 1) {\n      ... on PipelineRuns {\n        results {\n          id\n          status\n          ...RunTimeFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, ButtonLink, Colors, DialogFooter, Dialog, Tag} from '@dagster-io/ui';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTag} from './LatestRunTag';\nimport {ScheduleOrSensorTag} from './ScheduleOrSensorTag';\nimport {\n  JobMetadataAssetNodeFragment,\n  JobMetadataFragment,\n  JobMetadataQuery,\n  JobMetadataQueryVariables,\n  RunMetadataFragment,\n} from './types/JobMetadata.types';\n\ntype JobMetadata = {\n  assetNodes: JobMetadataAssetNodeFragment[] | null;\n  job: JobMetadataFragment | null;\n  runsForAssetScan: RunMetadataFragment[];\n};\n\nfunction useJobNavMetadata(repoAddress: RepoAddress, pipelineName: string) {\n  const {data} = useQuery<JobMetadataQuery, JobMetadataQueryVariables>(JOB_METADATA_QUERY, {\n    variables: {\n      runsFilter: {\n        pipelineName,\n        tags: [\n          {\n            key: DagsterTag.RepositoryLabelTag,\n            value: repoAddressAsTag(repoAddress),\n          },\n        ],\n      },\n      params: {\n        pipelineName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  return React.useMemo<JobMetadata>(() => {\n    return {\n      assetNodes: data?.assetNodes || null,\n      job:\n        data?.pipelineOrError && data.pipelineOrError.__typename === 'Pipeline'\n          ? data.pipelineOrError\n          : null,\n      runsForAssetScan:\n        data?.pipelineRunsOrError && data.pipelineRunsOrError.__typename === 'Runs'\n          ? data.pipelineRunsOrError.results\n          : [],\n    };\n  }, [data]);\n}\n\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n}\n\nexport const JobMetadata: React.FC<Props> = (props) => {\n  const {pipelineName, repoAddress} = props;\n  const metadata = useJobNavMetadata(repoAddress, pipelineName);\n\n  return (\n    <>\n      {metadata.job ? (\n        <JobScheduleOrSensorTag job={metadata.job} repoAddress={repoAddress} />\n      ) : null}\n      <LatestRunTag pipelineName={pipelineName} repoAddress={repoAddress} />\n      {metadata.runsForAssetScan ? (\n        <RelatedAssetsTag relatedAssets={getRelatedAssets(metadata)} />\n      ) : null}\n    </>\n  );\n};\n\nconst JobScheduleOrSensorTag: React.FC<{\n  job: JobMetadataFragment;\n  repoAddress: RepoAddress;\n}> = ({job, repoAddress}) => {\n  const matchingSchedules = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.schedules.length) {\n      return job.schedules;\n    }\n    return [];\n  }, [job]);\n\n  const matchingSensors = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.sensors.length) {\n      return job.sensors;\n    }\n    return [];\n  }, [job]);\n\n  return (\n    <ScheduleOrSensorTag\n      schedules={matchingSchedules}\n      sensors={matchingSensors}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\nfunction getRelatedAssets(metadata: JobMetadata) {\n  if (metadata.assetNodes) {\n    return metadata.assetNodes.map((node) => tokenForAssetKey(node.assetKey));\n  }\n\n  return uniq(\n    metadata.runsForAssetScan.flatMap((r) => r.assets.map((a) => tokenForAssetKey(a.key))),\n  );\n}\n\nconst RelatedAssetsTag: React.FC<{relatedAssets: string[]}> = ({relatedAssets}) => {\n  const [open, setOpen] = React.useState(false);\n\n  if (relatedAssets.length === 0) {\n    return null;\n  }\n\n  if (relatedAssets.length === 1) {\n    const key = relatedAssets[0];\n    return (\n      <Tag icon=\"asset\">\n        Asset: <Link to={`/assets/${key}`}>{key}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Tag icon=\"asset\">\n        <ButtonLink\n          color={Colors.Link}\n          onClick={() => setOpen(true)}\n        >{`View ${relatedAssets.length} assets`}</ButtonLink>\n      </Tag>\n      <Dialog\n        title=\"Related assets\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        style={{maxWidth: '80%', minWidth: '500px', width: 'auto'}}\n      >\n        {relatedAssets.map((key, ii) => (\n          <Box\n            key={key}\n            padding={{vertical: 12, horizontal: 20}}\n            border={\n              ii < relatedAssets.length - 1\n                ? {side: 'bottom', width: 1, color: Colors.KeylineGray}\n                : null\n            }\n          >\n            <Link key={key} to={`/assets/${key}`} style={{wordBreak: 'break-word'}}>\n              {key}\n            </Link>\n          </Box>\n        ))}\n        <DialogFooter topBorder>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst JOB_METADATA_QUERY = gql`\n  query JobMetadataQuery($params: PipelineSelector!, $runsFilter: RunsFilter!) {\n    pipelineOrError(params: $params) {\n      ... on Pipeline {\n        id\n        ...JobMetadataFragment\n      }\n    }\n    assetNodes(pipeline: $params) {\n      id\n      ...JobMetadataAssetNode\n    }\n    pipelineRunsOrError(filter: $runsFilter, limit: 5) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...RunMetadataFragment\n        }\n      }\n    }\n  }\n\n  fragment JobMetadataAssetNode on AssetNode {\n    id\n    assetKey {\n      path\n    }\n  }\n\n  fragment JobMetadataFragment on Pipeline {\n    id\n    isJob\n    name\n    schedules {\n      id\n      mode\n      ...ScheduleSwitchFragment\n    }\n    sensors {\n      id\n      targets {\n        pipelineName\n        mode\n      }\n      ...SensorSwitchFragment\n    }\n  }\n\n  fragment RunMetadataFragment on PipelineRun {\n    id\n    status\n    assets {\n      id\n      key {\n        path\n      }\n    }\n    ...RunTimeFragment\n  }\n\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {Box, PageHeader, Tabs, Tag, Heading, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {\n  PermissionResult,\n  usePermissionsForLocation,\n  PermissionsState,\n  permissionResultForKey,\n} from '../app/Permissions';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {JobMetadata} from './JobMetadata';\nimport {RepositoryLink} from './RepositoryLink';\n\ninterface TabConfig {\n  title: string;\n  pathComponent: string;\n  getPermissionsResult?: (permissionsState: PermissionsState) => PermissionResult;\n}\n\nconst pipelineTabs: {[key: string]: TabConfig} = {\n  overview: {title: 'Overview', pathComponent: ''},\n  playground: {\n    title: 'Launchpad',\n    pathComponent: 'playground',\n    getPermissionsResult: (permissionsState: PermissionsState) =>\n      permissionResultForKey(permissionsState, 'canLaunchPipelineExecution'),\n  },\n  runs: {\n    title: 'Runs',\n    pathComponent: 'runs',\n  },\n  partitions: {\n    title: 'Partitions',\n    pathComponent: 'partitions',\n  },\n};\n\nconst currentOrder = ['overview', 'playground', 'runs', 'partitions'];\n\nfunction tabForPipelinePathComponent(component?: string): TabConfig {\n  const tabList = Object.keys(pipelineTabs);\n  const match =\n    tabList.find((t) => pipelineTabs[t].pathComponent === component) ||\n    tabList.find((t) => pipelineTabs[t].pathComponent === '')!;\n  return pipelineTabs[match];\n}\n\nconst tabForKey = (repoAddress: RepoAddress, isJob: boolean, explorerPath: ExplorerPath) => {\n  const explorerPathForTab = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  // When you click one of the top tabs, it resets the snapshot you may be looking at\n  // in the Definition tab and also clears solids from the path\n  return (key: string) => {\n    const tab = pipelineTabs[key];\n    return {\n      text: tab.title,\n      href: workspacePathFromAddress(\n        repoAddress,\n        `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathForTab}${tab.pathComponent}`,\n      ),\n      getPermissionsResult: tab.getPermissionsResult,\n    };\n  };\n};\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineNav: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const permissions = usePermissionsForLocation(repoAddress.location);\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/pipelines/:selector/:tab?',\n    '/locations/:repoPath/jobs/:selector/:tab?',\n    '/locations/:repoPath/pipeline_or_job/:selector/:tab?',\n  ]);\n\n  const active = tabForPipelinePathComponent(match!.params.tab);\n  const explorerPath = explorerPathFromString(match!.params.selector);\n  const {pipelineName, snapshotId} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const repoJobEntry = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!repoJobEntry?.isJob;\n  const isAssetJob = !!repoJobEntry?.isAssetJob;\n\n  // If using pipeline:mode tuple (crag flag), check for partition sets that are for this specific\n  // pipeline:mode tuple. Otherwise, just check for a pipeline name match.\n  const partitionSets = repo?.repository.partitionSets || [];\n  const hasLaunchpad = !isAssetJob;\n  const hasPartitionSet = partitionSets.some(\n    (partitionSet) => partitionSet.pipelineName === pipelineName,\n  );\n\n  const tabs = currentOrder\n    .filter(\n      (key) => (hasLaunchpad || key !== 'playground') && (hasPartitionSet || key !== 'partitions'),\n    )\n    .map(tabForKey(repoAddress, isJob, explorerPath));\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        tags={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8, wrap: 'wrap'}}>\n            <Tag icon=\"job\">\n              {isJob ? 'Job in ' : 'Pipeline in '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {snapshotId ? null : (\n              <JobMetadata pipelineName={pipelineName} repoAddress={repoAddress} />\n            )}\n          </Box>\n        }\n        tabs={\n          <Tabs size=\"large\" selectedTabId={active.title}>\n            {tabs.map((tab) => {\n              const {href, text, getPermissionsResult} = tab;\n              let permissionsResult = null;\n              if (getPermissionsResult) {\n                permissionsResult = getPermissionsResult(permissions);\n              }\n              const disabled = !!(permissionsResult && !permissionsResult.enabled);\n              const title =\n                permissionsResult && disabled ? (\n                  <Tooltip content={permissionsResult.disabledReason} placement=\"top\">\n                    {text}\n                  </Tooltip>\n                ) : (\n                  text\n                );\n              return <TabLink key={text} id={text} title={title} disabled={disabled} to={href} />;\n            })}\n          </Tabs>\n        }\n      />\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  AssetJobPartitionSetsQuery,\n  AssetJobPartitionSetsQueryVariables,\n} from './types/usePartitionNameForPipeline.types';\n\nexport function usePartitionNameForPipeline(repoAddress: RepoAddress, pipelineName: string) {\n  const {data: partitionSetsData} = useQuery<\n    AssetJobPartitionSetsQuery,\n    AssetJobPartitionSetsQueryVariables\n  >(ASSET_JOB_PARTITION_SETS_QUERY, {\n    skip: !pipelineName,\n    variables: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName,\n    },\n  });\n\n  return React.useMemo(\n    () => ({\n      partitionSet:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PartitionSets'\n          ? partitionSetsData.partitionSetsOrError.results[0]\n          : undefined,\n      partitionSetError:\n        partitionSetsData?.partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n        partitionSetsData?.partitionSetsOrError.__typename === 'PythonError'\n          ? partitionSetsData.partitionSetsOrError\n          : undefined,\n    }),\n    [partitionSetsData],\n  );\n}\n\nexport const ASSET_JOB_PARTITION_SETS_QUERY = gql`\n  query AssetJobPartitionSetsQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ... on PipelineNotFoundError {\n        __typename\n        message\n      }\n      ... on PartitionSets {\n        __typename\n        results {\n          id\n          name\n          mode\n          solidSelection\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, CursorPaginationControls, CursorPaginationProps, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {RepositorySelector} from '../graphql/types';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from '../instance/BackfillTable';\nimport {Loading} from '../ui/Loading';\n\nimport {JobBackfillsQuery, JobBackfillsQueryVariables} from './types/JobBackfillsTable.types';\n\nconst BACKFILL_PAGE_SIZE = 10;\n\nexport const JobBackfillsTable = ({\n  partitionSetName,\n  partitionNames,\n  repositorySelector,\n  refetchCounter,\n}: {\n  partitionSetName: string;\n  partitionNames: string[];\n  repositorySelector: RepositorySelector;\n  refetchCounter: number;\n}) => {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = React.useState<string | undefined>();\n  const queryResult = useQuery<JobBackfillsQuery, JobBackfillsQueryVariables>(JOB_BACKFILLS_QUERY, {\n    variables: {\n      partitionSetName,\n      repositorySelector,\n      cursor,\n      limit: BACKFILL_PAGE_SIZE,\n    },\n    partialRefetch: true,\n  });\n\n  const refetch = queryResult.refetch;\n  React.useEffect(() => {\n    refetchCounter && refetch();\n  }, [refetch, refetchCounter]);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (partitionSetOrError.__typename === 'PartitionSetNotFoundError') {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title=\"Partition set not found.\" icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        if (partitionSetOrError.__typename === 'PythonError') {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title=\"An error occurred.\" icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        const {backfills, pipelineName} = partitionSetOrError;\n\n        if (!backfills.length) {\n          return (\n            <Box margin={{vertical: 20}}>\n              <NonIdealState title={`No backfills for ${pipelineName}`} icon=\"no-results\" />\n            </Box>\n          );\n        }\n\n        const paginationProps: CursorPaginationProps = {\n          hasPrevCursor: !!cursor,\n          hasNextCursor: backfills && backfills.length === BACKFILL_PAGE_SIZE,\n          popCursor: () => {\n            const nextStack = [...cursorStack];\n            setCursor(nextStack.pop());\n            setCursorStack(nextStack);\n          },\n          advanceCursor: () => {\n            if (cursor) {\n              setCursorStack((current) => [...current, cursor]);\n            }\n            const nextCursor = backfills && backfills[backfills.length - 1].id;\n            if (!nextCursor) {\n              return;\n            }\n            setCursor(nextCursor);\n          },\n          reset: () => {\n            setCursorStack([]);\n            setCursor(undefined);\n          },\n        };\n        return (\n          <>\n            <BackfillTable\n              backfills={backfills}\n              refetch={refetch}\n              showBackfillTarget={false}\n              allPartitions={partitionNames}\n            />\n            <CursorPaginationControls {...paginationProps} />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst JOB_BACKFILLS_QUERY = gql`\n  query JobBackfillsQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $cursor: String\n    $limit: Int\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        pipelineName\n        backfills(cursor: $cursor, limit: $limit) {\n          id\n          ...BackfillTableFragment\n        }\n      }\n    }\n  }\n\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Box, Checkbox} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatus} from '../graphql/types';\nimport {runStatusToBackfillStateString} from '../runs/RunStatusTag';\nimport {testId} from '../testing/testId';\n\nexport function countsByState(partitionKeysForCounts: {partitionKey: string; state: RunStatus}[]) {\n  const result: {[status: string]: number} = {\n    [RunStatus.SUCCESS]: 0,\n    [RunStatus.NOT_STARTED]: 0,\n    [RunStatus.FAILURE]: 0,\n    [RunStatus.QUEUED]: 0,\n    [RunStatus.STARTED]: 0,\n  };\n  for (const key of partitionKeysForCounts) {\n    result[key.state] = (result[key.state] || 0) + 1;\n  }\n  return result;\n}\n\nexport const PartitionRunStatusCheckboxes: React.FC<{\n  counts: {[status: string]: number};\n  value: RunStatus[];\n  allowed: RunStatus[];\n  onChange: (selected: RunStatus[]) => void;\n  disabled?: boolean;\n}> = ({counts, value, onChange, allowed, disabled}) => {\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 12}} style={{overflow: 'hidden'}}>\n      {allowed.map((status) => (\n        <Checkbox\n          key={status}\n          data-testid={testId(`run-status-${status}-checkbox`)}\n          disabled={disabled}\n          style={{marginBottom: 0, marginLeft: 10, minWidth: 200}}\n          checked={value.includes(status) && !disabled}\n          label={`${runStatusToBackfillStateString(status)} (${counts[status]})`}\n          onChange={() =>\n            onChange(\n              value.includes(status) ? value.filter((v) => v !== status) : [...value, status],\n            )\n          }\n        />\n      ))}\n    </Box>\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {isTimeseriesPartition} from '../assets/MultipartitioningSupport';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {PartitionDefinitionType, RunStatus} from '../graphql/types';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfillMutation,\n  LaunchPartitionBackfillMutationVariables,\n} from '../instance/types/BackfillUtils.types';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  DaemonNotRunningAlert,\n  DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT,\n  showBackfillErrorToast,\n  showBackfillSuccessToast,\n  UsingDefaultLauncherAlert,\n  USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT,\n} from './BackfillMessaging';\nimport {DimensionRangeWizard} from './DimensionRangeWizard';\nimport {countsByState, PartitionRunStatusCheckboxes} from './PartitionRunStatusCheckboxes';\nimport {\n  BackfillSelectorQuery,\n  BackfillSelectorQueryVariables,\n} from './types/BackfillSelector.types';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\nexport const BackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  runStatusData: {[partitionName: string]: RunStatus};\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  onLaunch,\n  onCancel,\n  onSubmit,\n  repoAddress,\n  runStatusData,\n  pipelineName,\n  partitionNames,\n}) => {\n  const history = useHistory();\n  const [range, _setRange] = React.useState<string[]>(\n    Object.keys(runStatusData).filter(\n      (k) => !runStatusData[k] || runStatusData[k] === RunStatus.FAILURE,\n    ),\n  );\n  const [stateFilters, setStateFilters] = React.useState<RunStatus[]>([\n    RunStatus.NOT_STARTED,\n    RunStatus.FAILURE,\n  ]);\n\n  const selected = React.useMemo(() => {\n    return range.filter((r) => stateFilters.includes(runStatusData[r]));\n  }, [range, stateFilters, runStatusData]);\n\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data} = useQuery<BackfillSelectorQuery, BackfillSelectorQueryVariables>(\n    BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId, false);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfillMutation | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  if (!data) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n    return (\n      <Box margin={20}>\n        <NonIdealState icon=\"error\" title=\"Could not fetch job details\" />\n      </Box>\n    );\n  }\n\n  const {pipelineSnapshotOrError: pipelineSnapshot, instance} = data;\n  const solids = explodeCompositesInHandleGraph(pipelineSnapshot.solidHandles).map(\n    (h: any) => h.solid,\n  );\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const isFailed = (name: string) => runStatusData[name] === RunStatus.FAILURE;\n  const failedPartitions = partitionNames.filter(isFailed);\n\n  const setRange = (selection: string[]) => {\n    const selectionSet = new Set(selection);\n    // first order the partition names, according to the order given by partition names, which\n    // is the order determined from the partition definition set in user code\n    _setRange(partitionNames.filter((name) => selectionSet.has(name)));\n    if (options.fromFailure && selection.filter((x) => !isFailed(x)).length > 0) {\n      setOptions({...options, fromFailure: false});\n    }\n  };\n\n  const counts = countsByState(\n    range.map((key) => ({\n      partitionKey: key,\n      state: runStatusData[key],\n    })),\n  );\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 24}}>\n          <Section title=\"Partitions\">\n            <Box>\n              Select partitions to materialize. Click and drag to select a range on the timeline.\n            </Box>\n\n            <DimensionRangeWizard\n              selected={range}\n              setSelected={setRange}\n              health={{runStatusForPartitionKey: (key) => runStatusData[key]}}\n              partitionKeys={partitionNames}\n              dimensionType={\n                isTimeseriesPartition(partitionNames[0])\n                  ? PartitionDefinitionType.TIME_WINDOW\n                  : PartitionDefinitionType.STATIC\n              }\n            />\n\n            <PartitionRunStatusCheckboxes\n              value={stateFilters}\n              onChange={setStateFilters}\n              counts={counts}\n              allowed={\n                options.fromFailure\n                  ? [RunStatus.FAILURE]\n                  : [\n                      RunStatus.NOT_STARTED,\n                      RunStatus.FAILURE,\n                      RunStatus.QUEUED,\n                      RunStatus.STARTED,\n                      RunStatus.SUCCESS,\n                    ]\n              }\n            />\n          </Section>\n\n          {failedPartitions.length ? (\n            <Section title=\"Reexecution\">\n              <Checkbox\n                checked={options.fromFailure}\n                disabled={!selected.every(isFailed)}\n                onChange={() => {\n                  const next = {\n                    ...options,\n                    fromFailure: !options.fromFailure,\n                    reexecute: !options.reexecute,\n                  };\n\n                  if (next.fromFailure) {\n                    setStateFilters([RunStatus.FAILURE]);\n                  }\n                  setQuery('');\n                  setOptions(next);\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed. Only applies for selections of failed partitions.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n            </Section>\n          ) : null}\n\n          <Section\n            title={\n              <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                <Box margin={{right: 4}}>Step subset</Box>\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Applies a step-selection to each run for the requested partitions.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              </Box>\n            }\n          >\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n              <GraphQueryInput\n                disabled={options.fromFailure}\n                width={520}\n                items={solids}\n                value={query}\n                placeholder=\"Type a step subset\"\n                onChange={setQuery}\n                autoApplyChanges={true}\n              />\n              {query ? (\n                <div style={{color: Colors.Gray500}}>\n                  {stepRows.length} step{stepRows.length === 1 ? '' : 's'} selected\n                </div>\n              ) : null}\n            </Box>\n          </Section>\n\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n              </div>\n            )}\n          </Section>\n\n          <Box flex={{direction: 'column', gap: 16}}>\n            <DaemonNotRunningAlert instance={instance} />\n\n            <UsingDefaultLauncherAlert instance={instance} />\n          </Box>\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSetName}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string, isPureAssetBackfill: boolean) => void;\n  onError: (data: LaunchPartitionBackfillMutation | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfillMutation,\n    LaunchPartitionBackfillMutationVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId, false);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst BACKFILL_SELECTOR_QUERY = gql`\n  query BackfillSelectorQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n    }\n    instance {\n      ...UsingDefaultLauncherAlertInstanceFragment\n      ...DaemonNotRunningAlertInstanceFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT}\n  ${USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT}\n`;\n\nconst Section = ({\n  title,\n  children,\n}: {\n  title: string | React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <Box flex={{direction: 'column', gap: 4}}>\n    <Subheading>{title}</Subheading>\n    <Box\n      flex={{direction: 'column', gap: 8}}\n      padding={{top: 16}}\n      border={{width: 1, color: Colors.KeylineGray, side: 'top'}}\n    >\n      {children}\n    </Box>\n  </Box>\n);\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport styled from 'styled-components/macro';\n\nimport {colorHash} from '../app/Util';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  partitionNames: string[];\n  jobDataByPartition?: {[partitionName: string]: PointValue};\n  stepDataByPartition?: {[partitionName: string]: {[key: string]: PointValue[]}};\n  title?: string;\n  yLabel?: string;\n  isJob: boolean;\n  hiddenStepKeys?: string[];\n}\n\nexport const PartitionGraph = ({\n  partitionNames,\n  jobDataByPartition,\n  stepDataByPartition,\n  title,\n  yLabel,\n  isJob,\n  hiddenStepKeys,\n}: PartitionGraphProps) => {\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: title},\n          },\n        }\n      : undefined;\n\n    return {\n      title: titleOptions,\n      animation: false,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n      maintainAspectRatio: false,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const buildDatasetData = () => {\n    const jobData: Point[] = [];\n    const stepData = {};\n\n    partitionNames.forEach((partitionName) => {\n      const hidden = !!hiddenPartitions[partitionName];\n      if (jobDataByPartition) {\n        jobData.push({\n          x: partitionName,\n          y: !hidden ? jobDataByPartition[partitionName] : undefined,\n        });\n      }\n\n      if (stepDataByPartition) {\n        const stepDataByKey = stepDataByPartition[partitionName];\n        Object.keys(stepDataByKey || {}).forEach((stepKey) => {\n          if (hiddenStepKeys?.includes(stepKey) || !stepDataByKey[stepKey]) {\n            return;\n          }\n          (stepData as any)[stepKey] = [\n            ...((stepData as any)[stepKey] || []),\n            {\n              x: partitionName,\n              y: !hidden ? stepDataByKey[stepKey] : undefined,\n            },\n          ];\n        });\n      }\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      (stepData as any)[stepKey] = _fillPartitions(partitionNames, (stepData as any)[stepKey]);\n    });\n\n    return {jobData, stepData};\n  };\n\n  const {jobData, stepData} = buildDatasetData();\n  const allLabel = isJob ? 'Total job' : 'Total pipeline';\n  const graphData = {\n    labels: partitionNames,\n    datasets: [\n      ...(!jobDataByPartition || (hiddenStepKeys && hiddenStepKeys.includes(allLabel))\n        ? []\n        : [\n            {\n              label: allLabel,\n              data: jobData,\n              borderColor: Colors.Gray500,\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          ]),\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey as keyof typeof stepData],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  // Passing graphData as a closure prevents ChartJS from trying to isEqual, which is fairly\n  // unlikely to save a render and is time consuming given the size of the data structure.\n  // We have a useMemo around the entire <PartitionGraphSet /> and there aren't many extra renders.\n  return (\n    <PartitionGraphContainer>\n      <Line type=\"line\" data={() => graphData} height={300} options={defaultOptions} ref={chart} />\n    </PartitionGraphContainer>\n  );\n};\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    (pointData as any)[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: (pointData as any)[partitionName],\n  }));\n};\n\nconst PartitionGraphContainer = styled.div`\n  display: flex;\n  color: ${Colors.Gray700};\n  padding: 24px 12px;\n  text-decoration: none;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, Dialog, Icon, Tooltip, Colors, Subheading, useViewport} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BackfillPartitionSelector} from './BackfillSelector';\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionStatus} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerOpStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {\n  OpJobPartitionSetFragment,\n  OpJobPartitionStatusFragment,\n  PartitionsStatusQuery,\n  PartitionsStatusQueryVariables,\n} from './types/OpJobPartitionsView.types';\nimport {PartitionRuns} from './useMatrixData';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\ntype PartitionStatus = OpJobPartitionStatusFragment;\n\nexport const OpJobPartitionsView: React.FC<{\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery<PartitionsStatusQuery, PartitionsStatusQueryVariables>(\n    PARTITIONS_STATUS_QUERY,\n    {\n      variables: {partitionSetName, repositorySelector},\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (\n          partitionSetOrError.__typename !== 'PartitionSet' ||\n          partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ) {\n          return null;\n        }\n\n        const partitionNames = partitionSetOrError.partitionsOrError.results.map(({name}) => name);\n\n        return (\n          <OpJobPartitionsViewContent\n            partitionNames={partitionNames}\n            partitionSet={partitionSetOrError}\n            repoAddress={repoAddress}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport function usePartitionDurations(partitions: PartitionRuns[]) {\n  return React.useMemo(() => {\n    const stepDurationData: {[name: string]: {[key: string]: (number | undefined)[]}} = {};\n    const runDurationData: {[name: string]: number | undefined} = {};\n\n    partitions.forEach((p) => {\n      if (!p.runsLoaded || p.runs.length === 0) {\n        return;\n      }\n      const sortedRuns = p.runs.sort((a, b) => a.startTime || 0 - (b.startTime || 0));\n      const lastRun = sortedRuns[sortedRuns.length - 1];\n      stepDurationData[p.name] = {};\n      runDurationData[p.name] =\n        lastRun?.endTime && lastRun?.startTime ? lastRun.endTime - lastRun.startTime : undefined;\n\n      lastRun.stepStats.forEach((s) => {\n        stepDurationData[p.name][s.stepKey] = [\n          s.endTime && s.startTime ? s.endTime - s.startTime : undefined,\n        ];\n      });\n    });\n\n    return {runDurationData, stepDurationData};\n  }, [partitions]);\n}\n\nconst OpJobPartitionsViewContent: React.FC<{\n  partitionNames: string[];\n  partitionSet: OpJobPartitionSetFragment;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, partitionNames, repoAddress}) => {\n  const {\n    permissions: {canLaunchPartitionBackfill},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {viewport, containerProps} = useViewport();\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showSteps, setShowSteps] = React.useState(false);\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const [backfillRefetchCounter, setBackfillRefetchCounter] = React.useState(0);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter: [],\n    repositorySelector,\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !showSteps,\n  });\n\n  React.useEffect(() => {\n    if (viewport.width && !showSteps) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, showSteps, setPageSize]);\n\n  const selectedPartitions = showSteps\n    ? partitionNames.slice(\n        Math.max(0, partitionNames.length - 1 - offset - pageSize),\n        partitionNames.length - offset,\n      )\n    : partitionNames;\n\n  const stepDurationData = usePartitionDurations(partitions).stepDurationData;\n\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n\n  const {runStatusData, runDurationData} = React.useMemo(() => {\n    // Note: This view reads \"run duration\" from the `partitionStatusesOrError` GraphQL API,\n    // rather than looking at the duration of the most recent run returned in `partitions` above\n    // so that the latter can be loaded when you click \"Show per-step status\" only.\n    const runStatusData: {[name: string]: RunStatus} = {};\n    const runDurationData: {[name: string]: number | undefined} = {};\n\n    (partitionSet.partitionStatusesOrError.__typename === 'PartitionStatuses'\n      ? partitionSet.partitionStatusesOrError.results\n      : []\n    ).forEach((p) => {\n      runStatusData[p.partitionName] = p.runStatus || RunStatus.NOT_STARTED;\n      if (selectedPartitions.includes(p.partitionName)) {\n        runDurationData[p.partitionName] = p.runDuration || undefined;\n      }\n    });\n    return {runStatusData, runDurationData};\n  }, [partitionSet, selectedPartitions]);\n\n  const health = React.useMemo(() => {\n    return {runStatusForPartitionKey: (name: string) => runStatusData[name]};\n  }, [runStatusData]);\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, zIndex: 1000}}\n        title={`Launch ${partitionSet.pipelineName} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <BackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            partitionNames={partitionNames}\n            runStatusData={runStatusData}\n            pipelineName={partitionSet.pipelineName}\n            onCancel={() => setShowBackfillSetup(false)}\n            onLaunch={(_backfillId, _stepQuery) => {\n              setBackfillRefetchCounter(backfillRefetchCounter + 1);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowSteps(!showSteps)} active={showBackfillSetup}>\n            {showSteps ? 'Hide per-step status' : 'Show per-step status'}\n          </Button>\n          {canLaunchPartitionBackfill ? (\n            <Button\n              onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n              icon={<Icon name=\"add_circle\" />}\n              active={showBackfillSetup}\n            >\n              Launch backfill...\n            </Button>\n          ) : (\n            <Tooltip content={disabledReasons.canLaunchPartitionBackfill}>\n              <Button icon={<Icon name=\"add_circle\" />} disabled>\n                Launch backfill...\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={partitionNames.length} label=\"Total partitions\" />\n        <CountBox\n          count={partitionNames.filter((x) => runStatusData[x] === RunStatus.FAILURE).length}\n          label=\"Failed partitions\"\n        />\n        <CountBox\n          count={\n            partitionNames.filter(\n              (x) => !runStatusData[x] || runStatusData[x] === RunStatus.NOT_STARTED,\n            ).length\n          }\n          label=\"Missing partitions\"\n        />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={partitionNames}\n            health={health}\n            selected={showSteps ? selectedPartitions : undefined}\n            selectionWindowSize={pageSize}\n            onClick={(partitionName) => {\n              const maxIdx = partitionNames.length - 1;\n              const selectedIdx = partitionNames.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n              if (!showSteps) {\n                setShowSteps(true);\n              }\n            }}\n            tooltipMessage=\"Click to view per-step status\"\n          />\n        </div>\n        {showSteps ? (\n          <Box margin={{top: 16}}>\n            <PartitionPerOpStatus\n              partitionNames={partitionNames}\n              partitions={partitions}\n              pipelineName={partitionSet.pipelineName}\n              repoAddress={repoAddress}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={showSteps ? selectedPartitions : partitionNames}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      {showSteps ? (\n        <>\n          <Box padding={{horizontal: 24, vertical: 16}}>\n            <Subheading>Step duration</Subheading>\n          </Box>\n          <Box margin={24}>\n            <PartitionGraph\n              isJob={true}\n              title=\"Execution time by partition\"\n              yLabel=\"Execution time (secs)\"\n              partitionNames={selectedPartitions}\n              stepDataByPartition={stepDurationData}\n            />\n          </Box>\n        </>\n      ) : null}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSet.name}\n          repositorySelector={repositorySelector}\n          partitionNames={partitionNames}\n          refetchCounter={backfillRefetchCounter}\n        />\n      </Box>\n    </div>\n  );\n};\n\nexport const CountBox: React.FC<{\n  count: number;\n  label: string;\n}> = ({count, label}) => (\n  <Box padding={16} style={{flex: 1}} border={{side: 'right', width: 1, color: Colors.KeylineGray}}>\n    <div style={{fontSize: 18, marginBottom: 4}}>\n      <strong>{count}</strong>\n    </div>\n    <div>{label}</div>\n  </Box>\n);\n\nconst PARTITIONS_STATUS_QUERY = gql`\n  query PartitionsStatusQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        ...OpJobPartitionSet\n      }\n    }\n  }\n\n  fragment OpJobPartitionSet on PartitionSet {\n    id\n    name\n    pipelineName\n    partitionsOrError {\n      ... on Partitions {\n        results {\n          name\n        }\n      }\n    }\n    partitionStatusesOrError {\n      __typename\n      ... on PartitionStatuses {\n        results {\n          id\n          ...OpJobPartitionStatus\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment OpJobPartitionStatus on PartitionStatus {\n    id\n    partitionName\n    runStatus\n    runDuration\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Subheading, useViewport} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {useAssetGraphData} from '../asset-graph/useAssetGraphData';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {\n  mergedAssetHealth,\n  explodePartitionKeysInSelection,\n  isTimeseriesDimension,\n} from '../assets/MultipartitioningSupport';\nimport {usePartitionHealthData} from '../assets/usePartitionHealthData';\nimport {RepositorySelector} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {JobBackfillsTable} from './JobBackfillsTable';\nimport {CountBox, usePartitionDurations} from './OpJobPartitionsView';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionStatus} from './PartitionStatus';\nimport {getVisibleItemCount, PartitionPerAssetStatus} from './PartitionStepStatus';\nimport {GRID_FLOATING_CONTAINER_WIDTH} from './RunMatrixUtils';\nimport {allPartitionsRange} from './SpanRepresentation';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\nexport const AssetJobPartitionsView: React.FC<{\n  pipelineName: string;\n  partitionSetName: string;\n  repoAddress: RepoAddress;\n}> = ({partitionSetName, repoAddress, pipelineName}) => {\n  const {viewport, containerProps} = useViewport();\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const assetGraph = useAssetGraphData('', {\n    pipelineSelector: {\n      pipelineName,\n      repositoryName: repoAddress.name,\n      repositoryLocationName: repoAddress.location,\n    },\n  });\n\n  const assetHealth = usePartitionHealthData(assetGraph.graphAssetKeys);\n\n  const {total, missing, merged} = React.useMemo(() => {\n    const merged = mergedAssetHealth(assetHealth.filter((h) => h.dimensions.length > 0));\n    const selection = merged.dimensions.map((d) => ({\n      selectedKeys: d.partitionKeys,\n      selectedRanges: [allPartitionsRange(d)],\n      dimension: d,\n    }));\n    const allKeys = explodePartitionKeysInSelection(selection, merged.stateForKey);\n\n    return {\n      merged,\n      total: allKeys.length,\n      missing: allKeys.filter((p) => p.state.includes(AssetPartitionStatus.MISSING)).length,\n    };\n  }, [assetHealth]);\n\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showAssets, setShowAssets] = React.useState(false);\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const approxPageSize = getVisibleItemCount(viewport.width - GRID_FLOATING_CONTAINER_WIDTH);\n      setPageSize(approxPageSize);\n    }\n  }, [viewport.width, setPageSize]);\n\n  let dimensionIdx = merged.dimensions.findIndex(isTimeseriesDimension);\n  if (dimensionIdx === -1) {\n    dimensionIdx = 0; // may as well show something\n  }\n\n  const dimension = merged.dimensions[dimensionIdx] ? merged.dimensions[dimensionIdx] : null;\n  const dimensionKeys = dimension?.partitionKeys || [];\n\n  const selectedDimensionKeys = dimensionKeys.slice(\n    Math.max(0, dimensionKeys.length - 1 - offset - pageSize),\n    dimensionKeys.length - offset,\n  );\n  return (\n    <div>\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{vertical: 16, horizontal: 24}}\n      >\n        <Subheading>Status</Subheading>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowAssets(!showAssets)}>\n            {showAssets ? 'Hide per-asset status' : 'Show per-asset status'}\n          </Button>\n          <LaunchAssetExecutionButton\n            scope={{all: assetGraph.graphQueryItems.map((g) => g.node), skipAllTerm: true}}\n            preferredJobName={pipelineName}\n          />\n        </Box>\n      </Box>\n      <Box\n        flex={{direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={{left: 8}}\n      >\n        <CountBox count={total} label=\"Total partitions\" />\n        <CountBox count={missing} label=\"Missing partitions\" />\n      </Box>\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={dimensionKeys}\n            splitPartitions={dimension ? !isTimeseriesDimension(dimension) : false}\n            health={{ranges: merged.rangesForSingleDimension(dimensionIdx)}}\n            selected={selectedDimensionKeys}\n            selectionWindowSize={pageSize}\n            tooltipMessage=\"Click to view per-asset status\"\n            onClick={(partitionName) => {\n              const maxIdx = dimensionKeys.length - 1;\n              const selectedIdx = dimensionKeys.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n            }}\n          />\n        </div>\n        {showAssets && dimension && (\n          <Box margin={{top: 16}}>\n            <PartitionPerAssetStatus\n              rangeDimensionIdx={dimensionIdx}\n              rangeDimension={dimension}\n              assetHealth={assetHealth}\n              assetQueryItems={assetGraph.graphQueryItems}\n              pipelineName={pipelineName}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        )}\n      </Box>\n      {showAssets && (\n        <AssetJobPartitionGraphs\n          repositorySelector={repositorySelector}\n          pipelineName={pipelineName}\n          partitionSetName={partitionSetName}\n          multidimensional={(merged?.dimensions.length || 0) > 1}\n          dimensionName={dimension ? dimension.name : null}\n          dimensionKeys={dimensionKeys}\n          selected={selectedDimensionKeys}\n          offset={offset}\n          pageSize={pageSize}\n        />\n      )}\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', color: Colors.KeylineGray, width: 1}}\n        style={{marginBottom: -1}}\n      >\n        <Subheading>Backfill history</Subheading>\n      </Box>\n      <Box margin={{bottom: 20}}>\n        <JobBackfillsTable\n          partitionSetName={partitionSetName}\n          repositorySelector={repositorySelector}\n          partitionNames={dimensionKeys}\n          refetchCounter={1}\n        />\n      </Box>\n    </div>\n  );\n};\n\nconst AssetJobPartitionGraphs: React.FC<{\n  repositorySelector: RepositorySelector;\n  pipelineName: string;\n  partitionSetName: string;\n  multidimensional: boolean;\n  dimensionName: string | null;\n  dimensionKeys: string[];\n  selected: string[];\n  pageSize: number;\n  offset: number;\n}> = ({\n  repositorySelector,\n  dimensionKeys,\n  dimensionName,\n  selected,\n  pageSize,\n  partitionSetName,\n  multidimensional,\n  pipelineName,\n  offset,\n}) => {\n  const partitions = usePartitionStepQuery({\n    partitionSetName,\n    partitionTagName: multidimensional\n      ? `${DagsterTag.Partition}/${dimensionName}`\n      : DagsterTag.Partition,\n    partitionNames: dimensionKeys,\n    repositorySelector,\n    pageSize,\n    runsFilter: [],\n    jobName: pipelineName,\n    offset,\n    skipQuery: !dimensionName,\n  });\n\n  const {stepDurationData, runDurationData} = usePartitionDurations(partitions);\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Run duration</Subheading>\n      </Box>\n\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading>Step durations</Subheading>\n      </Box>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution time by partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={selected}\n          stepDataByPartition={stepDurationData}\n        />\n      </Box>\n    </>\n  );\n};\n","import {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {usePartitionNameForPipeline} from '../assets/usePartitionNameForPipeline';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetJobPartitionsView} from './AssetJobPartitionsView';\nimport {OpJobPartitionsView} from './OpJobPartitionsView';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const pipelineInfo = repo?.repository.pipelines.find(\n    (pipelineOrJob) => pipelineOrJob.name === pipelineName,\n  );\n  const isJob = !!pipelineInfo?.isJob;\n  const isAssetJob = !!pipelineInfo?.isAssetJob;\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(params);\n\n  const {partitionSet, partitionSetError} = usePartitionNameForPipeline(repoAddress, pipelineName);\n\n  if (!partitionSet && !partitionSetError) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n  if (partitionSetError) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState icon=\"error\" title=\"Partitions\" description={partitionSetError.message} />\n      </Box>\n    );\n  }\n\n  if (!partitionSet) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Partitions\"\n          description={\n            <div>\n              There are no partition sets defined for {isJob ? 'job' : 'pipeline'}{' '}\n              <code>{pipelineName}</code>.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return isAssetJob ? (\n    <AssetJobPartitionsView\n      pipelineName={pipelineName}\n      partitionSetName={partitionSet.name}\n      repoAddress={repoAddress}\n    />\n  ) : (\n    <OpJobPartitionsView partitionSetName={partitionSet.name} repoAddress={repoAddress} />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, useLocation, useParams} from 'react-router-dom';\n\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOrJobDisambiguationRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const location = useLocation();\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n\n  const {pipelineName: pipelineOrJobName} = explorerPathFromString(pipelinePath);\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineOrJobName);\n  const {pathname, search} = location;\n\n  const replacedPath = pathname.replace('/pipeline_or_job/', isJob ? '/jobs/' : '/pipelines/');\n\n  return <Redirect to={`${replacedPath}${search}`} />;\n};\n","import * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {useJobTitle} from './useJobTitle';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString((params as any)['0']);\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, explorerPath.pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, action: 'push' | 'replace') => {\n      history[action]({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n        ),\n      });\n    },\n    [history, location.search, repoAddress, isJob],\n  );\n\n  const onNavigateToSourceAssetNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (!node.jobName || !node.opNames.length || !node.repoAddress) {\n        // This op has no definition in any loaded repository (source asset).\n        // The best we can do is show the asset page. This will still be mostly empty,\n        // but there can be a description.\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n        return;\n      }\n\n      // Note: asset location can be in another job AND in another repo! Need\n      // to build a full job URL using the `node` info here.\n      history.replace({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          node.repoAddress,\n          `/jobs/${explorerPathToString({\n            ...explorerPath,\n            opNames: [tokenForAssetKey(node.assetKey)],\n            opsQuery: '',\n            pipelineName: node.jobName!,\n          })}`,\n        ),\n      });\n    },\n    [explorerPath, history, location.search],\n  );\n\n  return (\n    <PipelineExplorerContainer\n      repoAddress={repoAddress}\n      explorerPath={explorerPath}\n      onChangeExplorerPath={onChangeExplorerPath}\n      onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n    />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {JobLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchpadSetupFromRunRoot} from '../launchpad/LaunchpadSetupFromRunRoot';\nimport {LaunchpadSetupRoot} from '../launchpad/LaunchpadSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOrJobDisambiguationRoot} from './PipelineOrJobDisambiguationRoot';\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route path=\"/locations/:repoPath/pipeline_or_job/:pipelinePath/(/?.*)\">\n          <PipelineOrJobDisambiguationRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n        >\n          <LaunchpadSetupRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground/setup-from-run/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/playground/setup-from-run/:runId',\n          ]}\n        >\n          <LaunchpadSetupFromRunRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/playground',\n            '/locations/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n        >\n          <JobLaunchpad repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/locations/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/runs',\n            '/locations/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n        >\n          <PipelineRunsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/partitions',\n            '/locations/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n        >\n          <PipelinePartitionsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/locations/:repoPath/pipelines/:pipelinePath/overview',\n            '/locations/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect to={`/locations/${props.match.url.replace(/\\/overview$/i, '')}`} />\n          )}\n        />\n        <Route path={['/locations/:repoPath/pipelines/(/?.*)', '/locations/:repoPath/jobs/(/?.*)']}>\n          <PipelineOverviewRoot repoAddress={repoAddress} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, DialogFooter, Dialog, Colors, DialogBody} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {InstigationSelector} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/TickHistory.types';\nimport {EventTypeColumn, TimestampColumn, Row} from '../runs/LogsRowComponents';\nimport {\n  ColumnWidthsProvider,\n  ColumnWidthsContext,\n  HeadersContainer,\n  HeaderContainer,\n  Header,\n} from '../runs/LogsScrollingTableHeader';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {\n  TickLogEventsQuery,\n  TickLogEventsQueryVariables,\n  TickLogEventFragment,\n} from './types/TickLogDialog.types';\n\nexport const TickLogDialog: React.FC<{\n  tick: HistoryTickFragment;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({tick, instigationSelector, onClose}) => {\n  const {data} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(TICK_LOG_EVENTS_QUERY, {\n    variables: {instigationSelector, timestamp: tick.timestamp},\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!events}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      <DialogBody>\n        {events && events.length ? (\n          <TickLogsTable events={events} />\n        ) : (\n          <Box\n            flex={{justifyContent: 'center', alignItems: 'center'}}\n            style={{flex: 1, color: Colors.Gray600}}\n          >\n            No logs available\n          </Box>\n        )}\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst TickLogsTable: React.FC<{events: TickLogEventFragment[]}> = ({events}) => {\n  return (\n    <div style={{overflow: 'hidden', borderBottom: '0.5px solid #ececec', flex: 1}}>\n      <ColumnWidthsProvider onWidthsChanged={() => {}}>\n        <Headers />\n        {events.map((event, idx) => (\n          <TickLogRow event={event} key={idx} />\n        ))}\n      </ColumnWidthsProvider>\n    </div>\n  );\n};\n\nconst Headers = () => {\n  const widths = React.useContext(ColumnWidthsContext);\n  return (\n    <HeadersContainer>\n      <Header\n        width={widths.eventType}\n        onResize={(width) => widths.onChange({...widths, eventType: width})}\n      >\n        Event Type\n      </Header>\n      <HeaderContainer style={{flex: 1}}>Info</HeaderContainer>\n      <Header\n        handleSide=\"left\"\n        width={widths.timestamp}\n        onResize={(width) => widths.onChange({...widths, timestamp: width})}\n      >\n        Timestamp\n      </Header>\n    </HeadersContainer>\n  );\n};\n\nconst TickLogRow: React.FC<{event: TickLogEventFragment}> = ({event}) => {\n  return (\n    <Row level={event.level} highlighted={false}>\n      <EventTypeColumn>\n        <span style={{marginLeft: 8}}>{event.level}</span>\n      </EventTypeColumn>\n      <Box padding={{horizontal: 12}} style={{flex: 1}}>\n        {event.message}\n      </Box>\n      <TimestampColumn time={event.timestamp} />\n    </Row>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...TickLogEvent\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment TickLogEvent on InstigationEvent {\n    message\n    timestamp\n    level\n  }\n`;\n","import {Colors} from '@dagster-io/ui';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../graphql/types';\n\nimport {NextTickForHistoryFragment, HistoryTickFragment} from './types/TickHistory.types';\n\ntype FutureTick = NextTickForHistoryFragment;\ntype InstigationTick = HistoryTickFragment;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.Blue500,\n  [InstigationTickStatus.FAILURE]: Colors.Red500,\n  [InstigationTickStatus.STARTED]: Colors.Gray400,\n  [InstigationTickStatus.SKIPPED]: Colors.Yellow500,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp!)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp! <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp!, y: 0});\n    tickColors.push(Colors.Gray200);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.Gray100,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.Gray200,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.Gray100,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label(tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            const cursorLabel = tick.cursor ? `Cursor: ${tick.cursor}\\n` : '';\n\n            // returning an array of strings ensures that each string is displayed on its own line\n            // in the tooltip\n\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return cursorLabel ? [tick.skipReason, cursorLabel] : tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return cursorLabel ? [...tick.runIds, cursorLabel] : tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return cursorLabel ? [...tick.originRunIds, cursorLabel] : tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return cursorLabel ? [tick.error.message, cursorLabel] : tick.error.message;\n            }\n            return cursorLabel;\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n\n    maintainAspectRatio: false,\n  };\n\n  return <Line type=\"line\" data={graphData} height={150} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {Button, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {copyValue} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationSelector, InstigationTickStatus} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nimport {FailedRunList, RunList, TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\n\nexport const TickDetailsDialog: React.FC<{\n  timestamp: number | undefined;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({timestamp, instigationSelector, onClose}) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, timestamp: timestamp || 0},\n    skip: !timestamp,\n    partialRefetch: true,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!tick}\n      onClose={onClose}\n      style={{\n        width: tick && tick.status === InstigationTickStatus.SKIPPED ? '50vw' : '90vw',\n      }}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      {tick ? (\n        <DialogBody>\n          {tick.status === InstigationTickStatus.SUCCESS ? (\n            tick.runIds.length ? (\n              <RunList runIds={tick.runIds} />\n            ) : (\n              <FailedRunList originRunIds={tick.originRunIds} />\n            )\n          ) : null}\n          {tick.status === InstigationTickStatus.SKIPPED ? (\n            <Group direction=\"row\" spacing={16}>\n              <TickTag tick={tick} />\n              <span>{tick.skipReason || 'No skip reason provided'}</span>\n            </Group>\n          ) : tick.status === InstigationTickStatus.FAILURE && tick.error ? (\n            <PythonErrorInfo error={tick.error} />\n          ) : undefined}\n        </DialogBody>\n      ) : null}\n      <DialogFooter>\n        <Button\n          icon={<Icon name=\"copy_to_clipboard\" />}\n          onClick={(e) => copyValue(e, window.location.href)}\n        >\n          Copy Link\n        </Button>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Spinner,\n  Table,\n  Subheading,\n  FontFamily,\n  Icon,\n  IconWrapper,\n} from '@dagster-io/ui';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ONE_MONTH, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationTickStatus, InstigationType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {RunStatusLink, RUN_STATUS_FRAGMENT} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {\n  HistoryTickFragment,\n  TickHistoryQuery,\n  TickHistoryQueryVariables,\n} from './types/TickHistory.types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: false,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        (queryState as any)[state.toLowerCase()] = String(states[state as keyof typeof states]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          (status as any)[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n  const copyToClipboard = useCopyToClipboard();\n  const {flagSensorScheduleLogging} = useFeatureFlags();\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = Object.keys(shownStates)\n    .filter((status) => shownStates[status as keyof typeof shownStates])\n    .map((status) => status as InstigationTickStatus);\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  const [logTick, setLogTick] = React.useState<InstigationTick>();\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {ticks, instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      {logTick ? (\n        <TickLogDialog\n          tick={logTick}\n          instigationSelector={instigationSelector}\n          onClose={() => setLogTick(undefined)}\n        />\n      ) : null}\n      <Box margin={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Runs</th>\n              {flagSensorScheduleLogging ? <th style={{width: 180}}>Logs</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick) => (\n              <tr key={tick.id}>\n                <td>\n                  <TimestampDisplay\n                    timestamp={tick.timestamp}\n                    timeFormat={{showTimezone: false, showSeconds: true}}\n                  />\n                </td>\n                <td>\n                  <TickTag tick={tick} />\n                </td>\n                {instigationType === InstigationType.SENSOR ? (\n                  <td style={{width: 120}}>\n                    {tick.cursor ? (\n                      <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                        <div style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n                          {truncate(tick.cursor || '')}\n                        </div>\n                        <CopyButton\n                          onClick={() => {\n                            copyToClipboard(tick.cursor || '');\n                            SharedToaster.show({\n                              message: <div>Copied value</div>,\n                              intent: 'success',\n                            });\n                          }}\n                        >\n                          <Icon name=\"assignment\" />\n                        </CopyButton>\n                      </Box>\n                    ) : (\n                      <>&mdash;</>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  {tick.runIds.length ? (\n                    tick.runs.map((run) => (\n                      <React.Fragment key={run.id}>\n                        <RunStatusLink run={run} />\n                      </React.Fragment>\n                    ))\n                  ) : (\n                    <>&mdash;</>\n                  )}\n                </td>\n                {flagSensorScheduleLogging ? (\n                  <td>\n                    {tick.logKey ? <a onClick={() => setLogTick(tick)}>View logs</a> : <>&mdash;</>}\n                  </td>\n                ) : null}\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n}) => {\n  const [selectedTime, setSelectedTime] = useQueryPersistedState<number | undefined>({\n    encode: (timestamp) => ({time: timestamp}),\n    decode: (qs) => (qs['time'] ? Number(qs['time']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {instigationSelector, limit: 15},\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, pollingPaused ? ONE_MONTH : 1000);\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <>\n        <Box\n          padding={{top: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  const {ticks, nextTick} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTime(tick ? tick.timestamp : undefined);\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        timestamp={selectedTime}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      </Box>\n    </>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          ...NextTickForHistory\n        }\n        ticks(dayRange: $dayRange, limit: $limit, cursor: $cursor, statuses: $statuses) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment NextTickForHistory on DryRunInstigationTick {\n    timestamp\n  }\n\n  fragment HistoryTick on InstigationTick {\n    id\n    status\n    timestamp\n    cursor\n    skipReason\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray600};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.Link};\n  }\n`;\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  NonIdealState,\n  Popover,\n  Spinner,\n  Subheading,\n  Tag,\n  useViewport,\n} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {timestampToString} from '../app/time/timestampToString';\nimport {testId} from '../testing/testId';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {\n  GetScheduleQuery,\n  GetScheduleQueryVariables,\n  ScheduleDryRunMutation,\n  ScheduleDryRunMutationVariables,\n} from './types/EvaluateScheduleDialog.types';\n\nconst locale = navigator.language;\n\ntype Props = {\n  repoAddress: RepoAddress;\n  name: string;\n  onClose: () => void;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const EvaluateScheduleDialog: React.FC<Props> = (props) => {\n  return (\n    <Dialog\n      {...props}\n      style={{width: '70vw', display: 'flex'}}\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Icon name=\"schedule\" />\n          <span>{props.name}</span>\n        </Box>\n      }\n    >\n      <EvaluateSchedule {...props} />\n    </Dialog>\n  );\n};\n\nconst EvaluateSchedule: React.FC<Props> = ({repoAddress, name, onClose, jobName}) => {\n  const [_selectedTimestamp, setSelectedTimestamp] = React.useState<{ts: number; label: string}>();\n  const {data} = useQuery<GetScheduleQuery, GetScheduleQueryVariables>(GET_SCHEDULE_QUERY, {\n    variables: {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName: name,\n      },\n    },\n  });\n  const {\n    timezone: [userTimezone],\n  } = React.useContext(TimeContext);\n  const [isTickSelectionOpen, setIsTickSelectionOpen] = React.useState<boolean>(false);\n  const selectedTimestampRef = React.useRef<{ts: number; label: string} | null>(null);\n  const {viewport, containerProps} = useViewport();\n  const [shouldEvaluate, setShouldEvaluate] = React.useState(false);\n  const content = React.useMemo(() => {\n    if (shouldEvaluate) {\n      return (\n        <EvaluateScheduleContent\n          repoAddress={repoAddress}\n          name={name}\n          timestamp={selectedTimestampRef.current!.ts}\n          jobName={jobName}\n        />\n      );\n    }\n    if (!data) {\n      return (\n        <Box padding={{vertical: 48}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.scheduleOrError.__typename === 'PythonError') {\n      return <div />;\n    }\n    if (data.scheduleOrError.__typename === 'ScheduleNotFoundError') {\n      return <div />;\n    }\n    const timestamps = data.scheduleOrError.potentialTickTimestamps.map((ts) => ({\n      ts,\n      label: timestampToString({\n        timestamp: {unix: ts},\n        locale,\n        timezone: userTimezone,\n        timeFormat: {\n          showTimezone: true,\n        },\n      }),\n    }));\n    selectedTimestampRef.current = _selectedTimestamp || timestamps[0];\n    return (\n      <SelectWrapper>\n        <ScheduleDescriptor>Select a mock evaluation time</ScheduleDescriptor>\n        <Popover\n          isOpen={isTickSelectionOpen}\n          position=\"bottom-left\"\n          fill={true}\n          content={\n            <Menu style={{maxHeight: '400px', overflow: 'scroll', width: `${viewport.width}px`}}>\n              {timestamps.map((timestamp) => (\n                <MenuItem\n                  key={timestamp.ts}\n                  text={<div data-testid={testId(`tick-${timestamp.ts}`)}>{timestamp.label}</div>}\n                  onClick={() => {\n                    setSelectedTimestamp(timestamp);\n                    setIsTickSelectionOpen(false);\n                  }}\n                />\n              ))}\n            </Menu>\n          }\n        >\n          <div {...containerProps}>\n            <Button\n              style={{flex: 1}}\n              rightIcon={<Icon name=\"arrow_drop_down\" />}\n              onClick={() => setIsTickSelectionOpen((isOpen) => !isOpen)}\n              data-testid={testId('tick-selection')}\n            >\n              {selectedTimestampRef.current.label}\n            </Button>\n          </div>\n        </Popover>\n      </SelectWrapper>\n    );\n  }, [\n    _selectedTimestamp,\n    containerProps,\n    data,\n    isTickSelectionOpen,\n    jobName,\n    name,\n    repoAddress,\n    shouldEvaluate,\n    userTimezone,\n    viewport.width,\n  ]);\n\n  const buttons = React.useMemo(() => {\n    if (!shouldEvaluate) {\n      return (\n        <>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button\n            data-testid={testId('evaluate')}\n            intent=\"primary\"\n            onClick={() => {\n              setShouldEvaluate(true);\n            }}\n          >\n            Evaluate\n          </Button>\n        </>\n      );\n    } else {\n      return <Button onClick={onClose}>Close</Button>;\n    }\n  }, [onClose, shouldEvaluate]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      {buttons ? <DialogFooter topBorder>{buttons}</DialogFooter> : null}\n    </>\n  );\n};\n\nexport const GET_SCHEDULE_QUERY = gql`\n  query getSchedule(\n    $scheduleSelector: ScheduleSelector!\n    $startTimestamp: Float\n    $ticksAfter: Int\n    $ticksBefore: Int\n  ) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      __typename\n      ... on PythonError {\n        message\n        stack\n      }\n      ... on Schedule {\n        id\n        name\n        potentialTickTimestamps(\n          startTimestamp: $startTimestamp\n          upperLimit: $ticksAfter\n          lowerLimit: $ticksBefore\n        )\n      }\n    }\n  }\n`;\n\nconst EvaluateScheduleContent: React.FC<{\n  repoAddress: RepoAddress;\n  name: string;\n  timestamp: number;\n  jobName: string;\n}> = ({repoAddress, name, timestamp, jobName}) => {\n  const {\n    timezone: [userTimezone],\n  } = React.useContext(TimeContext);\n  const [scheduleDryRunMutation] = useMutation<\n    ScheduleDryRunMutation,\n    ScheduleDryRunMutationVariables\n  >(\n    SCHEDULE_DRY_RUN_MUTATION,\n    React.useMemo(() => {\n      const repositorySelector = repoAddressToSelector(repoAddress);\n      return {\n        variables: {\n          selectorData: {\n            ...repositorySelector,\n            scheduleName: name,\n          },\n          timestamp,\n        },\n      };\n    }, [name, repoAddress, timestamp]),\n  );\n  const [result, setResult] = React.useState<Awaited<\n    ReturnType<typeof scheduleDryRunMutation>\n  > | null>(null);\n  React.useEffect(() => {\n    scheduleDryRunMutation().then((result) => {\n      setResult(() => result);\n    });\n  }, [scheduleDryRunMutation]);\n\n  if (!result || !result.data) {\n    return (\n      <Box padding={32} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  const evaluationResult =\n    result?.data?.scheduleDryRun.__typename === 'DryRunInstigationTick'\n      ? result?.data?.scheduleDryRun.evaluationResult\n      : null;\n\n  const innerContent = () => {\n    const data = result.data;\n    if (!data || !evaluationResult) {\n      return (\n        <NonIdealState\n          title=\"An unknown error occurred\"\n          description={\n            <span>\n              File an issue on{' '}\n              <a href=\"https://github.com/dagster-io/dagster\" target=\"_blank\" rel=\"noreferrer\">\n                Github\n              </a>{' '}\n              if you think this is a bug\n            </span>\n          }\n          icon=\"error\"\n        />\n      );\n    } else if (evaluationResult.error) {\n      return <PythonErrorInfo error={evaluationResult.error} />;\n    }\n    if (!evaluationResult.runRequests?.length) {\n      return (\n        <div>\n          <Subheading>Skip Reason</Subheading>\n          <div>{evaluationResult?.skipReason || 'No skip reason was output'}</div>\n        </div>\n      );\n    } else {\n      return (\n        <RunRequestTable\n          runRequests={evaluationResult.runRequests}\n          repoAddress={repoAddress}\n          isJob={true}\n          jobName={jobName}\n          name={name}\n        />\n      );\n    }\n  };\n\n  const numRunRequests = evaluationResult?.runRequests?.length;\n  const error = evaluationResult?.error;\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <Box>\n        <Grid>\n          <div>\n            <Subheading>Result</Subheading>\n            <Box flex={{grow: 1, alignItems: 'center'}}>\n              <div>\n                {error ? (\n                  <Tag intent=\"danger\">Failed</Tag>\n                ) : numRunRequests ? (\n                  <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                ) : (\n                  <Tag intent=\"warning\">Skipped</Tag>\n                )}\n              </div>\n            </Box>\n          </div>\n          <div>\n            <Subheading>Tick</Subheading>\n            <Box flex={{grow: 1, alignItems: 'center'}}>\n              <Mono>\n                {timestampToString({\n                  timestamp: {unix: timestamp},\n                  locale,\n                  timezone: userTimezone,\n                  timeFormat: {\n                    showTimezone: true,\n                  },\n                })}\n              </Mono>\n            </Box>\n          </div>\n        </Grid>\n      </Box>\n      {innerContent()}\n    </Box>\n  );\n};\nexport const SCHEDULE_DRY_RUN_MUTATION = gql`\n  mutation ScheduleDryRunMutation($selectorData: ScheduleSelector!, $timestamp: Float) {\n    scheduleDryRun(selectorData: $selectorData, timestamp: $timestamp) {\n      __typename\n      ...PythonErrorFragment\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          runRequests {\n            runConfigYaml\n            tags {\n              key\n              value\n            }\n            runKey\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ... on ScheduleNotFoundError {\n        scheduleName\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst SelectWrapper = styled.div`\n  button {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.KeylineGray};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst ScheduleDescriptor = styled.div`\n  padding-bottom: 2px;\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {ButtonLink, Colors, Group, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assertUnreachable} from '../app/Util';\nimport {RunStatus} from '../graphql/types';\nimport {StatusTable} from '../instigation/InstigationUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  SchedulePartitionStatusFragment,\n  SchedulePartitionStatusQuery,\n  SchedulePartitionStatusQueryVariables,\n  SchedulePartitionStatusResultFragment,\n} from './types/SchedulePartitionStatus.types';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\nconst RUN_STATUSES = ['Succeeded', 'Failed', 'Missing', 'Pending'];\n\nconst calculateDisplayStatus = (partition: SchedulePartitionStatusResultFragment) => {\n  switch (partition.runStatus) {\n    case null:\n      return 'Missing';\n    case RunStatus.SUCCESS:\n      return 'Succeeded';\n    case RunStatus.FAILURE:\n    case RunStatus.CANCELED:\n    case RunStatus.CANCELING:\n      return 'Failed';\n    case RunStatus.MANAGED:\n    case RunStatus.QUEUED:\n    case RunStatus.NOT_STARTED:\n    case RunStatus.STARTED:\n    case RunStatus.STARTING:\n      return 'Pending';\n    default:\n      return assertUnreachable(partition.runStatus);\n  }\n};\n\nexport const SchedulePartitionStatus: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n}> = React.memo(({repoAddress, schedule}) => {\n  const repo = useRepository(repoAddress);\n  const {name: scheduleName, partitionSet, pipelineName} = schedule;\n\n  const partitionSetName = partitionSet?.name;\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const partitionPath = React.useMemo(() => {\n    const query = partitionSetName\n      ? qs.stringify(\n          {\n            partitionSet: partitionSetName,\n          },\n          {addQueryPrefix: true},\n        )\n      : '';\n    return `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/partitions${query}`;\n  }, [partitionSetName, isJob, pipelineName]);\n\n  const partitionURL = workspacePathFromAddress(repoAddress, partitionPath);\n\n  const [retrievePartitionStatus, {data, loading}] = useLazyQuery<\n    SchedulePartitionStatusQuery,\n    SchedulePartitionStatusQueryVariables\n  >(SCHEDULE_PARTITION_STATUS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        scheduleName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  const onClick = React.useCallback(() => retrievePartitionStatus(), [retrievePartitionStatus]);\n\n  const loadable = () => {\n    if (loading) {\n      return <Caption style={{color: Colors.Gray400}}>Loading…</Caption>;\n    }\n\n    if (!data) {\n      return (\n        <ButtonLink onClick={onClick}>\n          <Caption>Show coverage</Caption>\n        </ButtonLink>\n      );\n    }\n\n    const partitionFragment = data.scheduleOrError;\n    if (partitionFragment.__typename === 'Schedule') {\n      return (\n        <RetrievedSchedulePartitionStatus\n          schedule={partitionFragment}\n          partitionURL={partitionURL}\n        />\n      );\n    }\n\n    return <Caption style={{color: Colors.Red700}}>Partition set not found!</Caption>;\n  };\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Link to={partitionURL}>{partitionSetName}</Link>\n      {loadable()}\n    </Group>\n  );\n});\n\nconst RetrievedSchedulePartitionStatus: React.FC<{\n  schedule: SchedulePartitionStatusFragment;\n  partitionURL: string;\n}> = ({schedule, partitionURL}) => {\n  const {partitionSet} = schedule;\n\n  if (!partitionSet || partitionSet.partitionStatusesOrError.__typename !== 'PartitionStatuses') {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n\n  const partitions = partitionSet.partitionStatusesOrError.results;\n  const partitionsByType = {};\n  partitions.forEach((partition) => {\n    const displayStatus = calculateDisplayStatus(partition);\n    (partitionsByType as any)[displayStatus] = [\n      ...((partitionsByType as any)[displayStatus] || []),\n      partition,\n    ];\n  });\n\n  return (\n    <StatusTable>\n      <tbody>\n        {RUN_STATUSES.map((status) => {\n          if (!(status in partitionsByType)) {\n            return null;\n          }\n          return (\n            <tr key={status}>\n              <td style={{width: '100px'}}>{status}</td>\n              <td>\n                {status === 'Failed' || status === 'Missing' ? (\n                  <Link\n                    to={`${partitionURL}?showFailuresAndGapsOnly=true`}\n                    style={{color: Colors.Gray900}}\n                  >\n                    {(partitionsByType as any)[status].length}\n                  </Link>\n                ) : (\n                  (partitionsByType as any)[status].length\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </StatusTable>\n  );\n};\n\nconst SCHEDULE_PARTITION_STATUS_QUERY = gql`\n  query SchedulePartitionStatusQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...SchedulePartitionStatusFragment\n      }\n    }\n  }\n\n  fragment SchedulePartitionStatusFragment on Schedule {\n    id\n    mode\n    pipelineName\n    partitionSet {\n      id\n      name\n      partitionStatusesOrError {\n        ... on PartitionStatuses {\n          results {\n            id\n            ...SchedulePartitionStatusResult\n          }\n        }\n      }\n    }\n  }\n\n  fragment SchedulePartitionStatusResult on PartitionStatus {\n    id\n    partitionName\n    runStatus\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Code,\n  Heading,\n  Mono,\n  Tooltip,\n  Button,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {EvaluateScheduleDialog} from '../ticks/EvaluateScheduleDialog';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  refreshState: QueryRefreshState;\n}> = (props) => {\n  const {repoAddress, schedule, refreshState} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const copyToClipboard = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n\n  const [showTestTickDialog, setShowTestTickDialog] = React.useState(false);\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          </Box>\n        }\n        tags={\n          <>\n            <Tag icon=\"schedule\">\n              Schedule in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {futureTicks.results.length && running ? (\n              <Tag icon=\"timer\">\n                Next tick:{' '}\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp!}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Tag>\n            ) : null}\n            <Box flex={{display: 'inline-flex'}} margin={{top: 2}}>\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.Gray400, hover: Colors.Gray600}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Box>\n          </>\n        }\n        right={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <Button\n              onClick={() => {\n                setShowTestTickDialog(true);\n              }}\n            >\n              Test Schedule\n            </Button>\n          </Box>\n        }\n      />\n      <EvaluateScheduleDialog\n        key={showTestTickDialog ? '1' : '0'} // change key to reset dialog state\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        name={schedule.name}\n        repoAddress={repoAddress}\n        jobName={pipelineName}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {schedule.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{schedule.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <TimestampDisplay\n                    timestamp={latestTick.timestamp}\n                    timezone={executionTimezone}\n                    timeFormat={TIME_FORMAT}\n                  />\n                  <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n                </Group>\n              ) : (\n                'Schedule has never run'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>{isJob ? 'Job' : 'Pipeline'}</td>\n            <td>\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Partition set</td>\n            <td>\n              {partitionSet ? (\n                <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n              ) : (\n                'None'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Schedule</td>\n            <td>\n              {cronSchedule ? (\n                <Group direction=\"row\" spacing={8}>\n                  <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n                  <Code>({cronSchedule})</Code>\n                </Group>\n              ) : (\n                <div>&mdash;</div>\n              )}\n            </td>\n          </tr>\n          {executionTimezone ? (\n            <tr>\n              <td>Execution timezone</td>\n              <td>{executionTimezone}</td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SCHEDULE_FRAGMENT = gql`\n  fragment ScheduleFragment on Schedule {\n    id\n    name\n    cronSchedule\n    executionTimezone\n    pipelineName\n    solidSelection\n    mode\n    description\n    partitionSet {\n      id\n      name\n    }\n    scheduleState {\n      id\n      ...InstigationStateFragment\n    }\n    futureTicks(limit: 5) {\n      results {\n        timestamp\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Tabs, Tab, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable} from '../instigation/TickHistory';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {\n  PreviousRunsForScheduleQuery,\n  PreviousRunsForScheduleQueryVariables,\n  ScheduleRootQuery,\n  ScheduleRootQueryVariables,\n} from './types/ScheduleRoot.types';\nimport {ScheduleFragment} from './types/ScheduleUtils.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {scheduleName} = useParams<{scheduleName: string}>();\n\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n\n  const queryResult = useQuery<ScheduleRootQuery, ScheduleRootQueryVariables>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <ScheduleDetails\n              repoAddress={repoAddress}\n              schedule={scheduleOrError}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SchedulerInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={scheduleOrError.name} />\n            ) : (\n              <SchedulePreviousRuns\n                repoAddress={repoAddress}\n                schedule={scheduleOrError}\n                tabs={tabs}\n              />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SchedulePreviousRuns: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: ScheduleFragment;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({schedule, highlightedIds, tabs}) => {\n  const queryResult = useQuery<PreviousRunsForScheduleQuery, PreviousRunsForScheduleQueryVariables>(\n    PREVIOUS_RUNS_FOR_SCHEDULE_QUERY,\n    {\n      variables: {\n        limit: 20,\n        filter: {\n          pipelineName: schedule.pipelineName,\n          tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n        },\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  } else if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SCHEDULER\") {\n          id\n          healthy\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on Error {\n        message\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    jobOriginId\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/SensorPreviousRuns.types';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({sensor, highlightedIds, tabs}) => {\n  const {data} = useQuery<PreviousRunsForSensorQuery, PreviousRunsForSensorQueryVariables>(\n    PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n          tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n        },\n      },\n    },\n  );\n\n  if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tab, Tabs, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable, TickHistoryTimeline} from '../instigation/TickHistory';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery, SensorRootQueryVariables} from './types/SensorRoot.types';\n\nexport const SensorRoot: React.FC<{repoAddress: RepoAddress}> = ({repoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename === 'SensorNotFoundError') {\n          return (\n            <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"error\"\n                title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n              />\n            </Box>\n          );\n        } else if (sensorOrError.__typename === 'PythonError') {\n          return <PythonErrorInfo error={sensorOrError} />;\n        } else if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <SensorDetails\n              repoAddress={repoAddress}\n              sensor={sensorOrError}\n              daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <SensorInfo\n                daemonHealth={instance.daemonHealth}\n                padding={{vertical: 16, horizontal: 24}}\n              />\n            ) : null}\n            <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} />\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={sensorOrError.name} />\n            ) : (\n              <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, PageHeader, Tag, Heading} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from '../pipelines/GraphExplorer';\nimport {explorerPathFromString, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {Loading} from '../ui/Loading';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RepoAddress} from './types';\nimport {GraphExplorerRootQuery, GraphExplorerRootQueryVariables} from './types/GraphRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const path = explorerPathFromString((params as any)[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title = path.opNames.length > 1 ? path.opNames[path.opNames.length - 2] : path.pipelineName;\n  useDocumentTitle(`Graph: ${title}`);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <PageHeader\n        title={<Heading>{title}</Heading>}\n        tags={\n          <Tag icon=\"schema\">\n            Graph in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n      />\n      <Box\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        style={{minHeight: 0, flex: 1, display: 'flex'}}\n      >\n        <GraphExplorerRoot repoAddress={repoAddress} />\n      </Box>\n    </div>\n  );\n};\n\nconst GraphExplorerRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString((params as any)['0']);\n  const history = useHistory();\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const graphResult = useQuery<GraphExplorerRootQuery, GraphExplorerRootQueryVariables>(\n    GRAPH_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        graphSelector: {\n          repositoryName: repoAddress?.name || '',\n          repositoryLocationName: repoAddress?.location || '',\n          graphName: explorerPath.pipelineName,\n        },\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<GraphExplorerRootQuery> queryResult={graphResult}>\n      {({graphOrError: result}) => {\n        if (result.__typename === 'GraphNotFoundError') {\n          return (\n            <NonIdealState icon=\"error\" title=\"Graph not found\" description={result.message} />\n          );\n        }\n        if (result.__typename === 'PythonError') {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" description={result.message} />;\n        }\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={(path, mode) => {\n              const fullPath = workspacePathFromAddress(\n                props.repoAddress,\n                `/graphs/${explorerPathToString(path)}`,\n              );\n              if (mode === 'push') {\n                history.push(fullPath);\n              } else {\n                history.replace(fullPath);\n              }\n            }}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={true}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst GRAPH_EXPLORER_ROOT_QUERY = gql`\n  query GraphExplorerRootQuery(\n    $graphSelector: GraphSelector\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    graphOrError(selector: $graphSelector) {\n      ... on Graph {\n        id\n        name\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n        ...GraphExplorerFragment\n      }\n      ... on GraphNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper, Tag} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {Container, Inner, Row} from '../ui/VirtualizedTable';\n\nimport {VirtualizedAssetHeader, VirtualizedAssetRow} from './VirtualizedAssetRow';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ntype Asset = {id: string; groupName: string | null; assetKey: {path: string[]}};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  assets: Asset[];\n}\n\ntype RowType =\n  | {type: 'group'; name: string; assetCount: number}\n  | {type: 'asset'; id: string; path: string[]};\n\nconst UNGROUPED_NAME = 'UNGROUPED';\nconst ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY = 'assets-virtualized-expansion-state';\n\nexport const VirtualizedRepoAssetTable: React.FC<Props> = ({repoAddress, assets}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const repoKey = repoAddressAsHumanString(repoAddress);\n  const {expandedKeys, onToggle} = useAssetGroupExpansionState(\n    `${repoKey}-${ASSET_GROUPS_EXPANSION_STATE_STORAGE_KEY}`,\n  );\n\n  const grouped: Record<string, Asset[]> = React.useMemo(() => {\n    const groups: Record<string, Asset[]> = {};\n    for (const asset of assets) {\n      const groupName = asset.groupName || UNGROUPED_NAME;\n      const assetsForGroup = groups[groupName] || [];\n      groups[groupName] = [...assetsForGroup, asset];\n    }\n    return groups;\n  }, [assets]);\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.keys(grouped).forEach((groupName) => {\n      const assetsForGroup = grouped[groupName];\n      flat.push({type: 'group', name: groupName, assetCount: assetsForGroup.length});\n      if (expandedKeys.includes(groupName)) {\n        assetsForGroup.forEach(({id, assetKey}) => {\n          flat.push({type: 'asset', id, path: assetKey.path});\n        });\n      }\n    });\n    return flat;\n  }, [grouped, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'group' ? 48 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedAssetHeader nameLabel=\"Asset name\" />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'group' ? (\n                <GroupNameRow\n                  repoAddress={repoAddress}\n                  groupName={row.name}\n                  assetCount={row.assetCount}\n                  expanded={expandedKeys.includes(row.name)}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                />\n              ) : (\n                <VirtualizedAssetRow\n                  showCheckboxColumn={false}\n                  key={key}\n                  // todo dish: Fix this\n                  type=\"asset\"\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  showRepoColumn={false}\n                  height={size}\n                  start={start}\n                  // todo dish: Fix this\n                  checked={false}\n                  onToggleChecked={() => {}}\n                  onWipe={() => {}}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nconst GroupNameRow: React.FC<{\n  repoAddress: RepoAddress;\n  groupName: string;\n  assetCount: number;\n  expanded: boolean;\n  height: number;\n  start: number;\n  onToggle: (groupName: string) => void;\n}> = ({repoAddress, groupName, assetCount, expanded, height, start, onToggle}) => {\n  return (\n    <ClickableRow\n      $height={height}\n      $start={start}\n      onClick={() => onToggle(groupName)}\n      $open={expanded}\n      tabIndex={0}\n      onKeyDown={(e) => {\n        if (e.code === 'Space' || e.code === 'Enter') {\n          e.preventDefault();\n          onToggle(groupName);\n        }\n      }}\n    >\n      <Box\n        background={Colors.Gray50}\n        flex={{direction: 'row', alignItems: 'center', gap: 8, justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        style={{height: '100%'}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"asset_group\" />\n          {groupName === UNGROUPED_NAME ? (\n            <div>Ungrouped assets</div>\n          ) : (\n            <>\n              <strong>{groupName}</strong>\n              {groupName !== UNGROUPED_NAME ? (\n                <Box margin={{left: 12}}>\n                  <Link to={workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`)}>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                      <span>View lineage</span>\n                      <Icon name=\"open_in_new\" size={16} color={Colors.Link} />\n                    </Box>\n                  </Link>\n                </Box>\n              ) : null}\n            </>\n          )}\n        </Box>\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n          <Tag>{assetCount === 1 ? '1 asset' : `${assetCount} assets`}</Tag>\n          <Icon name=\"arrow_drop_down\" size={20} />\n        </Box>\n      </Box>\n    </ClickableRow>\n  );\n};\n\nconst ClickableRow = styled(Row)<{$open: boolean}>`\n  cursor: pointer;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of asset groups.\n */\nconst useAssetGroupExpansionState = (storageKey: string) => {\n  const {basePath} = React.useContext(AppContext);\n  const [expandedKeys, setExpandedKeys] = useStateWithStorage<string[]>(\n    `${basePath}:dagit.${storageKey}`,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (groupName: string) => {\n      setExpandedKeys((current) => {\n        const nextExpandedKeys = new Set(current || []);\n        if (nextExpandedKeys.has(groupName)) {\n          nextExpandedKeys.delete(groupName);\n        } else {\n          nextExpandedKeys.add(groupName);\n        }\n        return Array.from(nextExpandedKeys);\n      });\n    },\n    [setExpandedKeys],\n  );\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n    }),\n    [expandedKeys, onToggle],\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetNodeSearch} from '../assets/useAssetSearch';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\nimport {VirtualizedRepoAssetTable} from './VirtualizedRepoAssetTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceAssetsQuery,\n  WorkspaceAssetsQueryVariables,\n} from './types/WorkspaceAssetsRoot.types';\n\nexport const WorkspaceAssetsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Assets: ${repoName}`);\n\n  const selector = repoAddressToSelector(repoAddress);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<WorkspaceAssetsQuery, WorkspaceAssetsQueryVariables>(\n    WORKSPACE_ASSETS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const assetNodes = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.assetNodes;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = useAssetNodeSearch(searchValue, assetNodes);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading assets…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                <div>\n                  No assets matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={`No assets were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedRepoAssetTable repoAddress={repoAddress} assets={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"assets\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by asset name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_ASSETS_QUERY = gql`\n  query WorkspaceAssetsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          groupName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleGraphQuery, SingleGraphQueryVariables} from './types/VirtualizedGraphTable.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nexport type Graph = {name: string; path: string; description: string | null};\n\ninterface Props {\n  graphs: Graph[];\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedGraphTable: React.FC<Props> = ({repoAddress, graphs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: graphs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <Box\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '100%',\n          height: '32px',\n          fontSize: '12px',\n          color: Colors.Gray600,\n        }}\n      >\n        <HeaderCell>Graph</HeaderCell>\n      </Box>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Graph = graphs[index];\n              return (\n                <GraphRow\n                  key={key}\n                  name={row.name}\n                  description={row.description}\n                  path={row.path}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n\ninterface GraphRowProps {\n  name: string;\n  path: string;\n  description: string | null;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nconst GraphRow = (props: GraphRowProps) => {\n  const {name, path, description, repoAddress, start, height} = props;\n\n  const [queryGraph, queryResult] = useLazyQuery<SingleGraphQuery, SingleGraphQueryVariables>(\n    SINGLE_GRAPH_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          graphName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryGraph);\n  const {data} = queryResult;\n\n  const displayedDescription = React.useMemo(() => {\n    if (description) {\n      return description;\n    }\n    if (data?.graphOrError.__typename === 'Graph') {\n      return data.graphOrError.description;\n    }\n    return null;\n  }, [data, description]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Box flex={{direction: 'column'}}>\n            <div style={{whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, path)}>{name}</Link>\n            </div>\n            {displayedDescription ? (\n              <div\n                style={{\n                  maxWidth: '100%',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                }}\n              >\n                <Caption\n                  style={{\n                    color: Colors.Gray500,\n                    whiteSpace: 'nowrap',\n                  }}\n                >\n                  {displayedDescription}\n                </Caption>\n              </div>\n            ) : null}\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: 100%;\n  height: 100%;\n`;\n\nconst SINGLE_GRAPH_QUERY = gql`\n  query SingleGraphQuery($selector: GraphSelector!) {\n    graphOrError(selector: $selector) {\n      ... on Graph {\n        id\n        name\n        description\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\nimport {Graph, VirtualizedGraphTable} from './VirtualizedGraphTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceGraphsQuery,\n  WorkspaceGraphsQueryVariables,\n} from './types/WorkspaceGraphsRoot.types';\n\nexport const WorkspaceGraphsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Graphs: ${repoName}`);\n\n  const selector = repoAddressToSelector(repoAddress);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<WorkspaceGraphsQuery, WorkspaceGraphsQueryVariables>(\n    WORSKPACE_GRAPHS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const graphs = React.useMemo(() => {\n    const repo = data?.repositoryOrError;\n    if (!repo || repo.__typename !== 'Repository') {\n      return [];\n    }\n\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n\n    const items: Graph[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return graphs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [graphs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading graphs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching graphs\"\n              description={\n                <div>\n                  No graphs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No graphs\"\n            description={`No graphs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedGraphTable repoAddress={repoAddress} graphs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"graphs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by graph name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORSKPACE_GRAPHS_QUERY = gql`\n  query WorkspaceGraphsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          name\n          isJob\n          graphName\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedJobHeader, VirtualizedJobRow} from './VirtualizedJobRow';\nimport {RepoAddress} from './types';\n\ntype Job = {isJob: boolean; name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  jobs: Job[];\n}\n\nexport const VirtualizedJobTable: React.FC<Props> = ({repoAddress, jobs}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: jobs.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Job = jobs[index];\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\nimport {VirtualizedJobTable} from './VirtualizedJobTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {WorkspaceJobsQuery, WorkspaceJobsQueryVariables} from './types/WorkspaceJobsRoot.types';\n\nexport const WorkspaceJobsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Jobs: ${repoName}`);\n\n  const selector = repoAddressToSelector(repoAddress);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<WorkspaceJobsQuery, WorkspaceJobsQueryVariables>(\n    WORKSPACE_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const jobs = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.pipelines;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return jobs.filter(\n      ({name}) => !isHiddenAssetGroupJob(name) && name.toLocaleLowerCase().includes(searchToLower),\n    );\n  }, [jobs, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                <div>\n                  No jobs matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={`No jobs were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedJobTable repoAddress={repoAddress} jobs={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"jobs\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_JOBS_QUERY = gql`\n  query WorkspaceJobsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        pipelines {\n          id\n          name\n          isJob\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {OpNode, OP_NODE_DEFINITION_FRAGMENT} from '../graph/OpNode';\nimport {layoutOp} from '../graph/asyncGraphLayout';\n\nimport {OpCardSolidDefinitionFragment} from './types/OpCard.types';\n\ninterface OpCardProps {\n  definition: OpCardSolidDefinitionFragment;\n}\n\nexport const OpCard: React.FC<OpCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutOp(\n    {\n      name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n      definition: {\n        description: null,\n        assetNodes: [],\n      },\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <Box padding={24}>\n      <OpCardContainer style={{height: layout.bounds.height}}>\n        <OpNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </OpCardContainer>\n    </Box>\n  );\n};\n\nexport const OP_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment OpCardSolidDefinitionFragment on ISolidDefinition {\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n    ...OpNodeDefinitionFragment\n  }\n\n  ${OP_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst OpCardContainer = styled.div`\n  flex: 1;\n  max-width: 450px;\n  position: relative;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarOpDefinition,\n  SIDEBAR_OP_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarOpDefinition';\nimport {SidebarOpInvocationInfo} from '../pipelines/SidebarOpHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpCard, OP_CARD_SOLID_DEFINITION_FRAGMENT} from './OpCard';\nimport {UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables} from './types/OpDetailsRoot.types';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarOpInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables>(\n    USED_SOLID_DETAILS_QUERY,\n    {\n      variables: {\n        name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <OpCard definition={usedSolid.definition} />\n            <SidebarOpDefinition\n              definition={usedSolid.definition}\n              showingSubgraph={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...OpCardSolidDefinitionFragment\n            ...SidebarOpDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${OP_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_OP_DEFINITION_FRAGMENT}\n`;\n\nexport const OpDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n  FontFamily,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {OpDetailScrollContainer, UsedSolidDetails} from './OpDetailsRoot';\nimport {OpTypeSignature, OP_TYPE_SIGNATURE_FRAGMENT} from './OpTypeSignature';\nimport {OpsRootQuery, OpsRootQueryVariables, OpsRootUsedSolidFragment} from './types/OpsRoot.types';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = OpsRootUsedSolidFragment;\n\nfunction searchSuggestionsForOps(solids: Solid[]): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: 'job',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => !i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'pipeline',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const OpsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n  useDocumentTitle('Ops');\n\n  const {name} = useParams<{name?: string}>();\n  const {repoAddress} = props;\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<OpsRootQuery, OpsRootQueryVariables>(OPS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <div style={{height: '100%'}}>\n      <Loading queryResult={queryResult}>\n        {({repositoryOrError}) => {\n          if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n            return (\n              <OpsRootWithData\n                {...props}\n                name={name}\n                repoAddress={repoAddress}\n                usedSolids={repositoryOrError.usedSolids}\n              />\n            );\n          }\n          return null;\n        }}\n      </Loading>\n    </div>\n  );\n};\n\nconst OpsRootWithData: React.FC<Props & {name?: string; usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n\n  const {q, typeExplorer} = qs.parse(location.search, {ignoreQueryPrefix: true});\n  const suggestions = searchSuggestionsForOps(usedSolids);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${qs.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickOp = (defName: string) => {\n    history.replace(workspacePathFromAddress(repoAddress, `/ops/${defName}?${qs.stringify({q})}`));\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickOp(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipeline_or_job/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier=\"ops\"\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <OpListColumnContainer>\n            <Box\n              padding={{vertical: 12, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder=\"Filter by name or input/output type...\"\n              />\n            </Box>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <OpList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickOp={onClickOp}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </OpListColumnContainer>\n        }\n        second={\n          selected ? (\n            <OpDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </OpDetailScrollContainer>\n          ) : (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"No op selected\"\n                description=\"Select an op to see its definition and invocations\"\n              />\n            </Box>\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface OpListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickOp: (name: string) => void;\n}\n\nconst OpList: React.FC<OpListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <Container>\n      <List\n        width={props.width}\n        height={props.height}\n        rowCount={props.items.length}\n        rowHeight={cache.current.rowHeight}\n        scrollToIndex={selectedIndex}\n        className=\"solids-list\"\n        rowRenderer={({parent, index, key, style}) => {\n          const solid = props.items[index];\n          return (\n            <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n              <OpListItem\n                style={style}\n                selected={solid === props.selected}\n                onClick={() => props.onClickOp(solid.definition.name)}\n              >\n                <OpName>{solid.definition.name}</OpName>\n                <OpTypeSignature definition={solid.definition} />\n              </OpListItem>\n            </CellMeasurer>\n          );\n        }}\n        overscanRowCount={10}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .solids-list:focus {\n    outline: none;\n  }\n`;\n\nconst OPS_ROOT_QUERY = gql`\n  query OpsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          ...OpsRootUsedSolid\n        }\n      }\n    }\n  }\n\n  fragment OpsRootUsedSolid on UsedSolid {\n    definition {\n      name\n      ...OpTypeSignatureFragment\n    }\n    invocations {\n      pipeline {\n        id\n        isJob\n        name\n      }\n    }\n  }\n\n  ${OP_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst OpListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.Gray100 : Colors.White)};\n  box-shadow: ${({selected}) => (selected ? Colors.HighlightGreen : 'transparent')} 4px 0 0 inset,\n    ${Colors.KeylineGray} 0 -1px 0 inset;\n  color: ${Colors.Gray800};\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 24px;\n  user-select: none;\n\n  & > code.bp4-code {\n    color: ${Colors.Gray800};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst OpName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst OpListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OpsRoot} from '../ops/OpsRoot';\n\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\nexport const WorkspaceOpsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Ops: ${repoName}`);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader repoAddress={repoAddress} tab=\"ops\" />\n      <OpsRoot repoAddress={repoAddress} />\n    </Box>\n  );\n};\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedScheduleHeader, VirtualizedScheduleRow} from './VirtualizedScheduleRow';\nimport {RepoAddress} from './types';\n\ntype Schedule = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  schedules: Schedule[];\n}\n\nexport const VirtualizedScheduleTable: React.FC<Props> = ({repoAddress, schedules}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: schedules.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Schedule = schedules[index];\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\nimport {VirtualizedScheduleTable} from './VirtualizedScheduleTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceSchedulesQuery,\n  WorkspaceSchedulesQueryVariables,\n} from './types/WorkspaceSchedulesRoot.types';\n\nexport const WorkspaceSchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Schedules: ${repoName}`);\n\n  const selector = repoAddressToSelector(repoAddress);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<WorkspaceSchedulesQuery, WorkspaceSchedulesQueryVariables>(\n    WORKSPACE_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const schedules = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.schedules;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [schedules, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                <div>\n                  No schedules matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={`No schedules were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedScheduleTable repoAddress={repoAddress} schedules={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"schedules\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SCHEDULES_QUERY = gql`\n  query WorkspaceSchedulesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        schedules {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from './VirtualizedSensorRow';\nimport {RepoAddress} from './types';\ntype Sensor = {name: string};\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensors: Sensor[];\n}\n\nexport const VirtualizedSensorTable: React.FC<Props> = ({repoAddress, sensors}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: sensors.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Sensor = sensors[index];\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\n\nimport {VirtualizedSensorTable} from './VirtualizedSensorTable';\nimport {WorkspaceHeader} from './WorkspaceHeader';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  WorkspaceSensorsQuery,\n  WorkspaceSensorsQueryVariables,\n} from './types/WorkspaceSensorsRoot.types';\n\nexport const WorkspaceSensorsRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Sensors: ${repoName}`);\n\n  const selector = repoAddressToSelector(repoAddress);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<WorkspaceSensorsQuery, WorkspaceSensorsQueryVariables>(\n    WORKSPACE_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const sensors = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.sensors;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [sensors, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                <div>\n                  No sensors matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={`No sensors were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedSensorTable repoAddress={repoAddress} sensors={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"sensors\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nconst WORKSPACE_SENSORS_QUERY = gql`\n  query WorkspaceSensorsQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        sensors {\n          id\n          name\n          description\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, MainContent, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch, useParams} from 'react-router-dom';\n\nimport {AssetGroupRoot} from '../assets/AssetGroupRoot';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ResourceRoot} from '../resources/ResourceRoot';\nimport {WorkspaceResourcesRoot} from '../resources/WorkspaceResourcesRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\n\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceAssetsRoot} from './WorkspaceAssetsRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceGraphsRoot} from './WorkspaceGraphsRoot';\nimport {WorkspaceJobsRoot} from './WorkspaceJobsRoot';\nimport {WorkspaceOpsRoot} from './WorkspaceOpsRoot';\nimport {WorkspaceSchedulesRoot} from './WorkspaceSchedulesRoot';\nimport {WorkspaceSensorsRoot} from './WorkspaceSensorsRoot';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {repoAddressFromPath} from './repoAddressFromPath';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst RepoRouteContainer = () => {\n  const {repoPath} = useParams<{repoPath: string}>();\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Invalid code location path\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not a valid code location path.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active code locations, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unknown code location\"\n          description={\n            <div>\n              <div>\n                <strong>{repoAddressAsHumanString(addressForPath)}</strong>\n              </div>\n              {'  is not loaded in the current workspace.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/locations/:repoPath/resources\" exact>\n        <WorkspaceResourcesRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/assets\" exact>\n        <WorkspaceAssetsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/jobs\" exact>\n        <WorkspaceJobsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules\" exact>\n        <WorkspaceSchedulesRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors\" exact>\n        <WorkspaceSensorsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs\" exact>\n        <WorkspaceGraphsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/ops/:name?\" exact>\n        <WorkspaceOpsRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/graphs/(/?.*)\">\n        <GraphRoot repoAddress={addressForPath} />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/pipelines/(/?.*)',\n          '/locations/:repoPath/jobs/(/?.*)',\n          '/locations/:repoPath/pipeline_or_job/(/?.*)',\n        ]}\n      >\n        <PipelineRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/schedules/:scheduleName/:runTab?\">\n        <ScheduleRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/sensors/:sensorName\">\n        <SensorRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/locations/:repoPath/resources/:resourceName\">\n        <ResourceRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path={['/locations/:repoPath/asset-groups/:groupName/list(/?.*)']}>\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"list\" />\n      </Route>\n      <Route\n        path={[\n          '/locations/:repoPath/asset-groups/:groupName/(/?.*)',\n          '/locations/:repoPath/asset-groups/:groupName',\n        ]}\n      >\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"lineage\" />\n      </Route>\n      <Route path=\"/locations/:repoPath/*\">\n        <Redirect to={workspacePathFromAddress(addressForPath, '/assets')} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => {\n  return (\n    <MainContent>\n      <Switch>\n        <Route path=\"/locations/:repoPath\">\n          <RepoRouteContainer />\n        </Route>\n      </Switch>\n    </MainContent>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n"],"names":["PipelineExplorerSnapshotRoot","useTrackPageView","params","useParams","explorerPath","explorerPathFromString","pipelineName","snapshotId","history","useHistory","useDocumentTitle","slice","PipelineExplorerContainer","onChangeExplorerPath","path","mode","explorerPathToString","onNavigateToSourceAssetNode","assetKey","push","assetDetailsPathForKey","repoAddress","isGraph","React","explodeComposites","preferAssetRendering","options","setOptions","parentNames","opNames","length","pipelineSelector","buildPipelineSelector","pipelineResult","useQuery","PIPELINE_EXPLORER_ROOT_QUERY","variables","snapshotPipelineSelector","undefined","rootHandleID","join","requestScopeHandleID","queryResult","result","pipelineSnapshotOrError","__typename","parentHandle","solidHandle","displayedHandles","explodeCompositesInHandleGraph","solidHandles","assetNodesPresent","some","h","solid","definition","assetNodes","fetchOptions","container","handles","getInvocations","definitionName","filter","s","name","map","handleID","gql","METADATA_ENTRY_FRAGMENT","GRAPH_EXPLORER_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","GRAPH_EXPLORER_ASSET_NODE_FRAGMENT","PYTHON_ERROR_FRAGMENT","ENABLED_FILTERS","PipelineRunsRoot","props","pipelinePath","repo","useRepository","isJob","isThisThingAJob","useJobTitle","useQueryPersistedRunFilters","filterTokens","setFilterTokens","permanentTokens","token","value","Boolean","allTokens","repoToken","DagsterTag","repoAddressAsTag","useCursorPaginatedQuery","query","PIPELINE_RUNS_ROOT_QUERY","pageSize","runsFilterForSearchTokens","nextCursorForResult","runs","pipelineRunsOrError","results","PAGE_SIZE","runId","getResultArray","data","paginationProps","onAddTag","tokenAsString","tokenToString","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","refetch","allowStaleData","padding","vertical","icon","title","description","message","displayed","hasNextCursor","hasPrevCursor","flex","alignItems","justifyContent","top","horizontal","direction","gap","$top","actionBarComponents","enabledFilters","tokens","onChange","loading","style","marginTop","RUN_TABLE_RUN_FRAGMENT","StickyTableContainer","styled","Colors","AssetGroupRoot","tab","groupName","groupPath","workspacePathFromAddress","groupSelector","repositoryLocationName","location","repositoryName","node","replace","encodeURIComponent","view","Page","display","flexDirection","paddingBottom","PageHeader","right","marginBottom","ReloadAllButton","label","tags","Tag","RepositoryLink","tabs","Box","margin","Tabs","selectedTabId","TabLink","id","to","AssetGraphExplorer","AssetsCatalogTable","prefixPath","split","decodeURIComponent","setPrefixPath","LaunchpadSetupFromRunRoot","canLaunchPipelineExecution","usePermissionsForLocation","permissions","repoPath","LaunchpadSetupFromRunAllowedRoot","useExecutionSessionStorage","storageData","onSave","CONFIG_FOR_RUN_QUERY","runOrError","run","runConfigYaml","solidSelection","newSession","Array","applyCreateSession","LaunchpadSessionLoading","LaunchpadSessionError","pathname","LaunchpadSetupRoot","LaunchpadSetupAllowedRoot","queryString","qs","window","search","ignoreQueryPrefix","config","solidSelectionQuery","TIME_FORMAT","showSeconds","showTimezone","LatestRunTag","lastRunQuery","LATEST_RUN_TAG_QUERY","runsFilter","key","notifyOnNetworkStatusChange","runsOrError","stats","start","startTime","end","endTime","status","intent","RunStatus","size","Tooltip","placement","content","color","TimestampDisplay","timestamp","timeFormat","timingStringForStatus","RUN_TIME_FRAGMENT","JobMetadata","metadata","JOB_METADATA_QUERY","job","pipelineOrError","runsForAssetScan","useJobNavMetadata","JobScheduleOrSensorTag","RelatedAssetsTag","relatedAssets","getRelatedAssets","matchingSchedules","schedules","matchingSensors","sensors","ScheduleOrSensorTag","tokenForAssetKey","uniq","flatMap","r","assets","a","open","setOpen","ButtonLink","onClick","Dialog","canOutsideClickClose","canEscapeKeyClose","isOpen","onClose","maxWidth","minWidth","width","ii","border","side","wordBreak","topBorder","Button","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","pipelineTabs","overview","pathComponent","playground","getPermissionsResult","permissionsState","permissionResultForKey","partitions","currentOrder","PipelineNav","match","useRouteMatch","active","component","tabList","Object","keys","find","t","tabForPipelinePathComponent","selector","repoJobEntry","repository","pipelines","pipelineOrJob","isAssetJob","partitionSets","hasLaunchpad","hasPartitionSet","partitionSet","explorerPathForTab","text","href","tabForKey","wrap","permissionsResult","disabled","enabled","disabledReason","ASSET_JOB_PARTITION_SETS_QUERY","JobBackfillsTable","partitionSetName","partitionNames","repositorySelector","refetchCounter","cursorStack","setCursorStack","cursor","setCursor","JOB_BACKFILLS_QUERY","limit","partialRefetch","Loading","partitionSetOrError","NonIdealState","backfills","popCursor","nextStack","pop","advanceCursor","current","nextCursor","reset","BackfillTable","showBackfillTarget","allPartitions","BACKFILL_TABLE_FRAGMENT","PartitionRunStatusCheckboxes","counts","allowed","overflow","Checkbox","testId","marginLeft","checked","includes","runStatusToBackfillStateString","v","BackfillPartitionSelector","onLaunch","onCancel","onSubmit","runStatusData","k","range","_setRange","stateFilters","setStateFilters","selected","tagEditorOpen","setTagEditorOpen","setTags","setQuery","reexecute","fromFailure","repoAddressToSelector","BACKFILL_SELECTOR_QUERY","fetchPolicy","mounted","Spinner","purpose","pipelineSnapshot","instance","solids","solidsFiltered","filterByQuery","stepRows","buildLayout","nodes","all","GanttChartMode","boxes","box","x","isFailed","failedPartitions","partitionKeysForCounts","state","countsByState","partitionKey","Section","DimensionRangeWizard","setSelected","selection","selectionSet","Set","has","health","runStatusForPartitionKey","partitionKeys","dimensionType","isTimeseriesPartition","PartitionDefinitionType","every","next","Icon","GraphQueryInput","items","placeholder","autoApplyChanges","TagEditor","tagsFromSession","onRequestClose","borderRadius","onRequestEdit","LaunchBackfillButton","reexecutionSteps","step","onSuccess","backfillId","showBackfillSuccessToast","onError","showBackfillErrorToast","useMutation","LAUNCH_PARTITION_BACKFILL_MUTATION","launchBackfill","backfillParams","launchPartitionBackfill","count","reexecutionCount","buttonTitle","LaunchButton","runCount","DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT","USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT","children","PartitionGraph","jobDataByPartition","stepDataByPartition","yLabel","hiddenStepKeys","hiddenPartitions","setHiddenPartitions","chart","onGraphClick","event","xAxis","scales","offsetX","offsetY","type","chartArea","left","bottom","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","animation","y","plugins","legend","_e","_legendItem","maintainAspectRatio","jobData","stepData","forEach","hidden","stepDataByKey","stepKey","_fillPartitions","buildDatasetData","allLabel","graphData","datasets","borderColor","backgroundColor","colorHash","PartitionGraphContainer","height","ref","points","pointData","point","OpJobPartitionsView","PARTITIONS_STATUS_QUERY","partitionsOrError","OpJobPartitionsViewContent","usePartitionDurations","stepDurationData","runDurationData","p","runsLoaded","sortedRuns","sort","b","lastRun","stepStats","canLaunchPartitionBackfill","disabledReasons","useViewport","viewport","containerProps","setPageSize","offset","setOffset","showSteps","setShowSteps","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","backfillRefetchCounter","setBackfillRefetchCounter","usePartitionStepQuery","partitionTagName","jobName","skipQuery","approxPageSize","getVisibleItemCount","GRID_FLOATING_CONTAINER_WIDTH","selectedPartitions","Math","max","partitionStatusesOrError","runStatus","runDuration","zIndex","_backfillId","_stepQuery","CountBox","PartitionStatus","selectionWindowSize","maxIdx","selectedIdx","indexOf","nextOffset","min","tooltipMessage","fontSize","AssetJobPartitionsView","assetGraph","useAssetGraphData","assetHealth","usePartitionHealthData","graphAssetKeys","merged","mergedAssetHealth","dimensions","d","selectedKeys","selectedRanges","allPartitionsRange","dimension","allKeys","explodePartitionKeysInSelection","stateForKey","total","missing","AssetPartitionStatus","showAssets","setShowAssets","dimensionIdx","findIndex","isTimeseriesDimension","dimensionKeys","selectedDimensionKeys","LaunchAssetExecutionButton","scope","graphQueryItems","g","skipAllTerm","preferredJobName","splitPartitions","ranges","rangesForSingleDimension","rangeDimensionIdx","rangeDimension","assetQueryItems","AssetJobPartitionGraphs","multidimensional","dimensionName","PipelinePartitionsRoot","pipelineInfo","useStripSnapshotFromPath","partitionSetsData","skip","partitionSetsOrError","partitionSetError","usePartitionNameForPipeline","PipelineOrJobDisambiguationRoot","useLocation","pipelineOrJobName","replacedPath","PipelineOverviewRoot","action","opsQuery","PipelineRoot","render","url","TickLogDialog","tick","instigationSelector","TICK_LOG_EVENTS_QUERY","events","instigationStateOrError","logEvents","TickLogsTable","borderBottom","onWidthsChanged","Headers","idx","TickLogRow","widths","ColumnWidthsContext","eventType","onResize","handleSide","level","highlighted","time","COLOR_MAP","InstigationTickStatus","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","Date","now","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","setInterval","clearInterval","nextTickRadius","sin","PI","tickData","tickColors","tickRadii","fill","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","duration","grid","bounds","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","cursorLabel","skipReason","runIds","originRunIds","error","_event","activeElements","item","index","onHover","elements","target","HTMLElement","element","TickDetailsDialog","JOB_SELECTED_TICK_QUERY","Group","spacing","PythonErrorInfo","e","copyValue","TICK_TAG_FRAGMENT","Chart","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","useQueryPersistedState","encode","states","queryState","toLowerCase","String","decode","shownStates","setShownStates","copyToClipboard","useCopyToClipboard","flagSensorScheduleLogging","useFeatureFlags","statuses","JOB_TICK_HISTORY_QUERY","logTick","setLogTick","instigationType","StatusFilter","Table","InstigationType","fontFamily","FontFamily","str","TRUNCATION_THRESHOLD","CopyButton","SharedToaster","logKey","TickHistoryTimeline","onHighlightRunIds","Number","selectedTime","setSelectedTime","pollingPaused","pausePolling","ONE_MONTH","onTickClick","RUN_STATUS_FRAGMENT","IconWrapper","locale","navigator","language","EvaluateScheduleDialog","EvaluateSchedule","_selectedTimestamp","setSelectedTimestamp","GET_SCHEDULE_QUERY","scheduleSelector","scheduleName","TimeContext","userTimezone","timezone","isTickSelectionOpen","setIsTickSelectionOpen","selectedTimestampRef","shouldEvaluate","setShouldEvaluate","EvaluateScheduleContent","ts","scheduleOrError","timestamps","potentialTickTimestamps","timestampToString","unix","SelectWrapper","ScheduleDescriptor","Popover","position","Menu","maxHeight","rightIcon","buttons","minHeight","SCHEDULE_DRY_RUN_MUTATION","selectorData","scheduleDryRunMutation","setResult","then","evaluationResult","scheduleDryRun","numRunRequests","runRequests","Grid","grow","rel","innerContent","Subheading","RUN_STATUSES","SchedulePartitionStatus","schedule","partitionPath","addQueryPrefix","partitionURL","useLazyQuery","SCHEDULE_PARTITION_STATUS_QUERY","retrievePartitionStatus","partitionFragment","RetrievedSchedulePartitionStatus","loadable","partitionsByType","partition","displayStatus","assertUnreachable","calculateDisplayStatus","ScheduleDetails","cronSchedule","executionTimezone","futureTicks","copyText","setCopyText","setTimeout","clearTimeout","scheduleState","latestTick","running","InstigationStatus","showTestTickDialog","setShowTestTickDialog","ScheduleSwitch","link","hover","QueryRefresh","MetadataTable","PipelineReference","pipelineHrefContext","humanCronString","SCHEDULE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","ScheduleRoot","selectedTab","setSelectedTab","SCHEDULE_ROOT_QUERY","showDaemonWarning","daemonHealth","daemonStatus","healthy","SchedulerInfo","SchedulePreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","RunTable","INSTANCE_HEALTH_FRAGMENT","SENSOR_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorDetails","SensorInfo","GraphRoot","GraphExplorerRoot","graphResult","GRAPH_EXPLORER_ROOT_QUERY","graphSelector","graphName","graphOrError","GraphExplorer","fullPath","UNGROUPED_NAME","VirtualizedRepoAssetTable","parentRef","repoKey","repoAddressAsHumanString","useAssetGroupExpansionState","expandedKeys","onToggle","grouped","groups","asset","assetsForGroup","flattened","flat","assetCount","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","row","overscan","totalHeight","getTotalSize","getVirtualItems","nameLabel","$totalHeight","GroupNameRow","expanded","VirtualizedAssetRow","showCheckboxColumn","showRepoColumn","onToggleChecked","onWipe","ClickableRow","$height","$start","$open","tabIndex","onKeyDown","code","preventDefault","background","Row","validateExpandedKeys","parsed","isArray","storageKey","basePath","AppContext","useStateWithStorage","setExpandedKeys","nextExpandedKeys","delete","add","from","WorkspaceAssetsRoot","repoName","queryKey","defaults","searchValue","setSearchValue","queryResultOverview","WORKSPACE_ASSETS_QUERY","anySearch","trim","toLocaleLowerCase","repositoryOrError","filteredBySearch","useAssetNodeSearch","WorkspaceHeader","queryData","TextInput","paddingTop","VirtualizedGraphTable","graphs","gridTemplateColumns","GraphRow","SINGLE_GRAPH_QUERY","queryGraph","useDelayedRowQuery","displayedDescription","RowGrid","whiteSpace","fontWeight","textOverflow","WorkspaceGraphsRoot","WORSKPACE_GRAPHS_QUERY","sanitizedSearch","jobGraphNames","isHiddenAssetGroupJob","usedSolids","invocations","pipeline","localeCompare","searchToLower","VirtualizedJobTable","jobs","VirtualizedJobRow","WorkspaceJobsRoot","WORKSPACE_JOBS_QUERY","OpCard","inputDefinitions","outputDefinitions","layout","layoutOp","inputs","dependsOn","outputs","dependedBy","OpCardContainer","OpNode","invocation","minified","onDoubleClick","onEnterComposite","onHighlightEdges","focused","highlightedEdges","dim","OP_CARD_SOLID_DEFINITION_FRAGMENT","OP_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","usedSolid","SidebarOpDefinition","showingSubgraph","i","SIDEBAR_OP_DEFINITION_FRAGMENT","OpDetailScrollContainer","flatUniq","arrs","arr","OpsRoot","OPS_ROOT_QUERY","OpsRootWithData","q","typeExplorer","suggestions","values","displayName","tokenizedValuesFromString","filtered","startsWith","filterSolidsWithSearch","onSearch","stringFromValue","onClickOp","defName","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","OpListColumnContainer","TokenizingField","suggestionProviders","nonce","__webpack_nonce__","OpList","second","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","Container","rowCount","rowHeight","scrollToIndex","className","rowRenderer","parent","OpListItem","OpName","OpTypeSignature","overscanRowCount","OP_TYPE_SIGNATURE_FRAGMENT","WorkspaceOpsRoot","VirtualizedScheduleTable","VirtualizedScheduleRow","WorkspaceSchedulesRoot","WORKSPACE_SCHEDULES_QUERY","VirtualizedSensorTable","VirtualizedSensorRow","WorkspaceSensorsRoot","WORKSPACE_SENSORS_QUERY","RepoRouteContainer","workspaceState","WorkspaceContext","addressForPath","repoAddressFromPath","allRepos","repositoryLocation","exact","WorkspaceResourcesRoot","ResourceRoot","WorkspaceRoot","MainContent","M"],"sourceRoot":""}