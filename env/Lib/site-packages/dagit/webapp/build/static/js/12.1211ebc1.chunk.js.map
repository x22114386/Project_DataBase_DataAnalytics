{"version":3,"file":"static/js/12.1211ebc1.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetPageHeader.tsx","../../core/src/assets/AssetTableFragment.tsx","../../core/src/workspace/VirtualizedAssetTable.tsx","../../core/src/assets/AssetWipeDialog.tsx","../../core/src/assets/AssetTable.tsx","../../core/src/assets/AssetsEmptyState.tsx","../../core/src/assets/useAssetView.tsx","../../core/src/assets/AssetsCatalogTable.tsx","../../core/src/assets/useAssetSearch.tsx","../../core/src/workspace/ReloadAllButton.tsx","../../core/src/assets/AssetActionMenu.tsx","../../core/src/workspace/VirtualizedAssetRow.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {BreadcrumbProps, Breadcrumbs} from '@blueprintjs/core';\nimport {Box, Colors, PageHeader, Heading, Icon, Tooltip, IconWrapper} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {useCopyToClipboard} from '../app/browser';\n\ntype Props = {assetKey: {path: string[]}} & Partial<React.ComponentProps<typeof PageHeader>>;\n\nexport const AssetPageHeader: React.FC<Props> = ({assetKey, ...extra}) => {\n  const copy = useCopyToClipboard();\n  const copyableString = assetKey.path.join('/');\n  const [didCopy, setDidCopy] = React.useState(false);\n  const iconTimeout = React.useRef<NodeJS.Timeout>();\n\n  const performCopy = React.useCallback(() => {\n    if (iconTimeout.current) {\n      clearTimeout(iconTimeout.current);\n    }\n\n    copy(copyableString);\n    setDidCopy(true);\n    SharedToaster.show({\n      icon: 'done',\n      intent: 'primary',\n      message: 'Copied asset key!',\n    });\n\n    iconTimeout.current = setTimeout(() => {\n      setDidCopy(false);\n    }, 2000);\n  }, [copy, copyableString]);\n\n  const breadcrumbs = React.useMemo(() => {\n    const list: BreadcrumbProps[] = [{text: 'Assets', href: '/assets'}];\n\n    assetKey.path.reduce((accum: string, elem: string) => {\n      const href = `${accum}/${encodeURIComponent(elem)}`;\n      list.push({text: elem, href});\n      return href;\n    }, '/assets');\n\n    return list;\n  }, [assetKey.path]);\n\n  return (\n    <PageHeader\n      title={\n        <Box\n          flex={{alignItems: 'center', gap: 4}}\n          style={{maxWidth: '600px', overflow: 'hidden', marginBottom: 4}}\n        >\n          <BreadcrumbsWithSlashes\n            items={breadcrumbs}\n            currentBreadcrumbRenderer={({text}) => <Heading>{text}</Heading>}\n            breadcrumbRenderer={({text, href}) => (\n              <Heading>\n                <BreadcrumbLink to={href || '#'}>{text}</BreadcrumbLink>\n              </Heading>\n            )}\n          />\n          <Tooltip placement=\"bottom\" content=\"Copy asset key\">\n            <CopyButton onClick={performCopy}>\n              <Icon\n                name={didCopy ? 'copy_to_clipboard_done' : 'copy_to_clipboard'}\n                color={Colors.Gray400}\n              />\n            </CopyButton>\n          </Tooltip>\n        </Box>\n      }\n      {...extra}\n    />\n  );\n};\n\nconst CopyButton = styled.button`\n  border: none;\n  background: transparent;\n  cursor: pointer;\n  padding: 3px;\n  margin-top: 2px;\n\n  :focus {\n    outline: none;\n  }\n\n  ${IconWrapper} {\n    transition: background-color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n`;\n\nexport const AssetGlobalLineageLink = () => (\n  <Link to=\"/asset-groups\">\n    <Box flex={{gap: 4}}>\n      <Icon color={Colors.Link} name=\"schema\" />\n      View global asset lineage\n    </Box>\n  </Link>\n);\n\nconst BreadcrumbsWithSlashes = styled(Breadcrumbs)`\n  & li:not(:first-child)::after {\n    background: none;\n    font-size: 20px;\n    font-weight: bold;\n    color: #5c7080;\n    content: '/';\n    width: 8px;\n    line-height: 16px;\n  }\n`;\n\nconst BreadcrumbLink = styled(Link)`\n  color: ${Colors.Gray800};\n\n  :hover,\n  :active {\n    color: ${Colors.Gray800};\n  }\n`;\n","import {gql} from '@apollo/client';\n\nexport const ASSET_TABLE_DEFINITION_FRAGMENT = gql`\n  fragment AssetTableDefinitionFragment on AssetNode {\n    id\n    groupName\n    isSource\n    isObservable\n    hasMaterializePermission\n    partitionDefinition {\n      description\n    }\n    description\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport const ASSET_TABLE_FRAGMENT = gql`\n  fragment AssetTableFragment on Asset {\n    __typename\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      ...AssetTableDefinitionFragment\n    }\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {AssetTableFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {Container, Inner} from '../ui/VirtualizedTable';\n\nimport {VirtualizedAssetCatalogHeader, VirtualizedAssetRow} from './VirtualizedAssetRow';\nimport {buildRepoAddress} from './buildRepoAddress';\n\ntype Row =\n  | {type: 'asset'; path: string[]; asset: AssetTableFragment}\n  | {type: 'folder'; path: string[]; assets: AssetTableFragment[]};\n\ninterface Props {\n  headerCheckbox: React.ReactNode;\n  prefixPath: string[];\n  groups: {[path: string]: AssetTableFragment[]};\n  checkedPaths: Set<string>;\n  onToggleFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n  onWipe: (assets: AssetTableFragment[]) => void;\n  showRepoColumn: boolean;\n  view?: AssetViewType;\n}\n\nexport const VirtualizedAssetTable: React.FC<Props> = (props) => {\n  const {\n    headerCheckbox,\n    prefixPath,\n    groups,\n    checkedPaths,\n    onToggleFactory,\n    onWipe,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const count = Object.keys(groups).length;\n\n  const rowVirtualizer = useVirtualizer({\n    count,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const rows: Row[] = React.useMemo(() => {\n    return Object.keys(groups).map((key) => {\n      const path = [...prefixPath, ...JSON.parse(key)];\n      const assets = groups[key];\n      const isFolder = assets.length > 1 || path.join('/') !== assets[0].key.path.join('/');\n      return isFolder ? {type: 'folder', path, assets} : {type: 'asset', path, asset: assets[0]};\n    });\n  }, [prefixPath, groups]);\n\n  return (\n    <>\n      <VirtualizedAssetCatalogHeader headerCheckbox={headerCheckbox} view={view} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: Row = rows[index];\n              const path = JSON.stringify(row.path);\n              const rowType = () => {\n                if (row.type === 'folder') {\n                  return 'folder';\n                }\n                return row.asset.definition ? 'asset' : 'asset_non_sda';\n              };\n\n              const repoAddress = () => {\n                if (row.type === 'folder' || !row.asset.definition) {\n                  return null;\n                }\n                const repository = row.asset.definition.repository;\n                return buildRepoAddress(repository.name, repository.location.name);\n              };\n\n              const wipeableAssets = row.type === 'folder' ? row.assets : [row.asset];\n\n              return (\n                <VirtualizedAssetRow\n                  key={key}\n                  view={view}\n                  type={rowType()}\n                  path={row.path}\n                  repoAddress={repoAddress()}\n                  showCheckboxColumn\n                  showRepoColumn={showRepoColumn}\n                  height={size}\n                  start={start}\n                  checked={checkedPaths.has(path)}\n                  onToggleChecked={onToggleFactory(path)}\n                  onWipe={() => onWipe(wipeableAssets)}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, RefetchQueriesFunction, useMutation} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog, Group} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\n\nimport {AssetWipeMutation, AssetWipeMutationVariables} from './types/AssetWipeDialog.types';\n\ninterface AssetKey {\n  path: string[];\n}\n\nexport const AssetWipeDialog: React.FC<{\n  assetKeys: AssetKey[];\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: (assetKeys: AssetKey[]) => void;\n  requery?: RefetchQueriesFunction;\n}> = ({assetKeys, isOpen, onClose, onComplete, requery}) => {\n  const [requestWipe] = useMutation<AssetWipeMutation, AssetWipeMutationVariables>(\n    ASSET_WIPE_MUTATION,\n    {\n      variables: {assetKeys: assetKeys.map((key) => ({path: key.path || []}))},\n      refetchQueries: requery,\n    },\n  );\n\n  const wipe = async () => {\n    if (!assetKeys.length) {\n      return;\n    }\n    await requestWipe();\n    onComplete(assetKeys);\n  };\n\n  return (\n    <Dialog isOpen={isOpen} title=\"Wipe materializations\" onClose={onClose} style={{width: 600}}>\n      <DialogBody>\n        <Group direction=\"column\" spacing={16}>\n          <div>Are you sure you want to wipe materializations for these assets?</div>\n          <ul style={{paddingLeft: 32, margin: 0}}>\n            {assetKeys.map((assetKey) => {\n              const name = displayNameForAssetKey(assetKey);\n              return (\n                <li style={{marginBottom: 4}} key={name}>\n                  {name}\n                </li>\n              );\n            })}\n          </ul>\n          <div>\n            Assets defined only by their historical materializations will disappear from the Asset\n            Catalog. Software-defined assets will remain unless their definition is also deleted.\n          </div>\n          <strong>This action cannot be undone.</strong>\n        </Group>\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button intent=\"danger\" onClick={wipe}>\n          Wipe\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ASSET_WIPE_MUTATION = gql`\n  mutation AssetWipeMutation($assetKeys: [AssetKeyInput!]!) {\n    wipeAssets(assetKeys: $assetKeys) {\n      ... on AssetWipeSuccess {\n        assetKeys {\n          path\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {RefetchQueriesFunction} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  Tooltip,\n  Checkbox,\n  NonIdealState,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {VirtualizedAssetTable} from '../workspace/VirtualizedAssetTable';\n\nimport {AssetWipeDialog} from './AssetWipeDialog';\nimport {LaunchAssetExecutionButton} from './LaunchAssetExecutionButton';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {AssetViewType} from './useAssetView';\n\ntype Asset = AssetTableFragment;\ntype AssetKey = {path: string[]};\n\ninterface Props {\n  view: AssetViewType;\n  assets: Asset[];\n  refreshState: QueryRefreshState;\n  actionBarComponents: React.ReactNode;\n  prefixPath: string[];\n  displayPathForAsset: (asset: Asset) => string[];\n  requery?: RefetchQueriesFunction;\n  searchPath: string;\n  searchGroup: AssetGroupSelector | null;\n}\n\nexport const AssetTable: React.FC<Props> = ({\n  assets,\n  actionBarComponents,\n  refreshState,\n  prefixPath,\n  displayPathForAsset,\n  requery,\n  searchPath,\n  searchGroup,\n  view,\n}) => {\n  const [toWipe, setToWipe] = React.useState<AssetKey[] | undefined>();\n\n  const groupedByFirstComponent: {[pathComponent: string]: Asset[]} = {};\n\n  assets.forEach((asset) => {\n    const displayPathKey = JSON.stringify(displayPathForAsset(asset));\n    groupedByFirstComponent[displayPathKey] = [\n      ...(groupedByFirstComponent[displayPathKey] || []),\n      asset,\n    ];\n  });\n\n  const [{checkedIds: checkedPaths}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    Object.keys(groupedByFirstComponent),\n  );\n\n  const checkedAssets: Asset[] = [];\n  const checkedPathsOnscreen: string[] = [];\n\n  const pageDisplayPathKeys = Object.keys(groupedByFirstComponent).sort();\n  pageDisplayPathKeys.forEach((pathKey) => {\n    if (checkedPaths.has(pathKey)) {\n      checkedPathsOnscreen.push(pathKey);\n      checkedAssets.push(...(groupedByFirstComponent[pathKey] || []));\n    }\n  });\n\n  const content = () => {\n    if (!assets.length) {\n      if (searchPath) {\n        return (\n          <Box padding={{top: 64}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching assets\"\n              description={\n                searchGroup ? (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found in{' '}\n                    <strong>{searchGroup.groupName}</strong>\n                  </div>\n                ) : (\n                  <div>\n                    No assets matching <strong>{searchPath}</strong> were found\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No assets\"\n            description={\n              searchGroup ? (\n                <div>\n                  No assets were found in <strong>{searchGroup.groupName}</strong>\n                </div>\n              ) : (\n                'No assets were found'\n              )\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <VirtualizedAssetTable\n        headerCheckbox={\n          <Checkbox\n            indeterminate={\n              checkedPathsOnscreen.length > 0 &&\n              checkedPathsOnscreen.length !== pageDisplayPathKeys.length\n            }\n            checked={\n              checkedPathsOnscreen.length > 0 &&\n              checkedPathsOnscreen.length === pageDisplayPathKeys.length\n            }\n            onChange={(e) => {\n              if (e.target instanceof HTMLInputElement) {\n                onToggleAll(checkedPathsOnscreen.length !== pageDisplayPathKeys.length);\n              }\n            }}\n          />\n        }\n        prefixPath={prefixPath}\n        groups={groupedByFirstComponent}\n        checkedPaths={checkedPaths}\n        onToggleFactory={onToggleFactory}\n        showRepoColumn\n        view={view}\n        onWipe={(assets: Asset[]) => setToWipe(assets.map((asset) => asset.key))}\n      />\n    );\n  };\n\n  return (\n    <>\n      <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n        <Box\n          background={Colors.White}\n          flex={{alignItems: 'center', gap: 12}}\n          padding={{vertical: 8, left: 24, right: 12}}\n          style={{position: 'sticky', top: 0, zIndex: 1}}\n        >\n          {actionBarComponents}\n          <div style={{flex: 1}} />\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            {checkedAssets.some((c) => !c.definition) ? (\n              <Tooltip content=\"One or more selected assets are not software-defined and cannot be launched directly.\">\n                <Button intent=\"primary\" icon={<Icon name=\"materialization\" />} disabled>\n                  {checkedAssets.length > 1\n                    ? `Materialize (${checkedAssets.length.toLocaleString()})`\n                    : 'Materialize'}\n                </Button>\n              </Tooltip>\n            ) : (\n              <LaunchAssetExecutionButton\n                scope={{selected: checkedAssets.map((a) => ({...a.definition!, assetKey: a.key}))}}\n              />\n            )}\n            <MoreActionsDropdown\n              selected={checkedAssets}\n              clearSelection={() => onToggleAll(false)}\n            />\n          </Box>\n        </Box>\n        {content()}\n      </Box>\n      <AssetWipeDialog\n        assetKeys={toWipe || []}\n        isOpen={!!toWipe}\n        onClose={() => setToWipe(undefined)}\n        onComplete={() => setToWipe(undefined)}\n        requery={requery}\n      />\n    </>\n  );\n};\n\nconst MoreActionsDropdown: React.FC<{\n  selected: Asset[];\n  clearSelection: () => void;\n  requery?: RefetchQueriesFunction;\n}> = React.memo(({selected, clearSelection, requery}) => {\n  const [showBulkWipeDialog, setShowBulkWipeDialog] = React.useState<boolean>(false);\n  const {\n    permissions: {canWipeAssets},\n  } = useUnscopedPermissions();\n\n  if (!canWipeAssets) {\n    return null;\n  }\n\n  const disabled = selected.length === 0;\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <MenuItem\n              text=\"Wipe materializations\"\n              onClick={() => setShowBulkWipeDialog(true)}\n              icon={<Icon name=\"delete\" color={disabled ? Colors.Gray600 : Colors.Red500} />}\n              disabled={disabled}\n              intent=\"danger\"\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      <AssetWipeDialog\n        assetKeys={selected.map((asset) => asset.key)}\n        isOpen={showBulkWipeDialog}\n        onClose={() => setShowBulkWipeDialog(false)}\n        onComplete={() => {\n          setShowBulkWipeDialog(false);\n          clearSelection();\n        }}\n        requery={requery}\n      />\n    </>\n  );\n});\n","import {NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nexport const AssetsEmptyState = ({prefixPath}: {prefixPath: string[]}) => (\n  <NonIdealState\n    icon=\"asset\"\n    title=\"Assets\"\n    description={\n      <p>\n        {prefixPath && prefixPath.length\n          ? `There are no matching materialized assets with the specified asset key. `\n          : `There are no known materialized assets. `}\n        Any asset keys that have been specified with an <code>AssetMaterialization</code> during a\n        pipeline run will appear here. See the{' '}\n        <a href=\"https://docs.dagster.io/_apidocs/ops#dagster.AssetMaterialization\">\n          AssetMaterialization documentation\n        </a>{' '}\n        for more information.\n      </p>\n    }\n  />\n);\n","import {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst ASSET_VIEW_KEY = 'AssetViewPreference';\n\nexport type AssetViewType = 'flat' | 'directory';\n\nconst validateSavedAssetView = (storedValue: any) =>\n  storedValue === 'flat' || storedValue === 'directory' ? storedValue : 'flat';\n\nexport const useAssetView = () => {\n  return useStateWithStorage<AssetViewType>(ASSET_VIEW_KEY, validateSavedAssetView);\n};\n","import {gql, QueryResult, useQuery} from '@apollo/client';\nimport {Box, TextInput, Suggest, MenuItem, Icon, ButtonGroup} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {AssetGroupSelector} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {ClearButton} from '../ui/ClearButton';\nimport {LoadingSpinner} from '../ui/Loading';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\n\nimport {AssetTable} from './AssetTable';\nimport {ASSET_TABLE_DEFINITION_FRAGMENT, ASSET_TABLE_FRAGMENT} from './AssetTableFragment';\nimport {AssetsEmptyState} from './AssetsEmptyState';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n  AssetCatalogGroupTableQuery,\n  AssetCatalogGroupTableNodeFragment,\n  AssetCatalogGroupTableQueryVariables,\n} from './types/AssetsCatalogTable.types';\nimport {useAssetSearch} from './useAssetSearch';\nimport {AssetViewType, useAssetView} from './useAssetView';\n\ntype Asset = AssetTableFragment;\n\nfunction useAllAssets(\n  groupSelector?: AssetGroupSelector,\n): {\n  query: QueryResult<AssetCatalogTableQuery, any> | QueryResult<AssetCatalogGroupTableQuery, any>;\n  assets: Asset[] | undefined;\n  error: PythonErrorFragment | undefined;\n} {\n  const assetsQuery = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      skip: !!groupSelector,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const groupQuery = useQuery<AssetCatalogGroupTableQuery, AssetCatalogGroupTableQueryVariables>(\n    ASSET_CATALOG_GROUP_TABLE_QUERY,\n    {\n      skip: !groupSelector,\n      variables: {group: groupSelector},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  return React.useMemo(() => {\n    if (groupSelector) {\n      const assetNodes = groupQuery.data?.assetNodes;\n      return {\n        query: groupQuery,\n        error: undefined,\n        assets: assetNodes?.map(definitionToAssetTableFragment),\n      };\n    }\n\n    const assetsOrError = assetsQuery.data?.assetsOrError;\n    return {\n      query: assetsQuery,\n      error: assetsOrError?.__typename === 'PythonError' ? assetsOrError : undefined,\n      assets: assetsOrError?.__typename === 'AssetConnection' ? assetsOrError.nodes : undefined,\n    };\n  }, [assetsQuery, groupQuery, groupSelector]);\n}\n\ninterface AssetCatalogTableProps {\n  prefixPath: string[];\n  setPrefixPath: (prefixPath: string[]) => void;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport const AssetsCatalogTable: React.FC<AssetCatalogTableProps> = ({\n  prefixPath,\n  setPrefixPath,\n  groupSelector,\n}) => {\n  const [view, setView] = useAssetView();\n  const [search, setSearch] = useQueryPersistedState<string | undefined>({queryKey: 'q'});\n  const [searchGroup, setSearchGroup] = useQueryPersistedState<AssetGroupSelector | null>({\n    queryKey: 'g',\n    decode: (qs) => (qs.group ? JSON.parse(qs.group) : null),\n    encode: (group) => ({group: group ? JSON.stringify(group) : undefined}),\n  });\n\n  const searchPath = (search || '')\n    .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n    .toLowerCase()\n    .trim();\n\n  const {assets, query, error} = useAllAssets(groupSelector);\n  const pathMatches = useAssetSearch(searchPath, assets || []);\n\n  const filtered = React.useMemo(\n    () =>\n      pathMatches.filter((a) => !searchGroup || isEqual(buildAssetGroupSelector(a), searchGroup)),\n    [pathMatches, searchGroup],\n  );\n\n  const {displayPathForAsset, displayed} =\n    view === 'flat'\n      ? buildFlatProps(filtered, prefixPath)\n      : buildNamespaceProps(filtered, prefixPath);\n\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  React.useEffect(() => {\n    if (view !== 'directory' && prefixPath.length) {\n      setView('directory');\n    }\n  }, [view, setView, prefixPath]);\n\n  if (error) {\n    return <PythonErrorInfo error={error} />;\n  }\n\n  if (!assets) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  if (!assets.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <AssetsEmptyState prefixPath={prefixPath} />\n      </Box>\n    );\n  }\n\n  return (\n    <AssetTable\n      view={view}\n      assets={displayed}\n      actionBarComponents={\n        <>\n          <ButtonGroup<AssetViewType>\n            activeItems={new Set([view])}\n            buttons={[\n              {id: 'flat', icon: 'view_list', tooltip: 'List view'},\n              {id: 'directory', icon: 'folder', tooltip: 'Folder view'},\n            ]}\n            onClick={(view) => {\n              setView(view);\n              if (view === 'flat' && prefixPath.length) {\n                setPrefixPath([]);\n              }\n            }}\n          />\n          <TextInput\n            value={search || ''}\n            style={{width: '30vw', minWidth: 150, maxWidth: 400}}\n            placeholder={\n              prefixPath.length\n                ? `Filter asset keys in ${prefixPath.join('/')}…`\n                : `Filter asset keys…`\n            }\n            onChange={(e: React.ChangeEvent<any>) => setSearch(e.target.value)}\n          />\n          {!groupSelector ? (\n            <AssetGroupSuggest assets={assets} value={searchGroup} onChange={setSearchGroup} />\n          ) : undefined}\n        </>\n      }\n      refreshState={refreshState}\n      prefixPath={prefixPath || []}\n      searchPath={searchPath}\n      searchGroup={searchGroup}\n      displayPathForAsset={displayPathForAsset}\n      requery={(_) => [{query: ASSET_CATALOG_TABLE_QUERY}]}\n    />\n  );\n};\n\nconst AssetGroupSuggest: React.FC<{\n  assets: Asset[];\n  value: AssetGroupSelector | null;\n  onChange: (g: AssetGroupSelector | null) => void;\n}> = ({assets, value, onChange}) => {\n  const assetGroups = React.useMemo(\n    () =>\n      uniqBy(\n        (assets || []).map(buildAssetGroupSelector).filter((a) => !!a) as AssetGroupSelector[],\n        (a) => JSON.stringify(a),\n      ).sort((a, b) => a.groupName.localeCompare(b.groupName)),\n    [assets],\n  );\n\n  const repoContextNeeded = React.useMemo(() => {\n    // This is a bit tricky - the first time we find a groupName it sets the key to `false`.\n    // The second time, it sets the value to `true` + tells use we need to show the repo name\n    const result: {[groupName: string]: boolean} = {};\n    assetGroups.forEach(\n      (group) => (result[group.groupName] = result.hasOwnProperty(group.groupName)),\n    );\n    return result;\n  }, [assetGroups]);\n\n  return (\n    <Suggest<AssetGroupSelector>\n      selectedItem={value}\n      items={assetGroups}\n      inputProps={{\n        style: {width: 220},\n        placeholder: 'Filter asset groups…',\n        rightElement: value ? (\n          <ClearButton onClick={() => onChange(null)} style={{marginTop: 5, marginRight: 4}}>\n            <Icon name=\"cancel\" />\n          </ClearButton>\n        ) : undefined,\n      }}\n      inputValueRenderer={(partition) => partition.groupName}\n      itemPredicate={(query, partition) =>\n        query.length === 0 || partition.groupName.includes(query)\n      }\n      itemsEqual={isEqual}\n      itemRenderer={(assetGroup, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          onClick={props.handleClick}\n          key={JSON.stringify(assetGroup)}\n          text={\n            <>\n              {assetGroup.groupName}\n              {repoContextNeeded[assetGroup.groupName] ? (\n                <span style={{opacity: 0.5, paddingLeft: 4}}>\n                  {buildRepoPathForHuman(\n                    assetGroup.repositoryName,\n                    assetGroup.repositoryLocationName,\n                  )}\n                </span>\n              ) : undefined}\n            </>\n          }\n        />\n      )}\n      noResults={<MenuItem disabled={true} text=\"No asset groups\" />}\n      onItemSelect={onChange}\n    />\n  );\n};\n\nexport const ASSET_CATALOG_TABLE_QUERY = gql`\n  query AssetCatalogTableQuery {\n    assetsOrError {\n      __typename\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${ASSET_TABLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const ASSET_CATALOG_GROUP_TABLE_QUERY = gql`\n  query AssetCatalogGroupTableQuery($group: AssetGroupSelector) {\n    assetNodes(group: $group) {\n      id\n      ...AssetCatalogGroupTableNode\n    }\n  }\n\n  fragment AssetCatalogGroupTableNode on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    ...AssetTableDefinitionFragment\n  }\n\n  ${ASSET_TABLE_DEFINITION_FRAGMENT}\n`;\n\n// When we load the AssetCatalogTable for a particular asset group, we retrieve `assetNodes`,\n// not `assets`. To narrow the scope of this difference we coerce the nodes to look like\n// AssetCatalogTableQuery results.\nfunction definitionToAssetTableFragment(definition: AssetCatalogGroupTableNodeFragment): Asset {\n  return {__typename: 'Asset', id: definition.id, key: definition.assetKey, definition};\n}\n\nfunction buildAssetGroupSelector(a: Asset) {\n  return a.definition && a.definition.groupName\n    ? {\n        groupName: a.definition.groupName,\n        repositoryName: a.definition.repository.name,\n        repositoryLocationName: a.definition.repository.location.name,\n      }\n    : null;\n}\n\nfunction buildFlatProps(assets: Asset[], _: string[]) {\n  return {\n    displayed: assets,\n    displayPathForAsset: (asset: Asset) => asset.key.path,\n  };\n}\n\nfunction buildNamespaceProps(assets: Asset[], prefixPath: string[]) {\n  // Return all assets from the next PAGE_SIZE namespaces - the AssetTable component will later\n  // group them by namespace\n\n  const namespaceForAsset = (asset: Asset) => {\n    return asset.key.path.slice(prefixPath.length, prefixPath.length + 1);\n  };\n\n  // Only consider assets that start with the prefix path\n  const assetsWithPathPrefix = assets.filter((asset) =>\n    asset.key.path.join(',').startsWith(prefixPath.join(',')),\n  );\n\n  const namespaces = Array.from(\n    new Set(assetsWithPathPrefix.map((asset) => JSON.stringify(namespaceForAsset(asset)))),\n  )\n    .map((x) => JSON.parse(x))\n    .sort();\n\n  return {\n    displayPathForAsset: namespaceForAsset,\n    displayed: filterAssetsByNamespace(\n      assetsWithPathPrefix,\n      namespaces.map((ns) => [...prefixPath, ...ns]),\n    ),\n  };\n}\n\nconst filterAssetsByNamespace = (assets: Asset[], paths: string[][]) => {\n  return assets.filter((asset) =>\n    paths.some((path) => path.every((part, i) => part === asset.key.path[i])),\n  );\n};\n","import * as React from 'react';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\n\nconst useSanitizedAssetSearch = (searchValue: string) => {\n  return React.useMemo(() => {\n    return (searchValue || '')\n      .replace(/(( ?> ?)|\\.|\\/)/g, '/')\n      .toLowerCase()\n      .trim();\n  }, [searchValue]);\n};\n\nexport const useAssetSearch = <A extends {key: {path: string[]}}>(\n  searchValue: string,\n  assets: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assets;\n    }\n    return assets.filter((a) => tokenForAssetKey(a.key).toLowerCase().includes(sanitizedSearch));\n  }, [assets, sanitizedSearch]);\n};\n\nexport const useAssetNodeSearch = <A extends {assetKey: {path: string[]}}>(\n  searchValue: string,\n  assetNodes: A[],\n): A[] => {\n  const sanitizedSearch = useSanitizedAssetSearch(searchValue);\n\n  return React.useMemo(() => {\n    // If there is no search value, match everything.\n    if (!sanitizedSearch) {\n      return assetNodes;\n    }\n    return assetNodes.filter((a) =>\n      tokenForAssetKey(a.assetKey).toLowerCase().includes(sanitizedSearch),\n    );\n  }, [assetNodes, sanitizedSearch]);\n};\n","import {Button, Dialog, DialogBody, DialogFooter, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useUnscopedPermissions} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  reloadFnForWorkspace,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationErrorDialog} from './RepositoryLocationErrorDialog';\n\nexport const ReloadAllButton: React.FC<{label?: string}> = ({label = 'Reload all'}) => {\n  const {\n    permissions: {canReloadWorkspace},\n    disabledReasons,\n  } = useUnscopedPermissions();\n  const {reloading, tryReload, error, errorLocationId} = useRepositoryLocationReload({\n    scope: 'workspace',\n    reloadFn: reloadFnForWorkspace,\n  });\n\n  const [isOpen, setIsOpen] = React.useState(!!error);\n  React.useEffect(() => setIsOpen(!!error), [error]);\n\n  if (!canReloadWorkspace) {\n    return (\n      <Tooltip content={disabledReasons.canReloadWorkspace}>\n        <Button icon={<Icon name=\"refresh\" />} disabled intent=\"none\">\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Button onClick={tryReload} icon={<Icon name=\"refresh\" />} loading={reloading} intent=\"none\">\n        {label}\n      </Button>\n      {errorLocationId ? (\n        <RepositoryLocationErrorDialog\n          error={error}\n          location={errorLocationId}\n          reloading={reloading}\n          onTryReload={tryReload}\n          onDismiss={() => setIsOpen(false)}\n          isOpen={isOpen}\n        />\n      ) : (\n        <Dialog\n          icon=\"error\"\n          title=\"Reload error\"\n          canEscapeKeyClose={false}\n          canOutsideClickClose={false}\n          style={{width: '90%'}}\n          isOpen={isOpen}\n        >\n          <DialogBody>{error && <PythonErrorInfo error={error} />}</DialogBody>\n          <DialogFooter>\n            <Button onClick={() => setIsOpen(false)}>Dismiss</Button>\n          </DialogFooter>\n        </Dialog>\n      )}\n    </>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {useMaterializationAction} from './LaunchAssetExecutionButton';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetTableFragment} from './types/AssetTableFragment.types';\n\ninterface Props {\n  repoAddress: RepoAddress | null;\n  asset: AssetTableFragment;\n  onWipe?: (assets: AssetTableFragment[]) => void;\n}\n\nexport const AssetActionMenu: React.FC<Props> = (props) => {\n  const {repoAddress, asset, onWipe} = props;\n  const {\n    permissions: {canWipeAssets, canLaunchPipelineExecution},\n  } = usePermissionsForLocation(repoAddress?.location);\n  const {path} = asset.key;\n\n  const {onClick, loading, launchpadElement} = useMaterializationAction();\n\n  return (\n    <>\n      <Popover\n        position=\"bottom-right\"\n        content={\n          <Menu>\n            <Tooltip\n              content={\n                !canLaunchPipelineExecution\n                  ? 'You do not have permission to materialize assets'\n                  : 'Shift+click to add configuration'\n              }\n              placement=\"left\"\n              display=\"block\"\n              useDisabledButtonTooltipFix\n            >\n              <MenuItem\n                text=\"Materialize\"\n                icon={loading ? <Spinner purpose=\"body-text\" /> : 'materialization'}\n                disabled={!canLaunchPipelineExecution || loading}\n                onClick={(e) => onClick([asset.key], e)}\n              />\n            </Tooltip>\n            <MenuLink\n              text=\"Show in group\"\n              to={\n                repoAddress && asset.definition?.groupName\n                  ? workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${asset.definition.groupName}`,\n                    )\n                  : ''\n              }\n              disabled={!asset?.definition}\n              icon=\"asset_group\"\n            />\n            <MenuLink\n              text=\"View neighbors\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'neighbors'})}\n              disabled={!asset?.definition}\n              icon=\"graph_neighbors\"\n            />\n            <MenuLink\n              text=\"View upstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'upstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_upstream\"\n            />\n            <MenuLink\n              text=\"View downstream assets\"\n              to={assetDetailsPathForKey({path}, {view: 'lineage', lineageScope: 'downstream'})}\n              disabled={!asset?.definition}\n              icon=\"graph_downstream\"\n            />\n            <MenuItem\n              text=\"Wipe materializations\"\n              icon=\"delete\"\n              disabled={!onWipe || !canWipeAssets}\n              intent=\"danger\"\n              onClick={() => canWipeAssets && onWipe && onWipe([asset])}\n            />\n          </Menu>\n        }\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n      {launchpadElement}\n    </>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Checkbox, Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_LIVE_FRAGMENT, buildAssetNodeStatusContent} from '../asset-graph/AssetNode';\nimport {AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {buildLiveDataForNode} from '../asset-graph/Utils';\nimport {ASSET_LATEST_INFO_FRAGMENT} from '../asset-graph/useLiveDataForAssetKeys';\nimport {AssetActionMenu} from '../assets/AssetActionMenu';\nimport {AssetLink} from '../assets/AssetLink';\nimport {PartitionCountLabels} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_TABLE_FRAGMENT} from '../assets/AssetTableFragment';\nimport {StaleReasonsLabel} from '../assets/Stale';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetTableFragment} from '../assets/types/AssetTableFragment.types';\nimport {AssetViewType} from '../assets/useAssetView';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleAssetQuery, SingleAssetQueryVariables} from './types/VirtualizedAssetRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.3fr 1fr 80px';\nconst TEMPLATE_COLUMNS_FOR_CATALOG = '76px 1.3fr 1.3fr 1.3fr 80px';\n\ninterface AssetRowProps {\n  checked: boolean;\n  type: 'folder' | 'asset' | 'asset_non_sda';\n  view?: AssetViewType;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  showRepoColumn: boolean;\n  path: string[];\n  repoAddress: RepoAddress | null;\n  height: number;\n  start: number;\n  onWipe: (assets: AssetTableFragment[]) => void;\n}\n\nexport const VirtualizedAssetRow = (props: AssetRowProps) => {\n  const {\n    path,\n    type,\n    repoAddress,\n    start,\n    height,\n    checked,\n    onToggleChecked,\n    onWipe,\n    showCheckboxColumn = false,\n    showRepoColumn,\n    view = 'flat',\n  } = props;\n\n  const [queryAsset, queryResult] = useLazyQuery<SingleAssetQuery, SingleAssetQueryVariables>(\n    SINGLE_ASSET_QUERY,\n    {\n      variables: {input: {path}},\n    },\n  );\n\n  useDelayedRowQuery(queryAsset);\n  const {data} = queryResult;\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const asset = React.useMemo(() => {\n    if (data?.assetOrError.__typename === 'Asset') {\n      return data.assetOrError;\n    }\n    return null;\n  }, [data]);\n\n  const liveData = React.useMemo(() => {\n    if (asset?.definition && data?.assetsLatestInfo) {\n      const latestInfoForAsset = data.assetsLatestInfo[0];\n      if (latestInfoForAsset) {\n        return buildLiveDataForNode(asset.definition, latestInfoForAsset);\n      }\n    }\n    return null;\n  }, [data, asset]);\n\n  const linkUrl = assetDetailsPathForKey({path});\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        $showRepoColumn={showRepoColumn}\n      >\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Checkbox checked={checked} onChange={onChange} />\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{alignItems: 'center'}}>\n            <div style={{flex: 1, minWidth: 0}}>\n              <AssetLink\n                path={type === 'folder' || view === 'directory' ? path.slice(-1) : path}\n                url={linkUrl}\n                isGroup={type === 'folder'}\n                icon={type}\n                textStyle=\"middle-truncate\"\n              />\n            </div>\n            {asset?.definition && (\n              <AssetComputeKindTag\n                reduceColor\n                reduceText\n                definition={asset.definition}\n                style={{position: 'relative'}}\n              />\n            )}\n          </Box>\n          <div\n            style={{\n              maxWidth: '100%',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            <Caption style={{color: Colors.Gray500, whiteSpace: 'nowrap'}}>\n              {asset?.definition?.description}\n            </Caption>\n          </div>\n        </RowCell>\n        {showRepoColumn ? (\n          <RowCell>\n            {repoAddress ? (\n              <Box\n                flex={{direction: 'column', gap: 4}}\n                style={{maxWidth: '100%', overflow: 'hidden'}}\n              >\n                <RepositoryLink repoAddress={repoAddress} showIcon showRefresh={false} />\n                {asset?.definition && asset?.definition.groupName ? (\n                  <Link\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/asset-groups/${asset.definition.groupName}`,\n                    )}\n                  >\n                    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                      <Icon color={Colors.Gray400} name=\"asset_group\" />\n                      {asset.definition.groupName}\n                    </Box>\n                  </Link>\n                ) : null}\n              </Box>\n            ) : (\n              <span>{'\\u2013'}</span>\n            )}\n          </RowCell>\n        ) : null}\n        <RowCell>\n          {asset?.definition?.partitionDefinition ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n              <PartitionCountLabels partitionStats={liveData?.partitionStats} />\n              <Caption>{`${liveData?.partitionStats?.numPartitions.toLocaleString()} ${\n                liveData?.partitionStats?.numPartitions === 1 ? 'partition' : 'partitions'\n              }`}</Caption>\n            </Box>\n          ) : (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n              {asset?.definition ? (\n                <Box\n                  style={{whiteSpace: 'nowrap'}}\n                  flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                >\n                  {\n                    buildAssetNodeStatusContent({\n                      definition: asset.definition,\n                      expanded: true,\n                      liveData,\n                    }).content\n                  }\n                </Box>\n              ) : liveData?.lastMaterialization ? (\n                <AssetRunLink\n                  runId={liveData.lastMaterialization.runId}\n                  event={{\n                    stepKey: liveData.stepKey,\n                    timestamp: liveData.lastMaterialization.timestamp,\n                  }}\n                >\n                  <TimestampDisplay\n                    timestamp={Number(liveData.lastMaterialization.timestamp) / 1000}\n                    timeFormat={{showSeconds: false, showTimezone: false}}\n                  />\n                </AssetRunLink>\n              ) : (\n                <LoadingOrNone queryResult={queryResult} noneString={'\\u2013'} />\n              )}\n              {liveData && (\n                <StaleReasonsLabel assetKey={{path}} liveData={liveData} include=\"all\" />\n              )}\n            </Box>\n          )}\n        </RowCell>\n        <RowCell>\n          {asset ? (\n            <AssetActionMenu repoAddress={repoAddress} asset={asset} onWipe={onWipe} />\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedAssetCatalogHeader: React.FC<{\n  headerCheckbox: React.ReactNode;\n  view: AssetViewType;\n}> = ({headerCheckbox, view}) => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS_FOR_CATALOG,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>{headerCheckbox}</HeaderCell>\n      <HeaderCell>{view === 'flat' ? 'Asset name' : 'Asset key prefix'}</HeaderCell>\n      <HeaderCell>Code location / Asset group</HeaderCell>\n      <HeaderCell>Status</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nexport const VirtualizedAssetHeader: React.FC<{\n  nameLabel: React.ReactNode;\n}> = ({nameLabel}) => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>{nameLabel}</HeaderCell>\n      <HeaderCell>Status</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showRepoColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showRepoColumn}) =>\n    $showRepoColumn ? TEMPLATE_COLUMNS_FOR_CATALOG : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SINGLE_ASSET_QUERY = gql`\n  query SingleAssetQuery($input: AssetKeyInput!) {\n    assetOrError(assetKey: $input) {\n      ... on Asset {\n        id\n        assetMaterializations(limit: 1) {\n          runId\n          timestamp\n        }\n        definition {\n          id\n          computeKind\n          ...AssetNodeLiveFragment\n        }\n        ...AssetTableFragment\n      }\n    }\n    assetsLatestInfo(assetKeys: [$input]) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_TABLE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n"],"names":["AssetPageHeader","assetKey","extra","copy","useCopyToClipboard","copyableString","path","join","React","didCopy","setDidCopy","iconTimeout","performCopy","current","clearTimeout","SharedToaster","icon","intent","message","setTimeout","breadcrumbs","list","text","href","reduce","accum","elem","encodeURIComponent","push","title","flex","alignItems","gap","style","maxWidth","overflow","marginBottom","BreadcrumbsWithSlashes","items","currentBreadcrumbRenderer","breadcrumbRenderer","BreadcrumbLink","to","placement","content","CopyButton","onClick","name","color","Colors","styled","IconWrapper","AssetGlobalLineageLink","Breadcrumbs","Link","ASSET_TABLE_DEFINITION_FRAGMENT","gql","ASSET_TABLE_FRAGMENT","VirtualizedAssetTable","props","headerCheckbox","prefixPath","groups","checkedPaths","onToggleFactory","onWipe","showRepoColumn","view","parentRef","count","Object","keys","length","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","rows","map","key","JSON","parse","assets","type","asset","ref","$totalHeight","index","size","start","row","stringify","wipeableAssets","VirtualizedAssetRow","definition","repoAddress","repository","buildRepoAddress","location","showCheckboxColumn","height","checked","has","onToggleChecked","AssetWipeDialog","assetKeys","isOpen","onClose","onComplete","requery","useMutation","ASSET_WIPE_MUTATION","variables","refetchQueries","requestWipe","wipe","Dialog","width","Group","direction","spacing","paddingLeft","margin","displayNameForAssetKey","topBorder","Button","PYTHON_ERROR_FRAGMENT","AssetTable","actionBarComponents","refreshState","displayPathForAsset","searchPath","searchGroup","toWipe","setToWipe","groupedByFirstComponent","forEach","displayPathKey","useSelectionReducer","checkedIds","onToggleAll","checkedAssets","checkedPathsOnscreen","pageDisplayPathKeys","sort","pathKey","Box","background","padding","vertical","left","right","position","top","zIndex","QueryRefresh","some","c","Tooltip","Icon","disabled","toLocaleString","LaunchAssetExecutionButton","scope","selected","a","MoreActionsDropdown","clearSelection","Checkbox","indeterminate","onChange","e","target","HTMLInputElement","NonIdealState","description","groupName","undefined","showBulkWipeDialog","setShowBulkWipeDialog","useUnscopedPermissions","permissions","canWipeAssets","Popover","Menu","AssetsEmptyState","validateSavedAssetView","storedValue","AssetsCatalogTable","setPrefixPath","groupSelector","useStateWithStorage","setView","useQueryPersistedState","queryKey","search","setSearch","decode","qs","group","encode","setSearchGroup","replace","toLowerCase","trim","assetsQuery","useQuery","ASSET_CATALOG_TABLE_QUERY","skip","notifyOnNetworkStatusChange","groupQuery","ASSET_CATALOG_GROUP_TABLE_QUERY","assetNodes","data","query","error","definitionToAssetTableFragment","assetsOrError","__typename","nodes","useAllAssets","pathMatches","useAssetSearch","filtered","filter","isEqual","buildAssetGroupSelector","_","displayed","buildFlatProps","namespaceForAsset","slice","assetsWithPathPrefix","startsWith","namespaces","Array","from","Set","x","filterAssetsByNamespace","ns","buildNamespaceProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","PythonErrorInfo","ButtonGroup","activeItems","buttons","id","tooltip","TextInput","value","minWidth","placeholder","AssetGroupSuggest","Loading","purpose","assetGroups","uniqBy","b","localeCompare","repoContextNeeded","result","hasOwnProperty","Suggest","selectedItem","inputProps","rightElement","ClearButton","C","marginTop","marginRight","inputValueRenderer","partition","itemPredicate","includes","itemsEqual","itemRenderer","assetGroup","active","modifiers","handleClick","opacity","buildRepoPathForHuman","repositoryName","repositoryLocationName","noResults","onItemSelect","paths","every","part","i","useSanitizedAssetSearch","searchValue","sanitizedSearch","tokenForAssetKey","useAssetNodeSearch","ReloadAllButton","label","canReloadWorkspace","disabledReasons","useRepositoryLocationReload","reloadFn","reloadFnForWorkspace","reloading","tryReload","errorLocationId","setIsOpen","loading","onTryReload","onDismiss","canEscapeKeyClose","canOutsideClickClose","AssetActionMenu","usePermissionsForLocation","canLaunchPipelineExecution","useMaterializationAction","launchpadElement","display","useDisabledButtonTooltipFix","Spinner","MenuLink","workspacePathFromAddress","assetDetailsPathForKey","lineageScope","TEMPLATE_COLUMNS","TEMPLATE_COLUMNS_FOR_CATALOG","useLazyQuery","SINGLE_ASSET_QUERY","input","queryAsset","queryResult","useDelayedRowQuery","assetOrError","liveData","assetsLatestInfo","latestInfoForAsset","buildLiveDataForNode","linkUrl","$height","$start","RowGrid","border","side","$showRepoColumn","shiftKey","nativeEvent","MouseEvent","getModifierState","AssetLink","url","isGroup","textStyle","reduceColor","reduceText","textOverflow","whiteSpace","RepositoryLink","showIcon","showRefresh","partitionDefinition","partitionStats","numPartitions","buildAssetNodeStatusContent","expanded","lastMaterialization","runId","event","stepKey","timestamp","TimestampDisplay","Number","timeFormat","showSeconds","showTimezone","noneString","Stale","include","VirtualizedAssetCatalogHeader","gridTemplateColumns","fontSize","VirtualizedAssetHeader","nameLabel","ASSET_NODE_LIVE_FRAGMENT","ASSET_LATEST_INFO_FRAGMENT"],"sourceRoot":""}