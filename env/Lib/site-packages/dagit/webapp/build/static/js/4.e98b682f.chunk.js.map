{"version":3,"file":"static/js/4.e98b682f.chunk.js","mappings":"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","sources":["../../core/src/instance/RepoFilterButton.tsx","../../core/src/overview/OverviewTabs.tsx","../../core/src/instance/InstanceBackfills.tsx","../../core/src/instance/backfill/BackfillPage.tsx","../../core/src/overview/OverviewJobsTable.tsx","../../core/src/overview/sortRepoBuckets.tsx","../../core/src/overview/visibleRepoKeys.tsx","../../core/src/overview/OverviewJobsRoot.tsx","../../core/src/overview/OverviewResourcesTable.tsx","../../core/src/overview/OverviewResourcesRoot.tsx","../../core/src/instigation/Unloadable.tsx","../../core/src/overview/OverviewSchedulesTable.tsx","../../core/src/overview/OverviewSchedulesRoot.tsx","../../core/src/overview/OverviewSensorsTable.tsx","../../core/src/overview/OverviewSensorsRoot.tsx","../../core/src/instance/NextTick.tsx","../../core/src/runs/useRunsForTimeline.tsx","../../core/src/overview/OverviewTimelineRoot.tsx","../../core/src/runs/useHourWindow.tsx","../../core/src/overview/OverviewRoot.tsx","../../core/src/ui/formatters.tsx"],"sourcesContent":["import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"timeline\" title=\"Timeline\" to=\"/overview/timeline\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './BackfillTable';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Page,\n  PageHeader,\n  Colors,\n  Box,\n  Tag,\n  Table,\n  Spinner,\n  Dialog,\n  Button,\n  DialogFooter,\n  ButtonLink,\n  DialogBody,\n} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {numberFormatter} from '../../ui/formatters';\n\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n  PartitionBackfillFragment,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {\n      variables: {backfillId},\n    },\n  );\n  const {data} = queryResult;\n\n  const backfill = data?.partitionBackfillOrError;\n  let isInProgress = true;\n  if (backfill && backfill.__typename === 'PartitionBackfill') {\n    // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n    isInProgress = backfill.status === BulkActionStatus.REQUESTED;\n  }\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!backfill || !data) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (backfill.__typename === 'PythonError') {\n      return <PythonErrorInfo error={backfill} />;\n    }\n\n    function getRunsUrl(status: 'requested' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'requested':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition Selection\"\n            detail={\n              <PartitionSelection\n                numPartitions={backfill.numPartitions || 0}\n                rootAssetTargetedPartitions={\n                  backfill.assetBackfillData?.rootAssetTargetedPartitions\n                }\n                rootAssetTargetedRanges={backfill.assetBackfillData?.rootAssetTargetedRanges}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<StatusLabel status={backfill.status} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <a href={getRunsUrl('targeted')}>Partitions targeted</a>\n              </th>\n              <th>\n                <a href={getRunsUrl('requested')}>Requested</a>\n              </th>\n              <th>\n                <a href={getRunsUrl('complete')}>Completed</a>\n              </th>\n              <th>\n                <a href={getRunsUrl('failed')}>Failed</a>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetPartitionsStatusCounts.map((asset) => (\n              <tr key={asset.assetKey.path.join('/')}>\n                <td>\n                  <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                    <div>\n                      <a href={assetDetailsPathForKey(asset.assetKey)}>\n                        {asset.assetKey.path.join('/')}\n                      </a>\n                    </div>\n                    <div>\n                      <StatusBar\n                        targeted={asset.numPartitionsTargeted}\n                        requested={asset.numPartitionsRequested}\n                        completed={asset.numPartitionsCompleted}\n                        failed={asset.numPartitionsFailed}\n                      />\n                    </div>\n                  </Box>\n                </td>\n                <td>{asset.numPartitionsTargeted}</td>\n                <td>{asset.numPartitionsRequested}</td>\n                <td>{asset.numPartitionsCompleted}</td>\n                <td>{asset.numPartitionsFailed}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <div style={{fontSize: '18px'}}>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </div>\n        }\n        right={isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nconst StatusLabel = ({status}: {status: BulkActionStatus}) => {\n  switch (status) {\n    case BulkActionStatus.CANCELED:\n      return <Tag intent=\"warning\">Canceled</Tag>;\n    case BulkActionStatus.COMPLETED:\n      return <Tag intent=\"success\">Completed</Tag>;\n    case BulkActionStatus.FAILED:\n      return <Tag intent=\"danger\">Failed</Tag>;\n    case BulkActionStatus.REQUESTED:\n      return (\n        <Tag intent=\"primary\" icon=\"spinner\">\n          Requested\n        </Tag>\n      );\n    default:\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n  }\n};\n\nfunction StatusBar({\n  targeted,\n  requested,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  requested: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * requested) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    assetBackfillData {\n      rootAssetTargetedRanges {\n        start\n        end\n      }\n      rootAssetTargetedPartitions\n      assetPartitionsStatusCounts {\n        assetKey {\n          path\n        }\n        numPartitionsTargeted\n        numPartitionsRequested\n        numPartitionsCompleted\n        numPartitionsFailed\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\ntype AssetBackfillData = Extract<\n  PartitionBackfillFragment['assetBackfillData'],\n  {__typename: 'AssetBackfillData'}\n>;\n\nexport const PartitionSelection = ({\n  numPartitions,\n  rootAssetTargetedRanges,\n  rootAssetTargetedPartitions,\n}: {\n  numPartitions: number;\n  rootAssetTargetedRanges?: AssetBackfillData['rootAssetTargetedRanges'];\n  rootAssetTargetedPartitions?: AssetBackfillData['rootAssetTargetedPartitions'];\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  let dialogContent: JSX.Element | undefined;\n  let content: JSX.Element | undefined;\n  if (rootAssetTargetedPartitions) {\n    if (rootAssetTargetedPartitions.length > 3) {\n      dialogContent = (\n        <div>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p} style={{maxWidth: '100px'}}>\n              <TruncatedTextWithFullTextOnHover text={p} />\n            </div>\n          ))}\n        </div>\n      );\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n    } else {\n      content = (\n        <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n          {rootAssetTargetedPartitions.map((p) => (\n            <div key={p}>{p}</div>\n          ))}\n        </Box>\n      );\n    }\n  } else {\n    if (rootAssetTargetedRanges?.length === 1) {\n      const {start, end} = rootAssetTargetedRanges[0];\n      content = (\n        <div>\n          {start}...{end}\n        </div>\n      );\n    } else {\n      content = (\n        <ButtonLink\n          onClick={() => {\n            setIsDialogOpen(true);\n          }}\n        >\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n      );\n      dialogContent = (\n        <Box flex={{direction: 'column', gap: 8}}>\n          {rootAssetTargetedRanges?.map((r) => (\n            <div key={`${r.start}:${r.end}`}>\n              {r.start}...{r.end}\n            </div>\n          ))}\n        </Box>\n      );\n    }\n  }\n\n  return (\n    <>\n      <div>{content}</div>\n      <Dialog isOpen={!!dialogContent && isDialogOpen} title=\"Partition selection\">\n        <DialogBody>{dialogContent}</DialogBody>\n        <DialogFooter topBorder>\n          <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Heading, NonIdealState, PageHeader, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {Alert, Box, Checkbox, Colors, Group, Table, Subheading, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewScheduleTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((name) => {\n          flat.push({type: 'schedule', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.scheduleCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No schedules were found in the selected code locations'\n                : 'No schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewScheduleTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by schedule name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name}) => name);\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; name: string};\n\nexport const OverviewSensorTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((name) => {\n          flat.push({type: 'sensor', repoAddress, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index];\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.name}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter((name) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewSensorTable repos={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 0 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by sensor name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: string[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const sensorNames = sensors.map(({name}) => name);\n\n      if (sensorNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors: sensorNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(({jobType}) => jobType === 'asset');\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce((accum, job) => {\n      const startTimes = job.runs.map((job) => job.startTime);\n      return {...accum, [job.key]: Math.min(...startTimes)};\n    }, {} as {[jobKey: string]: number});\n\n    return jobs.sort((a, b) => earliest[a.key] - earliest[b.key]);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {\n  PageHeader,\n  Heading,\n  Box,\n  TextInput,\n  Button,\n  ButtonGroup,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\nexport const OverviewTimelineRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(() => jobs.filter(({key}) => visibleJobKeys.has(key)), [\n    jobs,\n    visibleJobKeys,\n  ]);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"timeline\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagit.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(() => [hourWindow, setHourWindowWithDefault], [\n    hourWindow,\n    setHourWindowWithDefault,\n  ]);\n};\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/timeline\">\n        <OverviewTimelineRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/timeline\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","const compactFormatter = new Intl.NumberFormat(navigator.language, {\n  compactDisplay: 'short',\n  notation: 'compact',\n});\n\nexport const numberFormatter = new Intl.NumberFormat(navigator.language, {});\n\nexport const compactNumber = (num: number | bigint): string => compactFormatter.format(num);\n"],"names":["RepoFilterButton","React","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","isOpen","style","width","onClose","icon","label","options","onBrowse","onToggle","selected","padding","top","intent","onClick","name","rightIcon","length","OverviewTabs","props","refreshState","tab","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","bottom","QueryRefresh","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","partitionBackfillsOrError","__typename","results","PAGE_SIZE","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","Page","PageHeader","tabs","Loading","allowStaleData","PythonErrorInfo","error","vertical","NonIdealState","description","backfillHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","horizontal","BackfillTable","backfills","slice","refetch","marginTop","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","backfillId","useParams","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","status","BulkActionStatus","fontSize","color","Colors","right","testId","Spinner","purpose","getRunsUrl","filters","token","value","push","RunStatus","runsPathWithFilters","wrap","Detail","detail","Timestamp","timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","start","end","endTimestamp","PartitionSelection","numPartitions","rootAssetTargetedPartitions","assetBackfillData","rootAssetTargetedRanges","StatusLabel","Table","href","assetPartitionsStatusCounts","asset","assetDetailsPathForKey","assetKey","path","join","StatusBar","targeted","numPartitionsTargeted","requested","numPartitionsRequested","completed","numPartitionsCompleted","failed","numPartitionsFailed","content","gap","minWidth","Label","Tag","borderRadius","backgroundColor","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","styled","s","_","rerender","intervalId","setInterval","clearInterval","Date","now","formatDuration","dialogContent","isDialogOpen","setIsDialogOpen","p","maxWidth","text","ButtonLink","numberFormatter","r","Dialog","topBorder","Button","seconds","Math","floor","minutes","hours","days","trim","OverviewJobsTable","repos","parentRef","allKeys","repoAddress","repoAddressAsHumanString","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","flat","forEach","jobs","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","ii","row","overscan","totalHeight","getTotalSize","items","getVirtualItems","ref","$totalHeight","index","key","size","expanded","showLocation","has","rightElement","Tooltip","placement","VirtualizedJobRow","sortRepoBuckets","buckets","sort","a","b","aString","bString","localeCompare","visibleRepoKeys","Set","option","buildRepoAddress","repository","repositoryLocation","OverviewJobsRoot","useQueryPersistedState","queryKey","defaults","search","searchValue","setSearchValue","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","loading","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","grow","TextInput","onChange","e","target","placeholder","paddingTop","anyReposHidden","workspaceOrError","entries","locationEntries","entry","locationOrLoadError","repositories","repo","pipelines","isHiddenAssetGroupJob","pipeline","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","scheduleState","ScheduleStateRow","Alert","selectorId","ticks","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","toggleOffInFlight","confirm","useConfirmation","onChangeSwitch","InstigationStatus","jobOriginId","jobSelectorId","lacksPermission","latestTick","element","Checkbox","format","disabled","checked","DEFAULT_DISABLED_REASON","checkbox","Group","spacing","instigatorState","tick","instigationType","InstigationType","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","position","whiteSpace","humanCronString","OverviewScheduleTable","schedules","scheduleCount","VirtualizedScheduleRow","OverviewSchedulesRoot","OVERVIEW_SCHEDULES_QUERY","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","border","side","setIsOpen","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","sensorNames","SCHEDULE_FUTURE_TICKS_FRAGMENT","makeJobKey","jobName","RUN_TIMELINE_QUERY","RUN_TIME_FRAGMENT","ONE_HOUR","hourWindowToOffset","hourWindow","OverviewTimelineRoot","defaultValue","validate","useStateWithStorage","setHourWindow","setHourWindowWithDefault","useHourWindow","setNow","offsetMsec","setOffsetMsec","timer","onPageEarlier","onPageLater","onPageNow","range","LOOKAHEAD_HOURS","runsFilter","startSec","endSec","inProgressFilter","statuses","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","repositoryName","location","repositoryLocationName","pipelineName","jobsWithRuns","locationEntry","schedule","jobTicks","futureTicks","isAdHoc","jobKey","jobRuns","jobsAndTicksToAdd","adHocJobs","find","jobType","runs","workspacePipelinePath","repoName","repoLocation","earliest","reduce","accum","job","startTimes","min","useRunsForTimeline","visibleJobKeys","searchLower","flatMap","visibleJobs","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewRoot","exact","render","compactFormatter","Intl","NumberFormat","navigator","language","compactDisplay","notation","compactNumber","num"],"sourceRoot":""}