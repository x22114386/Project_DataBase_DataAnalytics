{"version":3,"file":"static/js/318.0dc4432b.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/AssetEdges.tsx","../../core/src/asset-graph/AssetGraphJobSidebar.tsx","../../core/src/assets/LastMaterializationMetadata.tsx","../../core/src/assets/AssetSidebarActivitySummary.tsx","../../core/src/asset-graph/SidebarAssetInfo.tsx","../../core/src/asset-graph/useFindAssetLocation.tsx","../../core/src/asset-graph/AssetGraphExplorer.tsx","../../core/src/asset-graph/AssetGroupNode.tsx","../../core/src/ui/markdownToPlaintext.ts","../../core/src/asset-graph/AssetNode.tsx","../../core/src/asset-graph/AssetRunLinking.tsx","../../core/src/asset-graph/ForeignNode.tsx","../../core/src/asset-graph/useAssetGraphData.tsx","../../core/src/asset-graph/useLiveDataForAssetKeys.tsx","../../core/src/assets/AssetConfig.tsx","../../core/src/assets/AssetDefinedInMultipleReposNotice.tsx","../../core/src/assets/AssetEventList.tsx","../../core/src/assets/AssetEventSystemTags.tsx","../../core/src/assets/AssetLineageElements.tsx","../../core/src/assets/AssetMaterializationGraphs.tsx","../../core/src/assets/AssetMetadata.tsx","../../core/src/assets/AssetNodePartitionCounts.tsx","../../core/src/assets/AssetPartitionList.tsx","../../core/src/assets/CurrentMinutesLateTag.tsx","../../core/src/assets/CurrentRunsBanner.tsx","../../core/src/assets/DependsOnSelfBanner.tsx","../../core/src/assets/FailedRunSinceMaterializationBanner.tsx","../../ui/src/components/Radio.tsx","../../core/src/assets/RunningBackfillsNotice.tsx","../../core/src/assets/LaunchAssetChoosePartitionsDialog.tsx","../../core/src/assets/LaunchAssetExecutionButton.tsx","../../core/src/assets/LaunchAssetObservationButton.tsx","../../core/src/assets/PartitionHealthSummary.tsx","../../core/src/assets/Stale.tsx","../../core/src/assets/UnderlyingOpsOrGraph.tsx","../../core/src/assets/groupByPartition.tsx","../../core/src/hooks/useSetStateUpdateCallback.tsx","../../core/src/assets/usePartitionDimensionSelections.tsx","../../core/src/assets/useRecentAssetEvents.tsx","../../core/src/launchpad/ConfigEditorConfigPicker.tsx","../../ui/src/components/ConfigEditorWithSchema.tsx","../../core/src/launchpad/LaunchpadTransientSessionContainer.tsx","../../core/src/launchpad/LaunchpadRoot.tsx","../../ui/src/components/configeditor/codemirror-yaml/lint.js","../../ui/src/components/ConfigEditor.tsx","../../ui/src/components/configeditor/isHelpContextEqual.ts","../../ui/src/components/configeditor/ConfigEditorHelp.tsx","../../core/src/configeditor/ConfigEditorUtils.tsx","../../core/src/launchpad/ConfigEditorModePicker.tsx","../../core/src/launchpad/OpSelector.tsx","../../core/src/launchpad/RunPreview.tsx","../../core/src/launchpad/scaffoldType.ts","../../core/src/launchpad/LaunchpadSession.tsx","../../core/src/launchpad/LaunchpadSessionError.tsx","../../core/src/launchpad/LaunchpadSessionLoading.tsx","../../core/src/launchpad/LoadingOverlay.tsx","../../core/src/launchpad/SessionSettingsBar.tsx","../../core/src/launchpad/TagEditor.tsx","../../core/src/partitions/CreatePartitionDialog.tsx","../../ui/src/components/TagSelector.tsx","../../core/src/partitions/DimensionRangeInput.tsx","../../core/src/partitions/DimensionRangeWizard.tsx","../../core/src/pipelines/NonIdealPipelineQueryResult.tsx","../../core/src/pipelines/useJobTitle.tsx","../../core/src/ui/ClearButton.tsx","../../core/src/versions/Version.tsx"],"sourcesContent":["import {Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {buildSVGPath} from './Utils';\nimport {AssetLayoutEdge} from './layout';\n\nexport const AssetEdges: React.FC<{\n  edges: AssetLayoutEdge[];\n  highlighted: string | null;\n  strokeWidth?: number;\n  baseColor?: string;\n}> = ({edges, highlighted, strokeWidth = 4, baseColor = Colors.KeylineGray}) => {\n  // Note: we render the highlighted edges twice, but it's so that the first item with\n  // all the edges in it can remain memoized.\n  return (\n    <React.Fragment>\n      <AssetEdgeSet color={baseColor} edges={edges} strokeWidth={strokeWidth} />\n      <AssetEdgeSet\n        color={Colors.Blue500}\n        edges={edges.filter(({fromId, toId}) => highlighted === fromId || highlighted === toId)}\n        strokeWidth={strokeWidth}\n      />\n    </React.Fragment>\n  );\n};\n\nconst AssetEdgeSet: React.FC<{\n  edges: AssetLayoutEdge[];\n  color: string;\n  strokeWidth: number;\n}> = React.memo(({edges, color, strokeWidth}) => (\n  <>\n    <defs>\n      <marker\n        id={`arrow${btoa(color)}`}\n        viewBox=\"0 0 8 10\"\n        refX=\"1\"\n        refY=\"5\"\n        markerUnits=\"strokeWidth\"\n        markerWidth={strokeWidth}\n        orient=\"auto\"\n      >\n        <path d=\"M 0 0 L 8 5 L 0 10 z\" fill={color} />\n      </marker>\n    </defs>\n    {edges.map((edge, idx) => (\n      <path\n        key={idx}\n        d={buildSVGPath({source: edge.from, target: edge.to})}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerEnd={`url(#arrow${btoa(color)})`}\n      />\n    ))}\n  </>\n));\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PipelineSelector} from '../graphql/types';\nimport {NonIdealPipelineQueryResult} from '../pipelines/NonIdealPipelineQueryResult';\nimport {\n  SidebarContainerOverview,\n  SIDEBAR_ROOT_CONTAINER_FRAGMENT,\n} from '../pipelines/SidebarContainerOverview';\nimport {Loading} from '../ui/Loading';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {\n  AssetGraphSidebarQuery,\n  AssetGraphSidebarQueryVariables,\n} from './types/AssetGraphJobSidebar.types';\n\nexport const AssetGraphJobSidebar: React.FC<{\n  pipelineSelector: PipelineSelector;\n}> = ({pipelineSelector}) => {\n  const queryResult = useQuery<AssetGraphSidebarQuery, AssetGraphSidebarQueryVariables>(\n    ASSET_GRAPH_JOB_SIDEBAR,\n    {\n      partialRefetch: true,\n      variables: {pipelineSelector},\n    },\n  );\n\n  const {repositoryName, repositoryLocationName} = pipelineSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph\n              result={pipelineSnapshotOrError}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n        return (\n          <SidebarContainerOverview container={pipelineSnapshotOrError} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst ASSET_GRAPH_JOB_SIDEBAR = gql`\n  query AssetGraphSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        ...SidebarRootContainerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${SIDEBAR_ROOT_CONTAINER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Group, Icon, Mono, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob, LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\nimport {MetadataEntry} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {StaleReasonsTags} from './Stale';\nimport {\n  AssetObservationFragment,\n  AssetMaterializationFragment,\n} from './types/useRecentAssetEvents.types';\n\nexport const LatestMaterializationMetadata: React.FC<{\n  assetKey: AssetKeyInput;\n  latest: AssetObservationFragment | AssetMaterializationFragment | undefined;\n  liveData: LiveDataForNode | undefined;\n}> = ({assetKey, latest, liveData}) => {\n  console.log(latest);\n  const latestRun = latest?.runOrError.__typename === 'Run' ? latest?.runOrError : null;\n  const repositoryOrigin = latestRun?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  if (!latest) {\n    return (\n      <Box padding={{top: 16, bottom: 32}}>\n        <NonIdealState\n          icon=\"materialization\"\n          title=\"No metadata\"\n          description=\"No metadata was found for this asset.\"\n        />\n      </Box>\n    );\n  }\n\n  const latestEvent = latest;\n  const latestAssetLineage =\n    latestEvent.__typename === 'MaterializationEvent' ? latestEvent?.assetLineage : [];\n\n  return (\n    <MetadataTable>\n      <tbody>\n        <tr>\n          <td>Run</td>\n          <td>\n            {latestRun ? (\n              <div>\n                <Box>\n                  {'Run '}\n                  <Link to={`/runs/${latestEvent.runId}?timestamp=${latestEvent.timestamp}`}>\n                    <Mono>{titleForRun({runId: latestEvent.runId})}</Mono>\n                  </Link>\n                </Box>\n                {!isHiddenAssetGroupJob(latestRun.pipelineName) && (\n                  <>\n                    <Box padding={{left: 8, top: 4}}>\n                      <PipelineReference\n                        showIcon\n                        pipelineName={latestRun.pipelineName}\n                        pipelineHrefContext={repoAddress || 'repo-unknown'}\n                        snapshotId={latestRun.pipelineSnapshotId}\n                        isJob={isThisThingAJob(repo, latestRun.pipelineName)}\n                      />\n                    </Box>\n                    <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n                      <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                      <Link to={linkToRunEvent(latestRun, latestEvent)}>{latestEvent.stepKey}</Link>\n                    </Group>\n                  </>\n                )}\n              </div>\n            ) : (\n              'No materialization events'\n            )}\n          </td>\n          <td />\n        </tr>\n        {latest?.partition ? (\n          <tr>\n            <td>Partition</td>\n            <td>{latest ? latest.partition : 'No materialization events'}</td>\n            <td />\n          </tr>\n        ) : null}\n        <tr>\n          <td>Timestamp</td>\n          <td>\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              {latestEvent ? (\n                <Timestamp timestamp={{ms: Number(latestEvent.timestamp)}} />\n              ) : (\n                'No materialization events'\n              )}\n              {liveData && (\n                <StaleReasonsTags assetKey={assetKey} liveData={liveData} include=\"all\" />\n              )}\n            </Box>\n          </td>\n          <td />\n        </tr>\n        {latestAssetLineage?.length ? (\n          <tr>\n            <td>Parent assets</td>\n            <td>\n              <AssetLineageElements\n                elements={latestAssetLineage}\n                timestamp={latestEvent.timestamp}\n              />\n            </td>\n            <td />\n          </tr>\n        ) : null}\n        {latestEvent?.metadataEntries.map((entry) => (\n          <tr key={`metadata-${entry.label}`}>\n            <td>{entry.label}</td>\n            <td>\n              <MetadataEntry\n                entry={entry}\n                expandSmallValues={true}\n                repoLocation={repoAddress?.location}\n              />\n            </td>\n            <td>{entry.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </MetadataTable>\n  );\n};\n\nconst MetadataTable = styled(Table)`\n  td:first-child {\n    white-space: nowrap;\n    width: 1px;\n    max-width: 400px;\n    word-break: break-word;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n","import {Body, Box, Colors, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\n\nimport {AssetEventSystemTags} from './AssetEventSystemTags';\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {CurrentMinutesLateTag, freshnessPolicyDescription} from './CurrentMinutesLateTag';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunSinceMaterializationBanner} from './FailedRunSinceMaterializationBanner';\nimport {LatestMaterializationMetadata} from './LastMaterializationMetadata';\nimport {useGroupedEvents} from './groupByPartition';\nimport {AssetKey} from './types';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  assetKey: AssetKey;\n  isSourceAsset: boolean;\n  liveData?: LiveDataForNode;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n\n  // This is passed in because we need to know whether to default to partition\n  // grouping /before/ loading all the data.\n  assetHasDefinedPartitions: boolean;\n}\n\nexport const AssetSidebarActivitySummary: React.FC<Props> = ({\n  assetKey,\n  assetLastMaterializedAt,\n  assetHasDefinedPartitions,\n  isSourceAsset,\n  liveData,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    refetch,\n    xAxis,\n  } = useRecentAssetEvents(assetKey, {}, {assetHasDefinedPartitions});\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n\n  const displayedEvent = isSourceAsset ? observations[0] : materializations[0];\n\n  React.useEffect(() => {\n    refetch();\n  }, [assetLastMaterializedAt, refetch]);\n\n  if (loading) {\n    return (\n      <Box padding={{vertical: 20}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n  return (\n    <>\n      {!assetHasDefinedPartitions && (\n        <>\n          <FailedRunSinceMaterializationBanner\n            run={liveData?.runWhichFailedToMaterialize || null}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          <CurrentRunsBanner\n            liveData={liveData}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n        </>\n      )}\n\n      {liveData?.freshnessPolicy && (\n        <SidebarSection title=\"Freshness policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'center'}}>\n            <CurrentMinutesLateTag liveData={liveData} />\n            <Body>{freshnessPolicyDescription(liveData.freshnessPolicy)}</Body>\n          </Box>\n        </SidebarSection>\n      )}\n\n      <SidebarSection\n        title={!isSourceAsset ? 'Materialization in last run' : 'Observation in last run'}\n      >\n        {displayedEvent ? (\n          <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n            <LatestMaterializationMetadata\n              assetKey={assetKey}\n              latest={displayedEvent}\n              liveData={liveData}\n            />\n          </div>\n        ) : (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            {!isSourceAsset ? `No materializations found` : `No observations found`}\n          </Box>\n        )}\n      </SidebarSection>\n      <SidebarSection\n        title={!isSourceAsset ? 'Materialization system tags' : 'Observation system tags'}\n        collapsedByDefault\n      >\n        {displayedEvent ? (\n          <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n            <AssetEventSystemTags event={displayedEvent} paddingLeft={24} />\n          </div>\n        ) : (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            {!isSourceAsset ? `No materializations found` : `No observations found`}\n          </Box>\n        )}\n      </SidebarSection>\n      <SidebarSection title=\"Metadata plots\">\n        <AssetMaterializationGraphs\n          xAxis={xAxis}\n          asSidebarSection\n          groups={grouped}\n          columnCount={1}\n        />\n      </SidebarSection>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, ConfigTypeSchema, Icon, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from '../assets/AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from '../assets/AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from '../assets/AssetMetadata';\nimport {AssetSidebarActivitySummary} from '../assets/AssetSidebarActivitySummary';\nimport {DependsOnSelfBanner} from '../assets/DependsOnSelfBanner';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {UnderlyingOpsOrGraph} from '../assets/UnderlyingOpsOrGraph';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  healthRefreshHintFromLiveData,\n  usePartitionHealthData,\n} from '../assets/usePartitionHealthData';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection, SidebarTitle} from '../pipelines/SidebarComponents';\nimport {ResourceContainer, ResourceHeader} from '../pipelines/SidebarOpHelpers';\nimport {pluginForMetadata} from '../plugins';\nimport {Version} from '../versions/Version';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LiveDataForNode, displayNameForAssetKey, GraphNode, nodeDependsOnSelf} from './Utils';\nimport {SidebarAssetQuery, SidebarAssetQueryVariables} from './types/SidebarAssetInfo.types';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\n\nexport const SidebarAssetInfo: React.FC<{\n  graphNode: GraphNode;\n  liveData?: LiveDataForNode;\n}> = ({graphNode, liveData}) => {\n  const {assetKey, definition} = graphNode;\n  const partitionHealthRefreshHint = healthRefreshHintFromLiveData(liveData);\n  const partitionHealthData = usePartitionHealthData(\n    [assetKey],\n    partitionHealthRefreshHint,\n    'background',\n  );\n  const {data} = useQuery<SidebarAssetQuery, SidebarAssetQueryVariables>(SIDEBAR_ASSET_QUERY, {\n    variables: {assetKey: {path: assetKey.path}},\n  });\n\n  const {lastMaterialization} = liveData || {};\n  const asset = data?.assetNodeOrError.__typename === 'AssetNode' ? data.assetNodeOrError : null;\n  if (!asset) {\n    return (\n      <>\n        <Header assetNode={definition} repoAddress={null} />\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  const repoAddress = buildRepoAddress(asset.repository.name, asset.repository.location.name);\n  const {assetMetadata, assetType} = metadataForAssetNode(asset);\n  const hasAssetMetadata = assetType || assetMetadata.length > 0;\n  const assetConfigSchema = asset.configField?.configType;\n\n  const OpMetadataPlugin = asset.op?.metadata && pluginForMetadata(asset.op.metadata);\n\n  return (\n    <>\n      <Header assetNode={definition} repoAddress={repoAddress} />\n\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetKey}\n        loadedFromRepo={repoAddress}\n        padded={false}\n      />\n\n      {(asset.description || OpMetadataPlugin?.SidebarComponent || !hasAssetMetadata) && (\n        <SidebarSection title=\"Description\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Description description={asset.description || 'No description provided.'} />\n          </Box>\n          {asset.op && OpMetadataPlugin?.SidebarComponent && (\n            <Box padding={{bottom: 16, horizontal: 24}}>\n              <OpMetadataPlugin.SidebarComponent definition={asset.op} repoAddress={repoAddress} />\n            </Box>\n          )}\n        </SidebarSection>\n      )}\n\n      <AssetSidebarActivitySummary\n        assetKey={assetKey}\n        assetLastMaterializedAt={lastMaterialization?.timestamp}\n        assetHasDefinedPartitions={!!asset.partitionDefinition}\n        isSourceAsset={definition.isSource}\n        liveData={liveData}\n      />\n\n      <div style={{borderBottom: `2px solid ${Colors.Gray300}`}} />\n\n      {nodeDependsOnSelf(graphNode) && <DependsOnSelfBanner />}\n\n      {asset.opVersion && (\n        <SidebarSection title=\"Code Version\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Version>{asset.opVersion}</Version>\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetConfigSchema && (\n        <SidebarSection title=\"Config\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <ConfigTypeSchema\n              type={assetConfigSchema}\n              typesInScope={assetConfigSchema.recursiveConfigTypes}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {asset.requiredResources.length > 0 && (\n        <SidebarSection title=\"Required Resources\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            {asset.requiredResources.map((resource) => (\n              <ResourceContainer key={resource.resourceKey}>\n                <Icon name=\"resource\" color={Colors.Gray700} />\n                {repoAddress ? (\n                  <Link\n                    to={workspacePathFromAddress(repoAddress, `/resources/${resource.resourceKey}`)}\n                  >\n                    <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                  </Link>\n                ) : (\n                  <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                )}\n              </ResourceContainer>\n            ))}\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetMetadata.length > 0 && (\n        <SidebarSection title=\"Metadata\">\n          <AssetMetadataTable assetMetadata={assetMetadata} repoLocation={repoAddress?.location} />\n        </SidebarSection>\n      )}\n\n      {assetType && <TypeSidebarSection assetType={assetType} />}\n\n      {asset.partitionDefinition && (\n        <SidebarSection title=\"Partitions\">\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 16}}>\n            <p>{asset.partitionDefinition.description}</p>\n            <PartitionHealthSummary assetKey={asset.assetKey} data={partitionHealthData} />\n          </Box>\n        </SidebarSection>\n      )}\n    </>\n  );\n};\n\nconst TypeSidebarSection: React.FC<{\n  assetType: DagsterTypeFragment;\n}> = ({assetType}) => {\n  return (\n    <SidebarSection title=\"Type\">\n      <DagsterTypeSummary type={assetType} />\n    </SidebarSection>\n  );\n};\n\nconst Header: React.FC<{\n  assetNode: AssetNodeForGraphQueryFragment;\n  opName?: string;\n  repoAddress?: RepoAddress | null;\n}> = ({assetNode, repoAddress}) => {\n  const displayName = displayNameForAssetKey(assetNode.assetKey);\n\n  return (\n    <Box flex={{gap: 4, direction: 'column'}} margin={{left: 24, right: 12, vertical: 16}}>\n      <SidebarTitle\n        style={{\n          marginBottom: 0,\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <Box>{displayName}</Box>\n      </SidebarTitle>\n      <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n        <AssetCatalogLink to={assetDetailsPathForKey(assetNode.assetKey)}>\n          {'View in Asset Catalog '}\n          <Icon name=\"open_in_new\" color={Colors.Link} />\n        </AssetCatalogLink>\n\n        {repoAddress && (\n          <UnderlyingOpsOrGraph assetNode={assetNode} repoAddress={repoAddress} minimal />\n        )}\n      </Box>\n    </Box>\n  );\n};\nconst AssetCatalogLink = styled(Link)`\n  display: flex;\n  gap: 5px;\n  padding: 6px;\n  margin: -6px;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst SIDEBAR_ASSET_FRAGMENT = gql`\n  fragment SidebarAssetFragment on AssetNode {\n    id\n    description\n    ...AssetNodeConfigFragment\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    partitionDefinition {\n      description\n    }\n    assetKey {\n      path\n    }\n    op {\n      name\n      description\n      metadata {\n        key\n        value\n      }\n    }\n    opVersion\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n\n    ...AssetNodeOpMetadataFragment\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n`;\n\nexport const SIDEBAR_ASSET_QUERY = gql`\n  query SidebarAssetQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      __typename\n      ... on AssetNode {\n        id\n        ...SidebarAssetFragment\n      }\n    }\n  }\n\n  ${SIDEBAR_ASSET_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport React from 'react';\n\nimport {AssetKey} from '../assets/types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\n\nimport {isHiddenAssetGroupJob} from './Utils';\nimport {\n  AssetForNavigationQuery,\n  AssetForNavigationQueryVariables,\n} from './types/useFindAssetLocation.types';\n\nexport interface AssetLocation {\n  assetKey: AssetKey;\n  opNames: string[];\n  jobName: string | null;\n  groupName: string | null;\n  repoAddress: RepoAddress | null;\n}\n\nexport function useFindAssetLocation() {\n  const apollo = useApolloClient();\n\n  return React.useCallback(\n    async (key: AssetKeyInput): Promise<AssetLocation> => {\n      const {data} = await apollo.query<AssetForNavigationQuery, AssetForNavigationQueryVariables>({\n        query: ASSET_FOR_NAVIGATION_QUERY,\n        variables: {key},\n      });\n      if (data?.assetOrError.__typename === 'Asset' && data?.assetOrError.definition) {\n        const def = data.assetOrError.definition;\n        return {\n          assetKey: key,\n          opNames: def.opNames,\n          jobName: def.jobNames.find((jobName) => !isHiddenAssetGroupJob(jobName)) || null,\n          groupName: def.groupName,\n          repoAddress: def.repository\n            ? buildRepoAddress(def.repository.name, def.repository.location.name)\n            : null,\n        };\n      }\n      return {assetKey: key, opNames: [], jobName: null, groupName: null, repoAddress: null};\n    },\n    [apollo],\n  );\n}\n\nconst ASSET_FOR_NAVIGATION_QUERY = gql`\n  query AssetForNavigationQuery($key: AssetKeyInput!) {\n    assetOrError(assetKey: $key) {\n      __typename\n      ... on Asset {\n        id\n        definition {\n          id\n          opNames\n          jobNames\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  Box,\n  Checkbox,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport pickBy from 'lodash/pickBy';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {LaunchAssetObservationButton} from '../assets/LaunchAssetObservationButton';\nimport {AssetKey} from '../assets/types';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {closestNodeInDirection} from '../graph/common';\nimport {\n  GraphExplorerOptions,\n  OptionsOverlay,\n  QueryOverlay,\n  RightInfoPanel,\n  RightInfoPanelContent,\n} from '../pipelines/GraphExplorer';\nimport {\n  EmptyDAGNotice,\n  EntirelyFilteredDAGNotice,\n  LargeDAGNotice,\n  LoadingNotice,\n} from '../pipelines/GraphNotices';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Loading} from '../ui/Loading';\n\nimport {AssetEdges} from './AssetEdges';\nimport {AssetGraphJobSidebar} from './AssetGraphJobSidebar';\nimport {AssetGroupNode} from './AssetGroupNode';\nimport {AssetNode, AssetNodeMinimal} from './AssetNode';\nimport {AssetNodeLink} from './ForeignNode';\nimport {SidebarAssetInfo} from './SidebarAssetInfo';\nimport {GraphData, graphHasCycles, LiveData, GraphNode, tokenForAssetKey} from './Utils';\nimport {AssetGraphLayout} from './layout';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\nimport {AssetGraphFetchScope, AssetGraphQueryItem, useAssetGraphData} from './useAssetGraphData';\nimport {AssetLocation, useFindAssetLocation} from './useFindAssetLocation';\nimport {useLiveDataForAssetKeys} from './useLiveDataForAssetKeys';\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\ninterface Props {\n  options: GraphExplorerOptions;\n  setOptions?: (options: GraphExplorerOptions) => void;\n\n  fetchOptions: AssetGraphFetchScope;\n  fetchOptionFilters?: React.ReactNode;\n\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n}\n\nexport const MINIMAL_SCALE = 0.6;\nexport const GROUPS_ONLY_SCALE = 0.15;\n\nexport const AssetGraphExplorer: React.FC<Props> = (props) => {\n  const {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = useAssetGraphData(props.explorerPath.opsQuery, props.fetchOptions);\n\n  const {liveDataByNode, liveDataRefreshState, runWatchers} = useLiveDataForAssetKeys(\n    graphAssetKeys,\n  );\n\n  return (\n    <Loading allowStaleData queryResult={fetchResult}>\n      {() => {\n        if (!assetGraphData || !allAssetKeys) {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" />;\n        }\n\n        const hasCycles = graphHasCycles(assetGraphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Cycle detected\"\n              description=\"Assets dependencies form a cycle\"\n            />\n          );\n        }\n        return (\n          <>\n            <AssetGraphExplorerWithData\n              key={props.explorerPath.pipelineName}\n              assetGraphData={assetGraphData}\n              allAssetKeys={allAssetKeys}\n              graphQueryItems={graphQueryItems}\n              applyingEmptyDefault={applyingEmptyDefault}\n              liveDataRefreshState={liveDataRefreshState}\n              liveDataByNode={liveDataByNode}\n              {...props}\n            />\n            {runWatchers}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\ntype WithDataProps = {\n  allAssetKeys: AssetKey[];\n  assetGraphData: GraphData;\n  graphQueryItems: AssetGraphQueryItem[];\n  liveDataByNode: LiveData;\n  liveDataRefreshState: QueryRefreshState;\n  applyingEmptyDefault: boolean;\n} & Props;\n\nconst AssetGraphExplorerWithData: React.FC<WithDataProps> = ({\n  options,\n  setOptions,\n  explorerPath,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode: onNavigateToSourceAssetNode,\n  liveDataRefreshState,\n  liveDataByNode,\n  assetGraphData,\n  graphQueryItems,\n  applyingEmptyDefault,\n  fetchOptions,\n  fetchOptionFilters,\n}) => {\n  const findAssetLocation = useFindAssetLocation();\n  const {layout, loading, async} = useAssetLayout(assetGraphData);\n  const viewportEl = React.useRef<SVGViewport>();\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const selectedAssetValues = explorerPath.opNames[explorerPath.opNames.length - 1].split(',');\n  const selectedGraphNodes = Object.values(assetGraphData.nodes).filter((node) =>\n    selectedAssetValues.includes(tokenForAssetKey(node.definition.assetKey)),\n  );\n  const lastSelectedNode = selectedGraphNodes[selectedGraphNodes.length - 1];\n\n  const selectedDefinitions = selectedGraphNodes.map((a) => a.definition);\n  const allDefinitionsForMaterialize = applyingEmptyDefault\n    ? graphQueryItems.map((a) => a.node)\n    : Object.values(assetGraphData.nodes).map((a) => a.definition);\n\n  const onSelectNode = React.useCallback(\n    async (\n      e: React.MouseEvent<any> | React.KeyboardEvent<any>,\n      assetKey: {path: string[]},\n      node: GraphNode | null,\n    ) => {\n      e.stopPropagation();\n\n      const token = tokenForAssetKey(assetKey);\n      const nodeIsInDisplayedGraph = node?.definition;\n\n      if (!nodeIsInDisplayedGraph) {\n        // The asset's definition was not provided in our query for job.assetNodes. It's either\n        // in another job or asset group, or is a source asset not defined in any repository.\n        return onNavigateToSourceAssetNode(await findAssetLocation(assetKey));\n      }\n\n      // This asset is in a job and we can stay in the job graph explorer!\n      // If it's in our current job, allow shift / meta multi-selection.\n      let nextOpsNameSelection = token;\n\n      if (e.shiftKey || e.metaKey) {\n        let tokensToAdd = [token];\n        if (e.shiftKey && lastSelectedNode && node) {\n          const tokensInRange = opsInRange({\n            graph: assetGraphData,\n            from: lastSelectedNode,\n            to: node,\n          });\n          if (tokensInRange.length) {\n            tokensToAdd = tokensInRange;\n          }\n        }\n\n        const existing = explorerPath.opNames[0].split(',');\n        nextOpsNameSelection = (existing.includes(token)\n          ? without(existing, token)\n          : uniq([...existing, ...tokensToAdd])\n        ).join(',');\n      }\n\n      const nextCenter = layout?.nodes[nextOpsNameSelection[nextOpsNameSelection.length - 1]];\n      if (nextCenter) {\n        viewportEl.current?.zoomToSVGCoords(nextCenter.bounds.x, nextCenter.bounds.y, true);\n      }\n\n      onChangeExplorerPath(\n        {\n          ...explorerPath,\n          opNames: [nextOpsNameSelection],\n          opsQuery: nodeIsInDisplayedGraph\n            ? explorerPath.opsQuery\n            : `${explorerPath.opsQuery},++\"${token}\"++`,\n          pipelineName: explorerPath.pipelineName,\n        },\n        'replace',\n      );\n    },\n    [\n      explorerPath,\n      onChangeExplorerPath,\n      onNavigateToSourceAssetNode,\n      findAssetLocation,\n      lastSelectedNode,\n      assetGraphData,\n      layout,\n    ],\n  );\n\n  const [lastRenderedLayout, setLastRenderedLayout] = React.useState<AssetGraphLayout | null>(null);\n  const renderingNewLayout = lastRenderedLayout !== layout;\n\n  React.useEffect(() => {\n    if (!renderingNewLayout || !layout || !viewportEl.current) {\n      return;\n    }\n    // The first render where we have our layout and viewport, autocenter or\n    // focus on the selected node. (If selection was specified in the URL).\n    // Don't animate this change.\n    if (lastSelectedNode) {\n      // viewportEl.current.zoomToSVGBox(layout.nodes[lastSelectedNode.id].bounds, false);\n      viewportEl.current.focus();\n    } else {\n      viewportEl.current.autocenter(false);\n    }\n    setLastRenderedLayout(layout);\n  }, [renderingNewLayout, lastSelectedNode, layout, viewportEl]);\n\n  const onClickBackground = () =>\n    onChangeExplorerPath(\n      {...explorerPath, pipelineName: explorerPath.pipelineName, opNames: []},\n      'replace',\n    );\n\n  const onArrowKeyDown = (e: React.KeyboardEvent<any>, dir: string) => {\n    if (!layout) {\n      return;\n    }\n    const hasDefinition = (node: {id: string}) => !!assetGraphData.nodes[node.id]?.definition;\n    const layoutWithoutExternalLinks = {...layout, nodes: pickBy(layout.nodes, hasDefinition)};\n\n    const nextId = closestNodeInDirection(layoutWithoutExternalLinks, lastSelectedNode.id, dir);\n    const node = nextId && assetGraphData.nodes[nextId];\n    if (node && viewportEl.current) {\n      onSelectNode(e, node.assetKey, node);\n      viewportEl.current.zoomToSVGBox(layout.nodes[nextId].bounds, true);\n    }\n  };\n\n  const allowGroupsOnlyZoomLevel = !!(layout && Object.keys(layout.groups).length);\n\n  return (\n    <SplitPanelContainer\n      identifier=\"explorer\"\n      firstInitialPercent={70}\n      firstMinSize={400}\n      first={\n        <ErrorBoundary region=\"graph\">\n          {graphQueryItems.length === 0 ? (\n            <EmptyDAGNotice nodeType=\"asset\" isGraph />\n          ) : applyingEmptyDefault ? (\n            <LargeDAGNotice nodeType=\"asset\" />\n          ) : Object.keys(assetGraphData.nodes).length === 0 ? (\n            <EntirelyFilteredDAGNotice nodeType=\"asset\" />\n          ) : undefined}\n          {loading || !layout ? (\n            <LoadingNotice async={async} nodeType=\"asset\" />\n          ) : (\n            <SVGViewport\n              ref={(r) => (viewportEl.current = r || undefined)}\n              interactor={SVGViewport.Interactors.PanAndZoom}\n              graphWidth={layout.width}\n              graphHeight={layout.height}\n              graphHasNoMinimumZoom={allowGroupsOnlyZoomLevel}\n              onClick={onClickBackground}\n              onArrowKeyDown={onArrowKeyDown}\n              onDoubleClick={(e) => {\n                viewportEl.current?.autocenter(true);\n                e.stopPropagation();\n              }}\n              maxZoom={1.2}\n              maxAutocenterZoom={1.0}\n            >\n              {({scale}) => (\n                <SVGContainer width={layout.width} height={layout.height}>\n                  <AssetEdges\n                    highlighted={highlighted}\n                    edges={layout.edges}\n                    strokeWidth={allowGroupsOnlyZoomLevel ? Math.max(4, 3 / scale) : 4}\n                    baseColor={\n                      allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE\n                        ? Colors.Gray400\n                        : Colors.KeylineGray\n                    }\n                  />\n\n                  {Object.values(layout.groups)\n                    .sort((a, b) => a.id.length - b.id.length)\n                    .map((group) => (\n                      <foreignObject\n                        key={group.id}\n                        {...group.bounds}\n                        onDoubleClick={(e) => {\n                          if (!viewportEl.current) {\n                            return;\n                          }\n                          const targetScale = viewportEl.current.scaleForSVGBounds(\n                            group.bounds.width,\n                            group.bounds.height,\n                          );\n                          viewportEl.current.zoomToSVGBox(group.bounds, true, targetScale * 0.9);\n                          e.stopPropagation();\n                        }}\n                      >\n                        <AssetGroupNode group={group} scale={scale} />\n                      </foreignObject>\n                    ))}\n\n                  {Object.values(layout.nodes).map(({id, bounds}) => {\n                    const graphNode = assetGraphData.nodes[id];\n                    const path = JSON.parse(id);\n                    if (allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE) {\n                      return;\n                    }\n                    return (\n                      <foreignObject\n                        {...bounds}\n                        key={id}\n                        onMouseEnter={() => setHighlighted(id)}\n                        onMouseLeave={() => setHighlighted(null)}\n                        onClick={(e) => onSelectNode(e, {path}, graphNode)}\n                        onDoubleClick={(e) => {\n                          viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                          e.stopPropagation();\n                        }}\n                        style={{overflow: 'visible'}}\n                      >\n                        {!graphNode ? (\n                          <AssetNodeLink assetKey={{path}} />\n                        ) : scale < MINIMAL_SCALE ? (\n                          <AssetNodeMinimal\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        ) : (\n                          <AssetNode\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        )}\n                      </foreignObject>\n                    );\n                  })}\n                </SVGContainer>\n              )}\n            </SVGViewport>\n          )}\n          {setOptions && (\n            <OptionsOverlay>\n              <Checkbox\n                format=\"switch\"\n                label=\"View as Asset Graph\"\n                checked={options.preferAssetRendering}\n                onChange={() => {\n                  onChangeExplorerPath(\n                    {...explorerPath, opNames: selectedDefinitions[0]?.opNames || []},\n                    'replace',\n                  );\n                  setOptions({\n                    ...options,\n                    preferAssetRendering: !options.preferAssetRendering,\n                  });\n                }}\n              />\n            </OptionsOverlay>\n          )}\n\n          <Box\n            flex={{direction: 'column', alignItems: 'flex-end', gap: 8}}\n            style={{position: 'absolute', right: 12, top: 8}}\n          >\n            <Box flex={{alignItems: 'center', gap: 12}}>\n              <QueryRefreshCountdown\n                refreshState={liveDataRefreshState}\n                dataDescription=\"materializations\"\n              />\n              <LaunchAssetObservationButton\n                preferredJobName={explorerPath.pipelineName}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions.filter((a) => a.isObservable)}\n                    : {all: allDefinitionsForMaterialize.filter((a) => a.isObservable)}\n                }\n              />\n              <LaunchAssetExecutionButton\n                preferredJobName={explorerPath.pipelineName}\n                liveDataForStale={liveDataByNode}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions}\n                    : {all: allDefinitionsForMaterialize}\n                }\n              />\n            </Box>\n          </Box>\n          <QueryOverlay>\n            {fetchOptionFilters}\n\n            <GraphQueryInput\n              items={graphQueryItems}\n              value={explorerPath.opsQuery}\n              placeholder=\"Type an asset subset…\"\n              onChange={(opsQuery) => onChangeExplorerPath({...explorerPath, opsQuery}, 'replace')}\n              popoverPosition=\"bottom-left\"\n            />\n          </QueryOverlay>\n        </ErrorBoundary>\n      }\n      second={\n        selectedGraphNodes.length === 1 && selectedGraphNodes[0] ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset sidebar\" resetErrorOnChange={[selectedGraphNodes[0].id]}>\n                <SidebarAssetInfo\n                  graphNode={selectedGraphNodes[0]}\n                  liveData={liveDataByNode[selectedGraphNodes[0].id]}\n                />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : fetchOptions.pipelineSelector ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset job sidebar\">\n                <AssetGraphJobSidebar pipelineSelector={fetchOptions.pipelineSelector} />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : null\n      }\n    />\n  );\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n\n// Helpers\n\nconst graphDirectionOf = ({\n  graph,\n  from,\n  to,\n}: {\n  graph: GraphData;\n  from: GraphNode;\n  to: GraphNode;\n}) => {\n  const stack = [from];\n  while (stack.length) {\n    const node = stack.pop()!;\n\n    const downstream = [...Object.keys(graph.downstream[node.id] || {})]\n      .map((n) => graph.nodes[n])\n      .filter(Boolean);\n    if (downstream.some((d) => d.id === to.id)) {\n      return 'downstream';\n    }\n    stack.push(...downstream);\n  }\n  return 'upstream';\n};\n\nconst opsInRange = (\n  {graph, from, to}: {graph: GraphData; from: GraphNode; to: GraphNode},\n  seen: string[] = [],\n) => {\n  if (!from) {\n    return [];\n  }\n  if (from.id === to.id) {\n    return [...to.definition.opNames];\n  }\n\n  if (seen.length === 0 && graphDirectionOf({graph, from, to}) === 'upstream') {\n    [from, to] = [to, from];\n  }\n\n  const downstream = [...Object.keys(graph.downstream[from.id] || {})]\n    .map((n) => graph.nodes[n])\n    .filter(Boolean);\n\n  const ledToTarget: string[] = [];\n\n  for (const node of downstream) {\n    if (seen.includes(node.id)) {\n      continue;\n    }\n    const result: string[] = opsInRange({graph, from: node, to}, [...seen, from.id]);\n    if (result.length) {\n      ledToTarget.push(...from.definition.opNames, ...result);\n    }\n  }\n  return uniq(ledToTarget);\n};\n","import {Box, Colors, FontFamily, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {workspacePath} from '../workspace/workspacePath';\n\nimport {MINIMAL_SCALE, GROUPS_ONLY_SCALE} from './AssetGraphExplorer';\nimport {GroupLayout} from './layout';\n\nexport const AssetGroupNode: React.FC<{group: GroupLayout; scale: number}> = ({group, scale}) => {\n  const {\n    repositoryLocationName,\n    repositoryDisambiguationRequired,\n    repositoryName,\n    groupName,\n  } = group;\n\n  return (\n    <div style={{position: 'relative', width: '100%', height: '100%'}}>\n      {scale > GROUPS_ONLY_SCALE && (\n        <Box flex={{alignItems: 'flex-end'}} style={{height: 70}}>\n          <Mono\n            style={{\n              fontWeight: 600,\n              userSelect: 'none',\n              fontSize: scale > MINIMAL_SCALE ? '16px' : '32px',\n              display: 'flex',\n              gap: 6,\n            }}\n          >\n            <Icon\n              name=\"asset_group\"\n              color={Colors.Gray400}\n              size={scale > MINIMAL_SCALE ? 20 : 48}\n            />\n            <Box flex={{direction: 'column'}}>\n              <Link\n                style={{color: Colors.Gray400}}\n                onClick={(e) => e.stopPropagation()}\n                to={workspacePath(\n                  repositoryName,\n                  repositoryLocationName,\n                  `/asset-groups/${groupName}`,\n                )}\n              >\n                {groupName}\n              </Link>\n              {repositoryDisambiguationRequired && (\n                <GroupRepoName style={{marginBottom: '0.5em'}}>\n                  {withMiddleTruncation(\n                    buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                    {\n                      maxLength: 45,\n                    },\n                  )}\n                </GroupRepoName>\n              )}\n            </Box>\n          </Mono>\n        </Box>\n      )}\n\n      <GroupOutline\n        style={{\n          inset: 0,\n          top: 75,\n          position: 'absolute',\n          background:\n            scale < GROUPS_ONLY_SCALE ? `rgba(234, 234, 234, 1)` : `rgba(217, 217, 217, 0.25)`,\n        }}\n      />\n\n      {scale < GROUPS_ONLY_SCALE ? (\n        <Box\n          flex={{justifyContent: 'center', alignItems: 'center'}}\n          style={{inset: 0, position: 'absolute', fontSize: `${12 / scale}px`, userSelect: 'none'}}\n        >\n          <Box\n            flex={{direction: 'column', alignItems: 'center'}}\n            style={{fontWeight: 600, fontFamily: FontFamily.monospace}}\n          >\n            {groupName}\n            {repositoryDisambiguationRequired && (\n              <GroupRepoName>\n                {withMiddleTruncation(\n                  buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                  {\n                    maxLength: 45,\n                  },\n                )}\n              </GroupRepoName>\n            )}\n          </Box>\n        </Box>\n      ) : undefined}\n    </div>\n  );\n};\n\nconst GroupOutline = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  pointer-events: none;\n`;\n\nconst GroupRepoName = styled.div`\n  font-size: 0.8em;\n  line-height: 0.6em;\n  white-space: nowrap;\n  color: ${Colors.Gray400};\n`;\n","import LRUCache from 'lru-cache';\nimport {remark} from 'remark';\nimport gfm from 'remark-gfm';\nimport toPlainText from 'remark-plain-text';\n\nconst Remark = remark()\n  .use(gfm)\n  .use(toPlainText as any);\nconst markdownCache = new LRUCache<string, string>({max: 500});\nexport const markdownToPlaintext = (md: string) => {\n  // Compile the Markdown file to plain text:\n  const cached = markdownCache.get(md);\n  if (cached) {\n    return cached;\n  }\n\n  // Clean up escaping left behind.\n  const str = Remark.processSync(md).toString().replace(/\\\\/g, '').trim();\n  markdownCache.set(md, str);\n\n  return str;\n};\n","import {gql} from '@apollo/client';\nimport {Colors, Icon, FontFamily, Box, Spinner, Tooltip, Body} from '@dagster-io/ui';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {\n  PartitionCountTags,\n  StyleForAssetPartitionStatus,\n  partitionCountString,\n} from '../assets/AssetNodePartitionCounts';\nimport {AssetPartitionStatusDot} from '../assets/AssetPartitionList';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {humanizedLateString, isAssetLate} from '../assets/CurrentMinutesLateTag';\nimport {StaleReasonsTags} from '../assets/Stale';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetComputeKindTag} from '../graph/OpTags';\nimport {AssetKey} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {markdownToPlaintext} from '../ui/markdownToPlaintext';\n\nimport {AssetLatestRunSpinner, AssetRunLink} from './AssetRunLinking';\nimport {LiveDataForNode} from './Utils';\nimport {ASSET_NODE_NAME_MAX_LENGTH} from './layout';\nimport {AssetNodeFragment} from './types/AssetNode.types';\n\nexport const AssetNode: React.FC<{\n  definition: AssetNodeFragment;\n  liveData?: LiveDataForNode;\n  selected: boolean;\n}> = React.memo(({definition, selected, liveData}) => {\n  const displayName = definition.assetKey.path[definition.assetKey.path.length - 1];\n  const isSource = definition.isSource;\n\n  return (\n    <AssetInsetForHoverEffect>\n      <AssetTopTags definition={definition} liveData={liveData} />\n      <AssetNodeContainer $selected={selected}>\n        <AssetNodeBox $selected={selected} $isSource={isSource}>\n          <Name $isSource={isSource}>\n            <span style={{marginTop: 1}}>\n              <Icon name={isSource ? 'source_asset' : 'asset'} />\n            </span>\n            <div style={{overflow: 'hidden', textOverflow: 'ellipsis'}}>\n              {withMiddleTruncation(displayName, {\n                maxLength: ASSET_NODE_NAME_MAX_LENGTH,\n              })}\n            </div>\n            <div style={{flex: 1}} />\n          </Name>\n          <Box\n            style={{padding: '6px 8px'}}\n            flex={{direction: 'column', gap: 4}}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          >\n            {definition.description ? (\n              <Description $color={Colors.Gray800}>\n                {markdownToPlaintext(definition.description).split('\\n')[0]}\n              </Description>\n            ) : (\n              <Description $color={Colors.Gray400}>No description</Description>\n            )}\n            {definition.isPartitioned && (\n              <PartitionCountTags definition={definition} liveData={liveData} />\n            )}\n            <StaleReasonsTags liveData={liveData} assetKey={definition.assetKey} include=\"self\" />\n          </Box>\n\n          {isSource && !definition.isObservable ? null : (\n            <AssetNodeStatusRow definition={definition} liveData={liveData} />\n          )}\n          <AssetComputeKindTag definition={definition} style={{right: -2, paddingTop: 7}} />\n        </AssetNodeBox>\n      </AssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n}, isEqual);\n\nconst AssetTopTags: React.FC<{\n  definition: AssetNodeFragment;\n  liveData?: LiveDataForNode;\n}> = ({definition, liveData}) => (\n  <Box flex={{gap: 4}} padding={{left: 4}} style={{height: 24}}>\n    <StaleReasonsTags liveData={liveData} assetKey={definition.assetKey} include=\"upstream\" />\n  </Box>\n);\n\nconst AssetNodeStatusBox: React.FC<{background: string; children: React.ReactNode}> = ({\n  background,\n  children,\n}) => (\n  <Box\n    padding={{horizontal: 8}}\n    style={{\n      borderBottomLeftRadius: 6,\n      borderBottomRightRadius: 6,\n      whiteSpace: 'nowrap',\n      lineHeight: '12px',\n      fontSize: 12,\n      height: 24,\n    }}\n    flex={{justifyContent: 'space-between', alignItems: 'center', gap: 6}}\n    background={background}\n  >\n    {children}\n  </Box>\n);\n\ninterface StatusRowProps {\n  definition: AssetNodeFragment;\n  liveData: LiveDataForNode | undefined;\n}\n\nconst AssetNodeStatusRow: React.FC<StatusRowProps> = (props) => {\n  const {content, background} = buildAssetNodeStatusContent(props);\n  return <AssetNodeStatusBox background={background}>{content}</AssetNodeStatusBox>;\n};\n\nfunction getStepKey(definition: {opNames: string[]}) {\n  // Used for linking to the run with this step highlighted. We only support highlighting\n  // a single step, so just use the first one.\n  const firstOp = definition.opNames.length ? definition.opNames[0] : null;\n  return firstOp || '';\n}\n\nexport function buildAssetNodeStatusContent({\n  definition,\n  liveData,\n  expanded,\n}: {\n  definition: {assetKey: AssetKey; opNames: string[]; isSource: boolean; isObservable: boolean};\n  liveData: LiveDataForNode | null | undefined;\n  expanded?: boolean;\n}) {\n  if (!liveData) {\n    return {\n      background: Colors.Gray100,\n      border: Colors.Gray300,\n      content: (\n        <>\n          <Spinner purpose=\"caption-text\" />\n          <span style={{flex: 1, color: Colors.Gray800}}>Loading...</span>\n        </>\n      ),\n    };\n  }\n\n  const {\n    lastMaterialization,\n    runWhichFailedToMaterialize,\n    inProgressRunIds,\n    unstartedRunIds,\n  } = liveData;\n\n  const materializingRunId = inProgressRunIds[0] || unstartedRunIds[0];\n  const late = isAssetLate(liveData);\n\n  if (definition.isSource) {\n    if (materializingRunId) {\n      return {\n        background: Colors.Gray100,\n        border: Colors.Gray300,\n        content: (\n          <>\n            <AssetLatestRunSpinner liveData={liveData} />\n            <span style={{flex: 1}} color={Colors.Gray800}>\n              Observing...\n            </span>\n            {expanded && <SpacerDot />}\n            <AssetRunLink runId={materializingRunId} />\n          </>\n        ),\n      };\n    }\n    if (liveData?.lastObservation) {\n      return {\n        background: Colors.Gray100,\n        border: Colors.Gray300,\n        content: (\n          <>\n            {expanded && <AssetPartitionStatusDot status={[AssetPartitionStatus.MISSING]} />}\n            <span>Observed</span>\n            {expanded && <SpacerDot />}\n            <span style={{textAlign: 'right', overflow: 'hidden'}}>\n              <AssetRunLink\n                runId={liveData.lastObservation.runId}\n                event={{\n                  stepKey: getStepKey(definition),\n                  timestamp: liveData.lastObservation.timestamp,\n                }}\n              >\n                <TimestampDisplay\n                  timestamp={Number(liveData.lastObservation.timestamp) / 1000}\n                  timeFormat={{showSeconds: false, showTimezone: false}}\n                />\n              </AssetRunLink>\n            </span>\n          </>\n        ),\n      };\n    }\n    if (definition.isObservable) {\n      return {\n        background: Colors.Gray100,\n        border: Colors.Gray300,\n        content: (\n          <>\n            {expanded && (\n              <Icon\n                name=\"partition_missing\"\n                color={Colors.Gray300}\n                style={{marginRight: -2}}\n                size={12}\n              />\n            )}\n            <span>Never observed</span>\n            {!expanded && <span>–</span>}\n          </>\n        ),\n      };\n    }\n\n    return {\n      background: Colors.Gray100,\n      border: Colors.Gray300,\n      content: <span>–</span>,\n    };\n  }\n\n  if (materializingRunId) {\n    // Note: this value is undefined for unpartitioned assets\n    const numMaterializing = liveData.partitionStats?.numMaterializing;\n\n    return {\n      background: Colors.Blue50,\n      border: Colors.Blue500,\n      content: (\n        <>\n          <AssetLatestRunSpinner liveData={liveData} />\n          <span style={{flex: 1}} color={Colors.Gray800}>\n            {numMaterializing === 1\n              ? `Materializing 1 partition...`\n              : numMaterializing\n              ? `Materializing ${numMaterializing} partitions...`\n              : `Materializing...`}\n          </span>\n          {expanded && <SpacerDot />}\n          {!numMaterializing || numMaterializing === 1 ? (\n            <AssetRunLink runId={materializingRunId} />\n          ) : undefined}\n        </>\n      ),\n    };\n  }\n\n  if (liveData.partitionStats) {\n    const {numPartitions, numMaterialized, numFailed} = liveData.partitionStats;\n    const numMissing = numPartitions - numFailed - numMaterialized;\n    const {background, foreground, border} = StyleForAssetPartitionStatus[\n      late || numFailed\n        ? AssetPartitionStatus.FAILED\n        : numMissing\n        ? AssetPartitionStatus.MISSING\n        : AssetPartitionStatus.MATERIALIZED\n    ];\n\n    return {\n      background,\n      border,\n      content: (\n        <Link\n          to={assetDetailsPathForKey(definition.assetKey, {view: 'partitions'})}\n          style={{color: foreground}}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          {late ? (\n            <Tooltip\n              position=\"top\"\n              content={humanizedLateString(liveData.freshnessInfo.currentMinutesLate)}\n            >\n              Overdue\n            </Tooltip>\n          ) : (\n            partitionCountString(numPartitions)\n          )}\n        </Link>\n      ),\n    };\n  }\n\n  const lastMaterializationLink = lastMaterialization ? (\n    <span style={{overflow: 'hidden'}}>\n      <AssetRunLink\n        runId={lastMaterialization.runId}\n        event={{stepKey: getStepKey(definition), timestamp: lastMaterialization.timestamp}}\n      >\n        <TimestampDisplay\n          timestamp={Number(lastMaterialization.timestamp) / 1000}\n          timeFormat={{showSeconds: false, showTimezone: false}}\n        />\n      </AssetRunLink>\n    </span>\n  ) : undefined;\n\n  if (runWhichFailedToMaterialize || late) {\n    return {\n      background: Colors.Red50,\n      border: Colors.Red500,\n      content: (\n        <>\n          {expanded && (\n            <Icon\n              name=\"partition_failure\"\n              color={Colors.Red500}\n              style={{marginRight: -2}}\n              size={12}\n            />\n          )}\n\n          {late ? (\n            <Tooltip\n              position=\"top\"\n              content={humanizedLateString(liveData.freshnessInfo.currentMinutesLate)}\n            >\n              <span style={{color: Colors.Red700}}>{late ? `Failed, Overdue` : 'Overdue'}</span>\n            </Tooltip>\n          ) : runWhichFailedToMaterialize ? (\n            <span style={{color: Colors.Red700}}>Failed</span>\n          ) : undefined}\n\n          {expanded && <SpacerDot />}\n\n          {runWhichFailedToMaterialize ? (\n            <span style={{overflow: 'hidden'}}>\n              <AssetRunLink runId={runWhichFailedToMaterialize.id}>\n                <TimestampDisplay\n                  timestamp={Number(runWhichFailedToMaterialize.endTime)}\n                  timeFormat={{showSeconds: false, showTimezone: false}}\n                />\n              </AssetRunLink>\n            </span>\n          ) : (\n            lastMaterializationLink\n          )}\n        </>\n      ),\n    };\n  }\n\n  if (!lastMaterialization) {\n    return {\n      background: Colors.Yellow50,\n      border: Colors.Yellow500,\n      content: (\n        <>\n          {expanded && (\n            <Icon\n              name=\"partition_missing\"\n              color={Colors.Yellow500}\n              style={{marginRight: -2}}\n              size={12}\n            />\n          )}\n          <span style={{color: Colors.Yellow700}}>Never materialized</span>\n        </>\n      ),\n    };\n  }\n\n  return {\n    background: Colors.Green50,\n    border: Colors.Green500,\n    content: (\n      <>\n        {expanded && <AssetPartitionStatusDot status={[AssetPartitionStatus.MATERIALIZED]} />}\n        <span style={{color: Colors.Green700}}>Materialized</span>\n        {expanded && <SpacerDot />}\n        {lastMaterializationLink}\n      </>\n    ),\n  };\n}\n\nexport const AssetNodeMinimal: React.FC<{\n  selected: boolean;\n  liveData?: LiveDataForNode;\n  definition: AssetNodeFragment;\n}> = ({selected, definition, liveData}) => {\n  const {isSource, assetKey} = definition;\n  const {border, background} = buildAssetNodeStatusContent({definition, liveData});\n  const displayName = assetKey.path[assetKey.path.length - 1];\n  return (\n    <AssetInsetForHoverEffect>\n      <MinimalAssetNodeContainer $selected={selected}>\n        <TooltipStyled\n          content={displayName}\n          canShow={displayName.length > 14}\n          targetTagName=\"div\"\n          position=\"top\"\n        >\n          <MinimalAssetNodeBox\n            $selected={selected}\n            $isSource={isSource}\n            $background={background}\n            $border={border}\n          >\n            <div style={{position: 'absolute', bottom: 6, left: 6}}>\n              <AssetLatestRunSpinner liveData={liveData} purpose=\"section\" />\n            </div>\n            <MinimalName style={{fontSize: 30}} $isSource={isSource}>\n              {withMiddleTruncation(displayName, {maxLength: 14})}\n            </MinimalName>\n          </MinimalAssetNodeBox>\n        </TooltipStyled>\n      </MinimalAssetNodeContainer>\n    </AssetInsetForHoverEffect>\n  );\n};\n\nexport const ASSET_NODE_LIVE_FRAGMENT = gql`\n  fragment AssetNodeLiveFragment on AssetNode {\n    id\n    opNames\n    repository {\n      id\n    }\n    assetKey {\n      path\n    }\n    assetMaterializations(limit: 1) {\n      ...AssetNodeLiveMaterialization\n    }\n    freshnessPolicy {\n      ...AssetNodeLiveFreshnessPolicy\n    }\n    freshnessInfo {\n      ...AssetNodeLiveFreshnessInfo\n    }\n    assetObservations(limit: 1) {\n      ...AssetNodeLiveObservation\n    }\n    staleStatus\n    staleCauses {\n      key {\n        path\n      }\n      reason\n      category\n      dependency {\n        path\n      }\n    }\n    partitionStats {\n      numMaterialized\n      numMaterializing\n      numPartitions\n      numFailed\n    }\n  }\n\n  fragment AssetNodeLiveFreshnessPolicy on FreshnessPolicy {\n    maximumLagMinutes\n    cronSchedule\n    cronScheduleTimezone\n  }\n\n  fragment AssetNodeLiveFreshnessInfo on AssetFreshnessInfo {\n    currentMinutesLate\n  }\n\n  fragment AssetNodeLiveMaterialization on MaterializationEvent {\n    timestamp\n    runId\n  }\n\n  fragment AssetNodeLiveObservation on ObservationEvent {\n    timestamp\n    runId\n  }\n`;\n\n// Note: This fragment should only contain fields that are needed for\n// useAssetGraphData and the Asset DAG. Some pages of Dagit request this\n// fragment for every AssetNode on the instance. Add fields with care!\n//\nexport const ASSET_NODE_FRAGMENT = gql`\n  fragment AssetNodeFragment on AssetNode {\n    id\n    graphName\n    hasMaterializePermission\n    jobNames\n    opNames\n    opVersion\n    description\n    computeKind\n    isPartitioned\n    isObservable\n    isSource\n    assetKey {\n      ...AssetNodeKey\n    }\n  }\n\n  fragment AssetNodeKey on AssetKey {\n    path\n  }\n`;\n\nconst AssetInsetForHoverEffect = styled.div`\n  padding: 10px 4px 2px 4px;\n  height: 100%;\n\n  & *:focus {\n    outline: 0;\n  }\n`;\n\nconst AssetNodeContainer = styled.div<{$selected: boolean}>`\n  user-select: none;\n  cursor: default;\n  padding: 4px;\n`;\n\nconst AssetNodeShowOnHover = styled.span`\n  display: none;\n`;\n\nconst AssetNodeBox = styled.div<{$isSource: boolean; $selected: boolean}>`\n  ${(p) =>\n    p.$isSource\n      ? `border: 2px dashed ${p.$selected ? Colors.Gray600 : Colors.Gray300}`\n      : `border: 2px solid ${p.$selected ? Colors.Blue500 : Colors.Blue200}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 3px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 3px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  background: ${Colors.White};\n  border-radius: 8px;\n  position: relative;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n    ${AssetNodeShowOnHover} {\n      display: initial;\n    }\n  }\n`;\nconst Name = styled.div<{$isSource: boolean}>`\n  /** Keep in sync with DISPLAY_NAME_PX_PER_CHAR */\n  display: flex;\n  padding: 3px 6px;\n  background: ${(p) => (p.$isSource ? Colors.Gray100 : Colors.Blue50)};\n  font-family: ${FontFamily.monospace};\n  border-top-left-radius: 7px;\n  border-top-right-radius: 7px;\n  font-weight: 600;\n  gap: 4px;\n`;\n\nconst MinimalAssetNodeContainer = styled(AssetNodeContainer)`\n  padding-top: 30px;\n  padding-bottom: 42px;\n  height: 100%;\n`;\n\nconst MinimalAssetNodeBox = styled.div<{\n  $isSource: boolean;\n  $selected: boolean;\n  $background: string;\n  $border: string;\n}>`\n  background: ${(p) => p.$background};\n  ${(p) =>\n    p.$isSource\n      ? `border: 4px dashed ${p.$selected ? Colors.Gray500 : p.$border}`\n      : `border: 4px solid ${p.$selected ? Colors.Blue500 : p.$border}`};\n\n  ${(p) =>\n    p.$isSource\n      ? `outline: 8px solid ${p.$selected ? Colors.Gray300 : 'transparent'}`\n      : `outline: 8px solid ${p.$selected ? Colors.Blue200 : 'transparent'}`};\n\n  border-radius: 10px;\n  position: relative;\n  padding: 4px;\n  height: 100%;\n  min-height: 46px;\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 2px 12px 0px;\n  }\n`;\n\nconst MinimalName = styled(Name)`\n  font-weight: 600;\n  white-space: nowrap;\n  position: absolute;\n  background: none;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst Description = styled.div<{$color: string}>`\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: ${(p) => p.$color};\n  font-size: 12px;\n`;\n\nconst TooltipStyled = styled(Tooltip)`\n  height: 100%;\n`;\n\nconst SpacerDot = () => (\n  <Body color={Colors.KeylineGray} style={{marginLeft: -3, marginRight: -3}}>\n    •\n  </Body>\n);\n","import {Tooltip, Spinner, CaptionMono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {titleForRun, linkToRunEvent} from '../runs/RunUtils';\n\nimport {LiveDataForNode} from './Utils';\n\nexport const AssetLatestRunSpinner: React.FC<{\n  liveData?: LiveDataForNode;\n  purpose?: 'caption-text' | 'body-text' | 'section';\n}> = ({liveData, purpose = 'body-text'}) => {\n  if (liveData?.inProgressRunIds?.length) {\n    return (\n      <Tooltip content=\"A run is currently rematerializing this asset.\">\n        <Spinner purpose={purpose} />\n      </Tooltip>\n    );\n  }\n  if (liveData?.unstartedRunIds?.length) {\n    return (\n      <Tooltip content=\"A run has started that will rematerialize this asset soon.\">\n        <Spinner purpose={purpose} stopped />\n      </Tooltip>\n    );\n  }\n  return null;\n};\n\nexport const AssetRunLink: React.FC<{\n  children?: React.ReactNode;\n  runId: string;\n  event?: Parameters<typeof linkToRunEvent>[1];\n}> = ({runId, children, event}) => (\n  <Link\n    to={event ? linkToRunEvent({runId}, event) : `/runs/${runId}`}\n    target=\"_blank\"\n    rel=\"noreferrer\"\n  >\n    {children || <CaptionMono>{titleForRun({runId})}</CaptionMono>}\n  </Link>\n);\n","import {Colors, Icon, FontFamily} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\n\nimport {ASSET_LINK_NAME_MAX_LENGTH} from './layout';\n\nexport const AssetNodeLink: React.FC<{\n  assetKey: {path: string[]};\n}> = React.memo(({assetKey}) => {\n  const label = assetKey.path[assetKey.path.length - 1];\n  return (\n    <AssetNodeLinkContainer>\n      <Icon name=\"open_in_new\" color={Colors.Link} />\n      <span className=\"label\" title={label}>\n        {withMiddleTruncation(label, {\n          maxLength: ASSET_LINK_NAME_MAX_LENGTH,\n        })}\n      </span>\n    </AssetNodeLinkContainer>\n  );\n});\n\nconst AssetNodeLinkContainer = styled.div`\n  display: flex;\n  padding: 4px 8px 6px;\n  margin-top: 26px;\n  line-height: 30px;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Link};\n  align-items: center;\n  font-weight: 600;\n  gap: 4px;\n  &:hover .label {\n    color: ${Colors.Link};\n    text-decoration: underline;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport reject from 'lodash/reject';\nimport React from 'react';\n\nimport {filterByQuery, GraphQueryItem} from '../app/GraphQueryImpl';\nimport {AssetKey} from '../assets/types';\nimport {AssetGroupSelector, PipelineSelector} from '../graphql/types';\n\nimport {ASSET_NODE_FRAGMENT} from './AssetNode';\nimport {buildGraphData, GraphData, toGraphId, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphQuery,\n  AssetGraphQueryVariables,\n  AssetNodeForGraphQueryFragment,\n} from './types/useAssetGraphData.types';\n\nexport interface AssetGraphFetchScope {\n  hideEdgesToNodesOutsideQuery?: boolean;\n  hideNodesMatching?: (node: AssetNodeForGraphQueryFragment) => boolean;\n  pipelineSelector?: PipelineSelector;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport type AssetGraphQueryItem = GraphQueryItem & {\n  node: AssetNode;\n};\n\n/** Fetches data for rendering an asset graph:\n *\n * @param pipelineSelector: Optionally scope to an asset job, or pass null for the global graph\n *\n * @param opsQuery: filter the returned graph using selector syntax string (eg: asset_name++)\n *\n * @param filterNodes: filter the returned graph using the provided function. The global graph\n * uses this option to implement the \"3 of 4 repositories\" picker.\n */\nexport function useAssetGraphData(opsQuery: string, options: AssetGraphFetchScope) {\n  const fetchResult = useQuery<AssetGraphQuery, AssetGraphQueryVariables>(ASSET_GRAPH_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pipelineSelector: options.pipelineSelector,\n      groupSelector: options.groupSelector,\n    },\n  });\n\n  const nodes = fetchResult.data?.assetNodes;\n\n  const {\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = React.useMemo(() => {\n    if (nodes === undefined) {\n      return {\n        graphAssetKeys: [],\n        graphQueryItems: [],\n        assetGraphData: null,\n        applyingEmptyDefault: false,\n      };\n    }\n\n    // Apply any filters provided by the caller. This is where we do repo filtering\n    let matching = nodes;\n    if (options.hideNodesMatching) {\n      matching = reject(matching, options.hideNodesMatching);\n    }\n\n    // Filter the set of all AssetNodes down to those matching the `opsQuery`.\n    // In the future it might be ideal to move this server-side, but we currently\n    // get to leverage the useQuery cache almost 100% of the time above, making this\n    // super fast after the first load vs a network fetch on every page view.\n    const graphQueryItems = buildGraphQueryItems(matching);\n    const {all, applyingEmptyDefault} = filterByQuery(graphQueryItems, opsQuery);\n\n    // Assemble the response into the data structure used for layout, traversal, etc.\n    const assetGraphData = buildGraphData(all.map((n) => n.node));\n    if (options.hideEdgesToNodesOutsideQuery) {\n      removeEdgesToHiddenAssets(assetGraphData, nodes);\n    }\n\n    return {\n      allAssetKeys: matching.map((n) => n.assetKey),\n      graphAssetKeys: all.map((n) => ({path: n.node.assetKey.path})),\n      assetGraphData,\n      graphQueryItems,\n      applyingEmptyDefault,\n    };\n  }, [nodes, opsQuery, options.hideEdgesToNodesOutsideQuery, options.hideNodesMatching]);\n\n  return {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  };\n}\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\nconst buildGraphQueryItems = (nodes: AssetNode[]) => {\n  const items: {[name: string]: AssetGraphQueryItem} = {};\n\n  for (const node of nodes) {\n    const name = tokenForAssetKey(node.assetKey);\n    items[name] = {\n      node,\n      name,\n      inputs: node.dependencyKeys.map((key) => ({\n        dependsOn: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n      outputs: node.dependedByKeys.map((key) => ({\n        dependedBy: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n    };\n  }\n  return Object.values(items);\n};\n\nconst removeEdgesToHiddenAssets = (graphData: GraphData, allNodes: AssetNode[]) => {\n  const allNodesById = groupBy(allNodes, (n) => toGraphId(n.assetKey));\n  const notSourceAsset = (id: string) => !!allNodesById[id];\n\n  for (const node of Object.keys(graphData.upstream)) {\n    for (const edge of Object.keys(graphData.upstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[node][edge];\n        delete graphData.downstream[edge][node];\n      }\n    }\n  }\n\n  for (const node of Object.keys(graphData.downstream)) {\n    for (const edge of Object.keys(graphData.downstream[node])) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[edge][node];\n        delete graphData.downstream[node][edge];\n      }\n    }\n  }\n};\n\nexport const calculateGraphDistances = (items: GraphQueryItem[], assetKey: AssetKey) => {\n  const map = keyBy(items, (g) => g.name);\n  const start = map[tokenForAssetKey(assetKey)];\n  if (!start) {\n    return {upstream: 0, downstream: 0};\n  }\n\n  const dfsUpstream = (name: string, depth: number): number => {\n    const next = map[name].inputs\n      .flatMap((i) => i.dependsOn.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsUpstream(dname, depth + 1)));\n  };\n  const dfsDownstream = (name: string, depth: number): number => {\n    const next = map[name].outputs\n      .flatMap((i) => i.dependedBy.map((d) => d.solid.name))\n      .filter((dname) => dname !== name);\n\n    return Math.max(depth, ...next.map((dname) => dfsDownstream(dname, depth + 1)));\n  };\n\n  return {\n    upstream: dfsUpstream(start.name, 0),\n    downstream: dfsDownstream(start.name, 0),\n  };\n};\n\nexport const ASSET_GRAPH_QUERY = gql`\n  query AssetGraphQuery($pipelineSelector: PipelineSelector, $groupSelector: AssetGroupSelector) {\n    assetNodes(pipeline: $pipelineSelector, group: $groupSelector) {\n      id\n      ...AssetNodeForGraphQuery\n    }\n  }\n\n  fragment AssetNodeForGraphQuery on AssetNode {\n    id\n    groupName\n    hasMaterializePermission\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    dependencyKeys {\n      path\n    }\n    dependedByKeys {\n      path\n    }\n    ...AssetNodeFragment\n  }\n\n  ${ASSET_NODE_FRAGMENT}\n`;\n","import {gql, NetworkStatus, useQuery, useSubscription} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AssetKeyInput} from '../graphql/types';\nimport {useDidLaunchEvent} from '../runs/RunUtils';\n\nimport {ASSET_NODE_LIVE_FRAGMENT} from './AssetNode';\nimport {buildLiveData, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphLiveQuery,\n  AssetGraphLiveQueryVariables,\n  AssetLiveRunLogsSubscription,\n  AssetLiveRunLogsSubscriptionVariables,\n} from './types/useLiveDataForAssetKeys.types';\n\nconst SUBSCRIPTION_IDLE_POLL_RATE = 30 * 1000;\nconst SUBSCRIPTION_MAX_POLL_RATE = 2 * 1000;\n\n/** Fetches the last materialization, \"upstream changed\", and other live state\n * for the assets in the given pipeline or in the given set of asset keys (or both).\n *\n * Note: The \"upstream changed\" flag cascades, so it may not appear if the upstream\n * node that has changed is not in scope.\n */\nexport function useLiveDataForAssetKeys(assetKeys: AssetKeyInput[]) {\n  const liveResult = useQuery<AssetGraphLiveQuery, AssetGraphLiveQueryVariables>(\n    ASSETS_GRAPH_LIVE_QUERY,\n    {\n      skip: assetKeys.length === 0,\n      variables: {assetKeys},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const liveDataByNode = React.useMemo(() => {\n    return liveResult.data ? buildLiveData(liveResult.data) : {};\n  }, [liveResult.data]);\n\n  // Track whether the data is being refetched so incoming asset events don't trigger\n  // duplicate requests for live data.\n  const fetching = React.useRef(false);\n  fetching.current = [NetworkStatus.refetch, NetworkStatus.loading].includes(\n    liveResult.networkStatus,\n  );\n\n  const timerRef = React.useRef<NodeJS.Timeout | null>(null);\n\n  const onRefreshDebounced = React.useCallback(() => {\n    // This is a basic `throttle`, except that if it fires and finds the live\n    // query is already refreshing it debounces again.\n    const refetch = liveResult.refetch;\n    const fire = () => {\n      if (fetching.current) {\n        timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n      } else {\n        timerRef.current = null;\n        refetch();\n      }\n    };\n    if (!timerRef.current) {\n      timerRef.current = setTimeout(fire, SUBSCRIPTION_MAX_POLL_RATE);\n    }\n  }, [timerRef, liveResult.refetch]);\n\n  React.useEffect(() => {\n    return () => {\n      timerRef.current && clearTimeout(timerRef.current);\n    };\n  }, []);\n\n  // If the event log storage does not support streaming us asset events, fall back to\n  // a polling approach and trigger a single refresh when a run is launched for immediate feedback\n  const liveDataRefreshState = useQueryRefreshAtInterval(liveResult, SUBSCRIPTION_IDLE_POLL_RATE);\n\n  useDidLaunchEvent(liveResult.refetch, SUBSCRIPTION_MAX_POLL_RATE);\n\n  const assetKeyTokens = React.useMemo(() => new Set(assetKeys.map(tokenForAssetKey)), [assetKeys]);\n  const assetStepKeys = React.useMemo(\n    () => new Set(liveResult.data?.assetNodes.flatMap((n) => n.opNames) || []),\n    [liveResult],\n  );\n\n  const runInProgressId = uniq(\n    Object.values(liveDataByNode).flatMap((p) => [...p.unstartedRunIds, ...p.inProgressRunIds]),\n  )\n    .sort()\n    .slice(0, 3);\n\n  const runWatchers = (\n    <>\n      {runInProgressId.map((runId) => (\n        <RunLogObserver\n          runId={runId}\n          key={runId}\n          assetKeyTokens={assetKeyTokens}\n          assetStepKeys={assetStepKeys}\n          callback={onRefreshDebounced}\n        />\n      ))}\n    </>\n  );\n\n  return {\n    liveDataByNode,\n    liveDataRefreshState,\n    runWatchers,\n    assetKeys,\n  };\n}\n\nconst RunLogObserver: React.FC<{\n  runId: string;\n  assetKeyTokens: Set<string>;\n  assetStepKeys: Set<string>;\n  callback: () => void;\n}> = React.memo(({runId, assetKeyTokens, assetStepKeys, callback}) => {\n  // Useful for testing this component:\n  const counter = React.useRef(0);\n  React.useEffect(() => {\n    console.log(`Subscribed to ${runId}`);\n    return () => console.log(`Unsubscribed from ${runId} after ${counter.current} messages`);\n  }, [runId]);\n\n  useSubscription<AssetLiveRunLogsSubscription, AssetLiveRunLogsSubscriptionVariables>(\n    ASSET_LIVE_RUN_LOGS_SUBSCRIPTION,\n    {\n      fetchPolicy: 'no-cache',\n      variables: {runId},\n      onSubscriptionData: (data) => {\n        const logs = data.subscriptionData.data?.pipelineRunLogs;\n        if (logs?.__typename !== 'PipelineRunLogsSubscriptionSuccess') {\n          return;\n        }\n\n        counter.current += logs.messages.length;\n\n        if (\n          logs.messages.some((m) => {\n            if (\n              m.__typename === 'AssetMaterializationPlannedEvent' ||\n              m.__typename === 'MaterializationEvent' ||\n              m.__typename === 'ObservationEvent'\n            ) {\n              return m.assetKey && assetKeyTokens.has(tokenForAssetKey(m.assetKey));\n            }\n            if (\n              m.__typename === 'ExecutionStepFailureEvent' ||\n              m.__typename === 'ExecutionStepStartEvent'\n            ) {\n              return m.stepKey && assetStepKeys.has(m.stepKey);\n            }\n            return false;\n          })\n        ) {\n          callback();\n        }\n      },\n    },\n  );\n\n  return <span />;\n});\n\nexport const ASSET_LATEST_INFO_FRAGMENT = gql`\n  fragment AssetLatestInfoFragment on AssetLatestInfo {\n    assetKey {\n      path\n    }\n    unstartedRunIds\n    inProgressRunIds\n    latestRun {\n      id\n      ...AssetLatestInfoRun\n    }\n  }\n\n  fragment AssetLatestInfoRun on Run {\n    status\n    endTime\n    id\n  }\n`;\n\nconst ASSETS_GRAPH_LIVE_QUERY = gql`\n  query AssetGraphLiveQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      ...AssetNodeLiveFragment\n    }\n    assetsLatestInfo(assetKeys: $assetKeys) {\n      ...AssetLatestInfoFragment\n    }\n  }\n\n  ${ASSET_NODE_LIVE_FRAGMENT}\n  ${ASSET_LATEST_INFO_FRAGMENT}\n`;\n\nconst ASSET_LIVE_RUN_LOGS_SUBSCRIPTION = gql`\n  subscription AssetLiveRunLogsSubscription($runId: ID!) {\n    pipelineRunLogs(runId: $runId, cursor: \"HEAD\") {\n      __typename\n      ... on PipelineRunLogsSubscriptionSuccess {\n        messages {\n          __typename\n          ... on AssetMaterializationPlannedEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on MaterializationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ObservationEvent {\n            assetKey {\n              path\n            }\n          }\n          ... on ExecutionStepStartEvent {\n            stepKey\n          }\n          ... on ExecutionStepFailureEvent {\n            stepKey\n          }\n        }\n      }\n    }\n  }\n`;\n","import {gql} from '@apollo/client';\n\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\n\nexport const ASSET_NODE_CONFIG_FRAGMENT = gql`\n  fragment AssetNodeConfigFragment on AssetNode {\n    id\n    configField {\n      name\n      isRequired\n      configType {\n        ...ConfigTypeSchemaFragment\n        recursiveConfigTypes {\n          ...ConfigTypeSchemaFragment\n        }\n      }\n    }\n  }\n\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Alert, Box, ButtonLink, Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetKey} from './types';\nimport {\n  AssetDefinitionCollisionQuery,\n  AssetDefinitionCollisionQueryVariables,\n} from './types/AssetDefinedInMultipleReposNotice.types';\n\nexport const MULTIPLE_DEFINITIONS_WARNING = 'Multiple asset definitions found';\n\nexport const AssetDefinedInMultipleReposNotice: React.FC<{\n  assetKey: AssetKey;\n  loadedFromRepo: RepoAddress;\n  padded?: boolean;\n}> = ({assetKey, loadedFromRepo, padded}) => {\n  const {data} = useQuery<AssetDefinitionCollisionQuery, AssetDefinitionCollisionQueryVariables>(\n    ASSET_DEFINITION_COLLISION_QUERY,\n    {\n      variables: {assetKeys: [{path: assetKey.path}]},\n    },\n  );\n\n  const collision = data?.assetNodeDefinitionCollisions[0];\n  if (!collision) {\n    return <span />;\n  }\n\n  const allReposWithAsset = collision.repositories.map((r) =>\n    repoAddressAsHumanString({name: r.name, location: r.location.name}),\n  );\n\n  return (\n    <Box\n      padding={padded ? {vertical: 16, left: 24, right: 12} : {}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"warning\"\n        title={MULTIPLE_DEFINITIONS_WARNING}\n        description={\n          <>\n            This asset was loaded from{' '}\n            {buildRepoPathForHuman(loadedFromRepo.name, loadedFromRepo.location)}, but duplicate\n            definitions were found in{' '}\n            <ButtonLink\n              underline=\"always\"\n              color={Colors.Yellow700}\n              onClick={() =>\n                showCustomAlert({\n                  title: MULTIPLE_DEFINITIONS_WARNING,\n                  body: (\n                    <>\n                      Code locations containing an asset definition for{' '}\n                      <strong>{displayNameForAssetKey(assetKey)}</strong>:\n                      <ul>\n                        {allReposWithAsset.map((addr) => (\n                          <li key={addr}>{addr}</li>\n                        ))}\n                      </ul>\n                    </>\n                  ),\n                })\n              }\n            >\n              {allReposWithAsset.length - 1} other repo{allReposWithAsset.length === 2 ? '' : 's'}\n            </ButtonLink>\n            . You should rename these assets to avoid collisions.\n          </>\n        }\n      />\n    </Box>\n  );\n};\n\nconst ASSET_DEFINITION_COLLISION_QUERY = gql`\n  query AssetDefinitionCollisionQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import {Box, Caption, Colors, Icon, Tag} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetRunLink} from '../asset-graph/AssetRunLinking';\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {titleForRun} from '../runs/RunUtils';\nimport {Container, Inner, Row} from '../ui/VirtualizedTable';\n\nimport {AssetEventGroup} from './groupByPartition';\n\n// This component is on the feature-flagged AssetOverview page and replaces AssetEventTable\n\nexport const AssetEventList: React.FC<{\n  xAxis: 'time' | 'partition';\n  groups: AssetEventGroup[];\n  focused?: AssetEventGroup;\n  setFocused?: (item: AssetEventGroup | undefined) => void;\n}> = ({groups, focused, setFocused, xAxis}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const focusedRowRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groups.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 80,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  React.useEffect(() => {\n    if (focusedRowRef.current) {\n      const el = focusedRowRef.current;\n      if (el && el instanceof HTMLElement && 'scrollIntoView' in el) {\n        el.scrollIntoView({block: 'nearest'});\n      }\n    }\n  }, [focused]);\n\n  return (\n    <AssetListContainer ref={parentRef}>\n      <Inner $totalHeight={totalHeight}>\n        {items.map(({index, key, size, start}) => {\n          const group = groups[index];\n          return (\n            <AssetListRow\n              key={key}\n              $height={size}\n              $start={start}\n              $focused={group === focused}\n              ref={group === focused ? focusedRowRef : undefined}\n              onClick={(e) => {\n                // If you're interacting with something in the row, don't trigger a focus change.\n                // Since focus is stored in the URL bar this overwrites any link click navigation.\n                // We could alternatively e.preventDefault() on every link but it's easy to forget.\n                if (e.target instanceof HTMLElement && e.target.closest('a')) {\n                  return;\n                }\n                setFocused?.(focused !== group ? group : undefined);\n              }}\n            >\n              <Box\n                style={{height: size}}\n                padding={{left: 24, right: 12}}\n                flex={{direction: 'column', justifyContent: 'center', gap: 8}}\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n              >\n                {xAxis === 'partition' ? (\n                  <AssetEventListPartitionRow group={group} />\n                ) : (\n                  <AssetEventListEventRow group={group} />\n                )}\n              </Box>\n            </AssetListRow>\n          );\n        })}\n      </Inner>\n    </AssetListContainer>\n  );\n};\n\nexport const AssetListContainer = styled(Container)`\n  outline: none;\n  &:focus {\n    box-shadow: 0 -1px ${Colors.Blue500};\n  }\n`;\n\nexport const AssetListRow = styled(Row)<{$focused: boolean}>`\n  cursor: pointer;\n  user-select: none;\n\n  :focus,\n  :active,\n  :hover {\n    outline: none;\n    background: ${Colors.Gray100};\n  }\n  ${(p) =>\n    p.$focused &&\n    `background: ${Colors.Blue50};\n     color: ${Colors.Blue700};\n     :hover {\n       background: ${Colors.Blue50};\n     }\n    `}\n`;\n\nconst AssetEventListPartitionRow: React.FC<{group: AssetEventGroup}> = ({group}) => {\n  const {partition, latest, timestamp} = group;\n  return (\n    <>\n      <Box flex={{gap: 4, direction: 'row', alignItems: 'flex-start'}}>\n        <Icon name=\"partition\" />\n        {partition}\n        <div style={{flex: 1}} />\n        {!latest ? <Tag intent=\"none\">Missing</Tag> : <Tag intent=\"success\">Materialized</Tag>}\n      </Box>\n\n      <Caption color={Colors.Gray600} style={{userSelect: 'none'}}>\n        {timestamp ? (\n          <span>\n            Materialized <Timestamp timestamp={{ms: Number(timestamp)}} />\n          </span>\n        ) : (\n          'Never materialized'\n        )}\n      </Caption>\n    </>\n  );\n};\n\nconst AssetEventListEventRow: React.FC<{group: AssetEventGroup}> = ({group}) => {\n  const {latest, partition, timestamp} = group;\n  const run = latest?.runOrError.__typename === 'Run' ? latest.runOrError : null;\n\n  return (\n    <>\n      <Box flex={{gap: 4, direction: 'row'}}>\n        {latest?.__typename === 'MaterializationEvent' ? (\n          <Icon name=\"materialization\" />\n        ) : (\n          <Icon name=\"observation\" />\n        )}\n        <Timestamp timestamp={{ms: Number(timestamp)}} />\n      </Box>\n      <Box flex={{gap: 4, direction: 'row'}}>\n        {partition && <Tag>{partition}</Tag>}\n        {latest && run && (\n          <Tag>\n            <AssetRunLink\n              runId={run.runId}\n              event={{stepKey: latest.stepKey, timestamp: latest.timestamp}}\n            >\n              <Box flex={{gap: 4, direction: 'row', alignItems: 'center'}}>\n                <RunStatusWithStats runId={run.runId} status={run.status} size={8} />\n                {titleForRun(run)}\n              </Box>\n            </AssetRunLink>\n          </Tag>\n        )}\n      </Box>\n    </>\n  );\n};\n","import {Box, ButtonLink, Caption, Colors, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {AssetEventGroup} from './groupByPartition';\n\n// There can be other keys in the event tags, but we want to show data and code version\n// at the top consistently regardless of their alphabetical / backend ordering.\nconst ORDER = [\n  DagsterTag.AssetEventDataVersion.valueOf(),\n  DagsterTag.AssetEventDataVersionDeprecated.valueOf(),\n  DagsterTag.AssetEventCodeVersion.valueOf(),\n];\n\nexport const AssetEventSystemTags: React.FC<{\n  event: AssetEventGroup['latest'] | null;\n  paddingLeft?: number;\n  collapsible?: boolean;\n}> = ({event, paddingLeft, collapsible}) => {\n  const [shown, setShown] = useStateWithStorage('show-asset-system-tags', Boolean);\n\n  if (collapsible && !shown) {\n    return (\n      <Caption>\n        <ButtonLink onClick={() => setShown(true)}>\n          <Box flex={{alignItems: 'center'}}>\n            <span>Show tags ({event?.tags.length || 0})</span>\n            <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(0deg)'}} />\n          </Box>\n        </ButtonLink>\n      </Caption>\n    );\n  }\n\n  return (\n    <>\n      <AssetEventSystemTagsTable>\n        <tbody>\n          {event?.tags.length ? (\n            [...event.tags]\n              .sort((a, b) => ORDER.indexOf(b.key) - ORDER.indexOf(a.key))\n              .map((t) => (\n                <tr key={t.key}>\n                  <td style={{paddingLeft}}>\n                    <Mono>{t.key.replace(DagsterTag.Namespace, '')}</Mono>\n                  </td>\n                  <td>{t.value}</td>\n                </tr>\n              ))\n          ) : (\n            <tr>\n              <td style={{paddingLeft}}>No tags to display.</td>\n            </tr>\n          )}\n        </tbody>\n      </AssetEventSystemTagsTable>\n      {collapsible && (\n        <Caption>\n          <ButtonLink onClick={() => setShown(false)}>\n            <Box flex={{alignItems: 'center'}}>\n              <span>Hide tags</span>\n              <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(180deg)'}} />\n            </Box>\n          </ButtonLink>\n        </Caption>\n      )}\n    </>\n  );\n};\n\nconst AssetEventSystemTagsTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  tr td:first-child {\n    max-width: 300px;\n    word-wrap: break-word;\n    width: 25%;\n  }\n  tr td {\n    border: 1px solid ${Colors.KeylineGray};\n    padding: 8px 12px;\n    font-size: 14px;\n    vertical-align: top;\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Box, ButtonLink, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetLineageFragment} from './types/AssetLineageElements.types';\n\nconst AssetLineageInfoElement: React.FC<{\n  lineage_info: AssetLineageFragment;\n  timestamp: string;\n}> = ({lineage_info, timestamp}) => {\n  const partition_list_label = lineage_info.partitions.length === 1 ? 'Partition' : 'Partitions';\n  const partition_list_str = lineage_info.partitions\n    .map((partition) => `\"${partition}\"`)\n    .join(', ');\n  const to = assetDetailsPathForKey(lineage_info.assetKey, {asOf: timestamp});\n\n  return (\n    <Box margin={{bottom: 4}}>\n      {lineage_info.partitions.length > 0\n        ? `${partition_list_label} ${partition_list_str} of `\n        : ''}\n      <Tooltip\n        content={\n          <>\n            View snapshot as of{' '}\n            <Timestamp\n              timestamp={{ms: Number(timestamp)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </>\n        }\n        modifiers={{offset: {enabled: true, options: {offset: [0, 16]}}}}\n        placement=\"right\"\n      >\n        <Link to={to}>\n          <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n            {lineage_info.assetKey.path\n              .map((p, i) => <span key={i}>{p}</span>)\n              .reduce(\n                (accum, curr, ii) => [\n                  ...accum,\n                  ii > 0 ? (\n                    <React.Fragment key={`${ii}-space`}>&nbsp;{'>'}&nbsp;</React.Fragment>\n                  ) : null,\n                  curr,\n                ],\n                [] as React.ReactNode[],\n              )}\n          </Box>\n        </Link>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst MAX_COLLAPSED = 5;\n\nexport const AssetLineageElements: React.FC<{\n  elements: AssetLineageFragment[];\n  timestamp: string;\n}> = ({elements, timestamp}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      {elements.length > MAX_COLLAPSED && (\n        <ButtonLink onClick={() => setCollapsed(!collapsed)}>\n          {collapsed ? 'Show More' : 'Show Less'}\n        </ButtonLink>\n      )}\n      {(collapsed ? elements.slice(elements.length - MAX_COLLAPSED) : elements).map((info, idx) => (\n        <AssetLineageInfoElement key={idx} lineage_info={info} timestamp={timestamp} />\n      ))}\n    </div>\n  );\n};\n\nexport const ASSET_LINEAGE_FRAGMENT = gql`\n  fragment AssetLineageFragment on AssetLineageInfo {\n    assetKey {\n      path\n    }\n    partitions\n  }\n`;\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Caption,\n  Subheading,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {AssetValueGraph, AssetValueGraphData} from './AssetValueGraph';\nimport {AssetEventGroup} from './groupByPartition';\n\nexport const AssetMaterializationGraphs: React.FC<{\n  groups: AssetEventGroup[];\n  xAxis: 'partition' | 'time';\n  asSidebarSection?: boolean;\n  columnCount?: number;\n}> = (props) => {\n  const [xHover, setXHover] = React.useState<string | number | null>(null);\n\n  const reversed = React.useMemo(() => {\n    return [...props.groups].reverse();\n  }, [props.groups]);\n\n  const graphDataByMetadataLabel = extractNumericData(reversed, props.xAxis);\n  const graphLabels = Object.keys(graphDataByMetadataLabel).slice(0, 20).sort();\n\n  if (process.env.NODE_ENV === 'test') {\n    return <span />; // chartjs and our useViewport hook don't play nicely with jest\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `1fr `.repeat(props.columnCount || 2),\n          justifyContent: 'stretch',\n        }}\n      >\n        {graphLabels.map((label) => (\n          <Box\n            key={label}\n            style={{width: '100%'}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Box\n              style={{width: '100%'}}\n              border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n            >\n              {props.asSidebarSection ? (\n                <Box padding={{horizontal: 24, top: 8}} flex={{justifyContent: 'space-between'}}>\n                  <Caption style={{fontWeight: 700}}>{label}</Caption>\n                </Box>\n              ) : (\n                <Box\n                  padding={{horizontal: 24, vertical: 16}}\n                  border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                  flex={{justifyContent: 'space-between'}}\n                >\n                  <Subheading>{label}</Subheading>\n                </Box>\n              )}\n              <Box padding={{horizontal: 24, vertical: 16}}>\n                <AssetValueGraph\n                  label={label}\n                  width=\"100%\"\n                  data={graphDataByMetadataLabel[label]}\n                  xHover={xHover}\n                  onHoverX={(x) => x !== xHover && setXHover(x)}\n                />\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </div>\n      {graphLabels.length === 0 ? (\n        props.asSidebarSection ? (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No numeric metadata entries available to be graphed.\n          </Box>\n        ) : (\n          <Box padding={{horizontal: 24, top: 64}}>\n            <NonIdealState\n              shrinkable\n              icon=\"asset_plot\"\n              title=\"Asset plots are automatically generated by metadata\"\n              description=\"Include numeric metadata entries in your materializations and observations to see data graphed by time or partition.\"\n              action={\n                <ExternalAnchorButton href=\"https://docs.dagster.io/concepts/assets/software-defined-assets#recording-materialization-metadata\">\n                  View documentation\n                </ExternalAnchorButton>\n              }\n            />\n          </Box>\n        )\n      ) : (\n        props.xAxis === 'partition' && (\n          <Box padding={{vertical: 16, horizontal: 24}} style={{color: Colors.Gray400}}>\n            When graphing values by partition, the highest data point for each materialized event\n            label is displayed.\n          </Box>\n        )\n      )}\n    </>\n  );\n};\n\n/**\n * Helper function that iterates over the asset materializations and assembles time series data\n * and stats for all numeric metadata entries. This function makes the following guaruntees:\n *\n * - If a metadata entry is sparsely emitted, points are still included for missing x values\n *   with y = NaN. (For compatiblity with react-chartjs-2)\n * - If a metadata entry is generated many times for the same partition, and xAxis = partition,\n *   the MAX value emitted is used as the data point.\n *\n * Assumes that the data is pre-sorted in ascending partition order if using xAxis = partition.\n */\nconst extractNumericData = (datapoints: AssetEventGroup[], xAxis: 'time' | 'partition') => {\n  const series: {\n    [metadataEntryLabel: string]: AssetValueGraphData;\n  } = {};\n\n  // Build a set of the numeric metadata entry labels (note they may be sparsely emitted)\n  const numericMetadataLabels = uniq(\n    flatMap(datapoints, (e) =>\n      (e.latest?.metadataEntries || [])\n        .filter((k) => ['IntMetadataEntry', 'FloatMetadataEntry'].includes(k.__typename))\n        .map((k) => k.label),\n    ),\n  );\n\n  const append = (label: string, {x, y}: {x: number | string; y: number}) => {\n    series[label] = series[label] || {minX: 0, maxX: 0, minY: 0, maxY: 0, values: [], xAxis};\n\n    if (xAxis === 'partition') {\n      // If the xAxis is partition keys, the graph may only contain one value for each partition.\n      // If the existing sample for the partition was null, replace it. Otherwise take the\n      // most recent value.\n      const existingForPartition = series[label].values.find((v) => v.x === x);\n      if (existingForPartition) {\n        if (!isNaN(y)) {\n          existingForPartition.y = y;\n        }\n        return;\n      }\n    }\n    series[label].values.push({\n      xNumeric: typeof x === 'number' ? x : series[label].values.length,\n      x,\n      y,\n    });\n  };\n\n  for (const {partition, latest} of datapoints) {\n    const x = (xAxis === 'partition' ? partition : Number(latest?.timestamp)) || null;\n\n    if (x === null) {\n      // exclude materializations where partition = null from partitioned graphs\n      continue;\n    }\n\n    // Add an entry for every numeric metadata label\n    for (const label of numericMetadataLabels) {\n      const entry = latest?.metadataEntries.find((l) => l.label === label);\n      if (!entry) {\n        append(label, {x, y: NaN});\n        continue;\n      }\n\n      let y = NaN;\n      if (entry.__typename === 'IntMetadataEntry') {\n        if (entry.intValue !== null) {\n          y = entry.intValue;\n        } else {\n          // will incur precision loss here\n          y = parseInt(entry.intRepr);\n        }\n      }\n      if (entry.__typename === 'FloatMetadataEntry' && entry.floatValue !== null) {\n        y = entry.floatValue;\n      }\n      append(label, {x, y});\n    }\n  }\n\n  for (const serie of Object.values(series)) {\n    const xs = serie.values.map((v) => v.xNumeric);\n    const ys = serie.values.map((v) => v.y).filter((v) => !isNaN(v));\n    serie.minXNumeric = Math.min(...xs);\n    serie.maxXNumeric = Math.max(...xs);\n    serie.minY = Math.min(...ys);\n    serie.maxY = Math.max(...ys);\n  }\n  return series;\n};\n","import {gql} from '@apollo/client';\nimport {Box, MetadataTable} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DAGSTER_TYPE_FRAGMENT} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntry.types';\n\nimport {AssetNodeOpMetadataFragment} from './types/AssetMetadata.types';\n\nexport const metadataForAssetNode = (\n  assetNode: AssetNodeOpMetadataFragment,\n): {assetType?: DagsterTypeFragment; assetMetadata: MetadataEntryFragment[]} => {\n  const assetType = assetNode.type ? assetNode.type : undefined;\n  const assetMetadata = assetNode.metadataEntries || [];\n  return {assetType, assetMetadata};\n};\n\nexport const AssetMetadataTable: React.FC<{\n  assetMetadata: MetadataEntryFragment[];\n  repoLocation: string;\n}> = ({assetMetadata, repoLocation}) => {\n  const rows = assetMetadata.map((entry) => {\n    return {\n      key: entry.label,\n      value: <MetadataEntry entry={entry} repoLocation={repoLocation} />,\n    };\n  });\n  return (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      <MetadataTable rows={rows} />\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_OP_METADATA_FRAGMENT = gql`\n  fragment AssetNodeOpMetadataFragment on AssetNode {\n    id\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    type {\n      __typename\n      ...DagsterTypeFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${DAGSTER_TYPE_FRAGMENT}\n`;\n","import {Colors, Icon, Box, Tooltip, IconName} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetNodeFragment} from '../asset-graph/types/AssetNode.types';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\n\nexport const partitionCountString = (count: number | undefined, adjective = '') =>\n  `${count === undefined ? '-' : count.toLocaleString()} ${adjective}${adjective ? ' ' : ''}${\n    count === 1 ? 'partition' : 'partitions'\n  }`;\n\nconst countMissing = (partitionStats: LiveDataForNode['partitionStats'] | null | undefined) =>\n  partitionStats\n    ? partitionStats.numPartitions -\n      partitionStats.numFailed -\n      partitionStats.numMaterializing -\n      partitionStats.numMaterialized\n    : undefined;\n\nexport const StyleForAssetPartitionStatus: {\n  [state: string]: {\n    background: string;\n    foreground: string;\n    border: string;\n    icon: IconName;\n    adjective: string;\n  };\n} = {\n  [AssetPartitionStatus.FAILED]: {\n    background: Colors.Red50,\n    foreground: Colors.Red700,\n    border: Colors.Red500,\n    icon: 'partition_failure',\n    adjective: 'failed',\n  },\n  [AssetPartitionStatus.MATERIALIZED]: {\n    background: Colors.Green50,\n    foreground: Colors.Green700,\n    border: Colors.Green500,\n    icon: 'partition_success',\n    adjective: 'materialized',\n  },\n  [AssetPartitionStatus.MATERIALIZING]: {\n    background: Colors.Blue50,\n    foreground: Colors.Blue700,\n    border: Colors.Blue500,\n    icon: 'partition_success',\n    adjective: 'materializing',\n  },\n  [AssetPartitionStatus.MISSING]: {\n    background: Colors.Gray100,\n    foreground: Colors.Gray900,\n    border: Colors.Gray500,\n    icon: 'partition_missing',\n    adjective: 'missing',\n  },\n};\n\nexport const PartitionCountTags: React.FC<{\n  definition: AssetNodeFragment;\n  liveData: LiveDataForNode | undefined;\n}> = (props) => {\n  const data = props.liveData?.partitionStats;\n  return (\n    <Box style={{display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: 2}}>\n      <PartitionCountTag\n        status={AssetPartitionStatus.MATERIALIZED}\n        value={data?.numMaterialized}\n        total={data?.numPartitions}\n      />\n      <PartitionCountTag\n        status={AssetPartitionStatus.MISSING}\n        value={countMissing(data)}\n        total={data?.numPartitions}\n      />\n      <PartitionCountTag\n        status={AssetPartitionStatus.FAILED}\n        value={data?.numFailed}\n        total={data?.numPartitions}\n      />\n    </Box>\n  );\n};\n\nconst PartitionCountTag: React.FC<{\n  status: AssetPartitionStatus;\n  value: number | undefined;\n  total: number | undefined;\n}> = ({status, value, total}) => {\n  const style = StyleForAssetPartitionStatus[status];\n  const foreground = value ? style.foreground : Colors.Gray500;\n  const background = value ? style.background : Colors.Gray50;\n\n  return (\n    <Tooltip\n      display=\"block\"\n      position=\"top\"\n      canShow={value !== undefined}\n      content={partitionCountString(value, style.adjective)}\n    >\n      <PartitionCountContainer style={{color: foreground, background}}>\n        <Icon name={style.icon} color={foreground} size={12} />\n        {value === undefined ? '—' : value === total ? 'All' : value > 1000 ? '999+' : value}\n      </PartitionCountContainer>\n    </Tooltip>\n  );\n};\n\nexport const PartitionCountLabels: React.FC<{\n  partitionStats: LiveDataForNode['partitionStats'] | null | undefined;\n}> = ({partitionStats}) => {\n  return (\n    <Box style={{display: 'flex', gap: 8}}>\n      <PartitionCountLabel\n        status={AssetPartitionStatus.MATERIALIZED}\n        value={partitionStats?.numMaterialized}\n        total={partitionStats?.numPartitions}\n      />\n      <PartitionCountLabel\n        status={AssetPartitionStatus.MISSING}\n        value={countMissing(partitionStats)}\n        total={partitionStats?.numPartitions}\n      />\n      <PartitionCountLabel\n        status={AssetPartitionStatus.FAILED}\n        value={partitionStats?.numFailed}\n        total={partitionStats?.numPartitions}\n      />\n      <PartitionCountLabel\n        status={AssetPartitionStatus.MATERIALIZING}\n        value={partitionStats?.numMaterializing}\n        total={partitionStats?.numPartitions}\n      />\n    </Box>\n  );\n};\n\nconst PartitionCountLabel: React.FC<{\n  status: AssetPartitionStatus;\n  value: number | undefined;\n  total: number | undefined;\n}> = ({status, value, total}) => {\n  const style = StyleForAssetPartitionStatus[status];\n\n  return (\n    <Tooltip\n      display=\"block\"\n      position=\"top\"\n      canShow={value !== undefined}\n      content={partitionCountString(value, style.adjective)}\n    >\n      <Box\n        flex={{gap: 4, alignItems: 'center'}}\n        style={{color: value === undefined || value === 0 ? Colors.Gray300 : Colors.Dark}}\n      >\n        <Icon name={style.icon} color={value ? style.border : Colors.Gray300} size={12} />\n        {value === undefined ? '—' : value === total ? 'All' : value.toLocaleString()}\n      </Box>\n    </Tooltip>\n  );\n};\n\n// Necessary to remove the outline we get with the tooltip applying a tabIndex\nconst PartitionCountContainer = styled.div`\n  width: 100%;\n  border-radius: 6px;\n  font-size: 12px;\n  gap: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 4px;\n`;\n","import {Box, Colors} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Inner} from '../ui/VirtualizedTable';\n\nimport {AssetListRow, AssetListContainer} from './AssetEventList';\nimport {AssetPartitionStatus, assetPartitionStatusesToStyle} from './AssetPartitionStatus';\n\nexport interface AssetPartitionListProps {\n  partitions: string[];\n  statusForPartition: (dimensionKey: string) => AssetPartitionStatus[];\n  focusedDimensionKey?: string;\n  setFocusedDimensionKey?: (dimensionKey: string | undefined) => void;\n}\nexport const AssetPartitionList: React.FC<AssetPartitionListProps> = ({\n  focusedDimensionKey,\n  setFocusedDimensionKey,\n  statusForPartition,\n  partitions,\n}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: partitions.length,\n    getItemKey: (idx) => partitions[idx],\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 36,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  React.useEffect(() => {\n    if (focusedDimensionKey) {\n      rowVirtualizer.scrollToIndex(partitions.indexOf(focusedDimensionKey), {\n        smoothScroll: false,\n        align: 'auto',\n      });\n    }\n  }, [focusedDimensionKey, rowVirtualizer, partitions]);\n\n  return (\n    <AssetListContainer\n      ref={parentRef}\n      tabIndex={-1}\n      onKeyDown={(e) => {\n        const shift = {ArrowDown: 1, ArrowUp: -1}[e.key];\n        if (!setFocusedDimensionKey || !shift || !focusedDimensionKey || e.isDefaultPrevented()) {\n          return;\n        }\n        const nextIdx = partitions.indexOf(focusedDimensionKey) + shift;\n        const next = partitions[nextIdx];\n        if (next) {\n          e.preventDefault();\n          setFocusedDimensionKey(next);\n        }\n      }}\n    >\n      <Inner $totalHeight={totalHeight}>\n        {items.map(({index, key, size, start}) => {\n          const dimensionKey = partitions[index];\n          const state = statusForPartition(dimensionKey);\n          return (\n            <AssetListRow\n              key={key}\n              $height={size}\n              $start={start}\n              $focused={dimensionKey === focusedDimensionKey}\n              onClick={(e) => {\n                // If you're interacting with something in the row, don't trigger a focus change.\n                // Since focus is stored in the URL bar this overwrites any link click navigation.\n                // We could alternatively e.preventDefault() on every link but it's easy to forget.\n                if (e.target instanceof HTMLElement && e.target.closest('a')) {\n                  return;\n                }\n                setFocusedDimensionKey?.(\n                  focusedDimensionKey !== dimensionKey ? dimensionKey : undefined,\n                );\n              }}\n            >\n              <Box\n                style={{height: size}}\n                padding={{left: 24, right: 12}}\n                flex={{direction: 'column', justifyContent: 'center', gap: 8}}\n                border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n              >\n                <Box flex={{gap: 4, direction: 'row', alignItems: 'center'}}>\n                  {dimensionKey}\n                  <div style={{flex: 1}} />\n                  {/* Note: we could just state.map, but we want these in a particular order*/}\n                  {state.includes(AssetPartitionStatus.MISSING) && (\n                    <AssetPartitionStatusDot status={[AssetPartitionStatus.MISSING]} />\n                  )}\n                  {state.includes(AssetPartitionStatus.FAILED) && (\n                    <AssetPartitionStatusDot status={[AssetPartitionStatus.FAILED]} />\n                  )}\n                  {state.includes(AssetPartitionStatus.MATERIALIZING) && (\n                    <AssetPartitionStatusDot status={[AssetPartitionStatus.MATERIALIZING]} />\n                  )}\n                  {state.includes(AssetPartitionStatus.MATERIALIZED) && (\n                    <AssetPartitionStatusDot status={[AssetPartitionStatus.MATERIALIZED]} />\n                  )}\n                </Box>\n              </Box>\n            </AssetListRow>\n          );\n        })}\n      </Inner>\n    </AssetListContainer>\n  );\n};\n\nexport const AssetPartitionStatusDot = ({status}: {status: AssetPartitionStatus[]}) => (\n  <div\n    style={{\n      width: 10,\n      height: 10,\n      borderRadius: '100%',\n      flexShrink: 0,\n      ...assetPartitionStatusesToStyle(status),\n    }}\n  />\n);\n","import {Tooltip, Tag} from '@dagster-io/ui';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetNodeLiveFreshnessPolicyFragment} from '../asset-graph/types/AssetNode.types';\nimport {humanCronString} from '../schedules/humanCronString';\n\nconst STALE_OVERDUE_MSG = `A materialization incorporating more recent upstream data is overdue.`;\nconst STALE_UNMATERIALIZED_MSG = `This asset has never been materialized.`;\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\ntype LiveDataWithMinutesLate = LiveDataForNode & {\n  freshnessInfo: NonNullable<LiveDataForNode['freshnessInfo']> & {currentMinutesLate: number};\n};\n\nexport function isAssetLate(liveData?: LiveDataForNode): liveData is LiveDataWithMinutesLate {\n  return (\n    (liveData?.freshnessInfo && (liveData?.freshnessInfo.currentMinutesLate || 0) > 0) || false\n  );\n}\n\nexport const humanizedLateString = (minLate: number) =>\n  `${dayjs.duration(minLate, 'minutes').humanize(false)} overdue`;\n\nexport const CurrentMinutesLateTag: React.FC<{\n  liveData: LiveDataForNode;\n  policyOnHover?: boolean;\n}> = ({liveData, policyOnHover}) => {\n  const {freshnessInfo, freshnessPolicy} = liveData;\n  const description = policyOnHover ? freshnessPolicyDescription(freshnessPolicy) : '';\n\n  if (!freshnessInfo) {\n    return null;\n  }\n\n  if (freshnessInfo.currentMinutesLate === null) {\n    return (\n      <Tooltip\n        content={<div style={{maxWidth: 400}}>{`${STALE_UNMATERIALIZED_MSG} ${description}`}</div>}\n      >\n        <Tag intent=\"danger\" icon=\"warning\">\n          Overdue\n        </Tag>\n      </Tooltip>\n    );\n  }\n\n  if (freshnessInfo.currentMinutesLate === 0) {\n    return description ? (\n      <Tooltip content={freshnessPolicyDescription(freshnessPolicy)}>\n        <Tag intent=\"success\" icon=\"check_circle\" />\n      </Tooltip>\n    ) : (\n      <Tag intent=\"success\" icon=\"check_circle\" />\n    );\n  }\n\n  return (\n    <Tooltip content={<div style={{maxWidth: 400}}>{`${STALE_OVERDUE_MSG} ${description}`}</div>}>\n      <Tag intent=\"danger\" icon=\"warning\">\n        {humanizedLateString(freshnessInfo.currentMinutesLate)}\n      </Tag>\n    </Tooltip>\n  );\n};\n\nexport const freshnessPolicyDescription = (\n  freshnessPolicy: AssetNodeLiveFreshnessPolicyFragment | null,\n) => {\n  if (!freshnessPolicy) {\n    return '';\n  }\n\n  const {cronSchedule, maximumLagMinutes, cronScheduleTimezone} = freshnessPolicy;\n  const nbsp = '\\xa0';\n  const cronDesc = cronSchedule\n    ? humanCronString(cronSchedule, cronScheduleTimezone ? cronScheduleTimezone : 'UTC').replace(\n        /^At /,\n        '',\n      )\n    : '';\n  const lagDesc =\n    maximumLagMinutes % 30 === 0\n      ? `${maximumLagMinutes / 60} hour${maximumLagMinutes / 60 !== 1 ? 's' : ''}`\n      : `${maximumLagMinutes} min`;\n\n  if (cronDesc) {\n    return `By ${cronDesc}, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  } else {\n    return `At any point in time, this asset should incorporate all data up to ${lagDesc} before that${nbsp}time.`;\n  }\n};\n","import {Alert, Box, Spinner} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const CurrentRunsBanner: React.FC<{liveData?: LiveDataForNode; border: BorderSetting}> = ({\n  liveData,\n  border,\n}) => {\n  const {inProgressRunIds = [], unstartedRunIds = []} = liveData || {};\n\n  if (inProgressRunIds.length === 0 && unstartedRunIds.length === 0) {\n    return null;\n  }\n  return (\n    <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n      <Alert\n        intent=\"info\"\n        icon={<Spinner purpose=\"body-text\" />}\n        title={\n          <div style={{fontWeight: 400}}>\n            {inProgressRunIds.length > 0 && (\n              <>\n                {inProgressRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {inProgressRunIds.length === 1 ? 'is' : 'are'} currently refreshing this asset.\n              </>\n            )}\n            {unstartedRunIds.length > 0 && (\n              <>\n                {unstartedRunIds.map((runId) => (\n                  <React.Fragment key={runId}>\n                    Run{' '}\n                    <Link to={`/runs/${runId}`}>\n                      {titleForRun({\n                        runId,\n                      })}\n                    </Link>\n                  </React.Fragment>\n                ))}{' '}\n                {unstartedRunIds.length === 1 ? 'has' : 'have'} started and will refresh this asset.\n              </>\n            )}\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const DependsOnSelfBanner: React.FC = () => {\n  return (\n    <Box\n      padding={{vertical: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"info\"\n        icon={\n          <Icon name=\"history_toggle_off\" size={16} color={Colors.Blue700} style={{marginTop: 1}} />\n        }\n        title={\n          <div style={{fontWeight: 400}}>This asset depends on earlier partitions of itself. </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport {BorderSetting, DirectionalSpacing} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AssetLatestInfoRunFragment} from '../asset-graph/types/useLiveDataForAssetKeys.types';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const FailedRunSinceMaterializationBanner: React.FC<{\n  run: AssetLatestInfoRunFragment | null;\n  padding?: DirectionalSpacing;\n  border?: BorderSetting;\n}> = ({run, border, padding = {vertical: 16, left: 24, right: 12}}) => {\n  if (run) {\n    return (\n      <Box padding={padding} border={border}>\n        <Alert\n          intent=\"error\"\n          title={\n            <div style={{fontWeight: 400}}>\n              Run <Link to={`/runs/${run.id}`}>{titleForRun({runId: run.id})}</Link> failed to\n              materialize this asset.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n  return null;\n};\n","import styled from 'styled-components/macro';\n\nimport {Colors} from './Colors';\nimport {IconWrapper} from './Icon';\n\nexport const RadioContainer = styled.div`\n  .bp4-control {\n    margin-bottom: 0;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    input {\n      display: none;\n    }\n  }\n\n  .bp4-control.bp4-radio {\n    padding: 4px 4px 4px 0;\n  }\n\n  .bp4-control.bp4-radio.bp4-disabled {\n    cursor: default;\n    color: ${Colors.Gray300};\n\n    ${IconWrapper} {\n      opacity: 0.3;\n    }\n  }\n\n  .bp4-control .bp4-control-indicator {\n    margin: 0;\n    margin-right: 8px;\n  }\n\n  .bp4-control input:checked ~ .bp4-control-indicator {\n    background-color: ${Colors.Blue500};\n  }\n\n  .bp4-control.bp4-radio input:disabled ~ .bp4-control-indicator {\n    cursor: default;\n    opacity: 0.7;\n  }\n\n  .bp4-control.bp4-radio input:disabled:checked ~ .bp4-control-indicator {\n    background-color: ${Colors.Blue200};\n  }\n\n  .bp4-control .bp4-control-indicator,\n  .bp4-control .bp4-control-indicator::before {\n    width: 18px;\n    height: 18px;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  RunningBackfillsNoticeQuery,\n  RunningBackfillsNoticeQueryVariables,\n} from './types/RunningBackfillsNotice.types';\n\nexport const RunningBackfillsNotice: React.FC<{partitionSetName: string}> = ({\n  partitionSetName,\n}) => {\n  const {data} = useQuery<RunningBackfillsNoticeQuery, RunningBackfillsNoticeQueryVariables>(\n    RUNNING_BACKFILLS_NOTICE_QUERY,\n  );\n\n  const runningBackfills =\n    data?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n      ? data.partitionBackfillsOrError.results\n      : [];\n\n  const runningBackfillCount = runningBackfills.filter(\n    (r) => r.partitionSetName === partitionSetName,\n  ).length;\n\n  if (runningBackfillCount === 0) {\n    return <span />;\n  }\n  return (\n    <div style={{color: Colors.Gray400, maxWidth: 350}}>\n      {runningBackfillCount === 1\n        ? 'Note: A backfill has been requested for this job and may be refreshing displayed assets. '\n        : `Note: ${runningBackfillCount} backfills have been requested for this job and may be refreshing displayed assets. `}\n      <Link to=\"/overview/backfills\" target=\"_blank\">\n        <Box flex={{gap: 4, display: 'inline-flex', alignItems: 'center'}}>\n          View <Icon name=\"open_in_new\" color={Colors.Link} />\n        </Box>\n      </Link>\n    </div>\n  );\n};\n\nexport const RUNNING_BACKFILLS_NOTICE_QUERY = gql`\n  query RunningBackfillsNoticeQuery {\n    partitionBackfillsOrError(status: REQUESTED) {\n      __typename\n      ... on PartitionBackfills {\n        results {\n          id\n          partitionSetName\n        }\n      }\n    }\n  }\n`;\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {Radio} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  Tooltip,\n  Alert,\n  Checkbox,\n  Icon,\n  Subheading,\n  RadioContainer,\n} from '@dagster-io/ui';\nimport reject from 'lodash/reject';\nimport React from 'react';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  displayNameForAssetKey,\n  isHiddenAssetGroupJob,\n  itemWithAssetKey,\n} from '../asset-graph/Utils';\nimport {AssetKey} from '../assets/types';\nimport {LaunchBackfillParams, PartitionDefinitionType} from '../graphql/types';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfillMutation,\n  LaunchPartitionBackfillMutationVariables,\n} from '../instance/types/BackfillUtils.types';\nimport {CONFIG_PARTITION_SELECTION_QUERY} from '../launchpad/ConfigEditorConfigPicker';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {TagEditor, TagContainer} from '../launchpad/TagEditor';\nimport {\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from '../launchpad/types/ConfigEditorConfigPicker.types';\nimport {\n  DaemonNotRunningAlert,\n  DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT,\n  showBackfillErrorToast,\n  showBackfillSuccessToast,\n  UsingDefaultLauncherAlert,\n  USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT,\n} from '../partitions/BackfillMessaging';\nimport {DimensionRangeWizard} from '../partitions/DimensionRangeWizard';\nimport {assembleIntoSpans, stringForSpan} from '../partitions/SpanRepresentation';\nimport {DagsterTag} from '../runs/RunTag';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\nimport {AssetPartitionStatus} from './AssetPartitionStatus';\nimport {\n  executionParamsForAssetJob,\n  LaunchAssetsChoosePartitionsTarget,\n} from './LaunchAssetExecutionButton';\nimport {\n  explodePartitionKeysInSelection,\n  mergedAssetHealth,\n  partitionDefinitionsEqual,\n} from './MultipartitioningSupport';\nimport {PartitionHealthSummary} from './PartitionHealthSummary';\nimport {RunningBackfillsNotice} from './RunningBackfillsNotice';\nimport {\n  LaunchAssetChoosePartitionsQuery,\n  LaunchAssetChoosePartitionsQueryVariables,\n} from './types/LaunchAssetChoosePartitionsDialog.types';\nimport {PartitionDefinitionForLaunchAssetFragment} from './types/LaunchAssetExecutionButton.types';\nimport {usePartitionDimensionSelections} from './usePartitionDimensionSelections';\nimport {PartitionDimensionSelection, usePartitionHealthData} from './usePartitionHealthData';\n\ninterface Props {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  repoAddress: RepoAddress;\n  target: LaunchAssetsChoosePartitionsTarget;\n  assets: {\n    assetKey: AssetKey;\n    opNames: string[];\n    partitionDefinition: PartitionDefinitionForLaunchAssetFragment | null;\n  }[];\n  upstreamAssetKeys: AssetKey[]; // single layer of upstream dependencies\n  refetch?: () => Promise<void>;\n}\n\nexport const LaunchAssetChoosePartitionsDialog: React.FC<Props> = (props) => {\n  const displayName =\n    props.assets.length > 1\n      ? `${props.assets.length} assets`\n      : displayNameForAssetKey(props.assets[0].assetKey);\n\n  const title = `Launch runs to materialize ${displayName}`;\n\n  return (\n    <Dialog\n      style={{width: 700}}\n      isOpen={props.open}\n      canEscapeKeyClose\n      canOutsideClickClose\n      onClose={() => props.setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <LaunchAssetChoosePartitionsDialogBody {...props} />\n    </Dialog>\n  );\n};\n\n// Note: This dialog loads a lot of data - the body is broken into a separate\n// component so we can be *sure* the hooks won't load data until it's opened.\n// (<Dialog> does not render it's children until open=true)\n//\n// Additionally, we want the dialog to reset when it's closed and re-opened so\n// that partition health, etc. is up-to-date.\n//\nconst LaunchAssetChoosePartitionsDialogBody: React.FC<Props> = ({\n  setOpen,\n  assets,\n  repoAddress,\n  target,\n  upstreamAssetKeys,\n  refetch: _refetch,\n}) => {\n  const partitionedAssets = assets.filter((a) => !!a.partitionDefinition);\n\n  const {\n    permissions: {canLaunchPipelineExecution, canLaunchPartitionBackfill},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n  const [launching, setLaunching] = React.useState(false);\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n\n  const [previewCount, setPreviewCount] = React.useState(0);\n  const morePreviewsCount = partitionedAssets.length - previewCount;\n\n  const [lastRefresh, setLastRefresh] = React.useState(Date.now());\n\n  const refetch = async () => {\n    await _refetch?.();\n    setLastRefresh(Date.now());\n  };\n\n  const assetHealth = usePartitionHealthData(\n    partitionedAssets.map((a) => a.assetKey),\n    lastRefresh.toString(),\n    'immediate',\n  );\n\n  const assetHealthLoading = assetHealth.length === 0;\n\n  const displayedHealth = React.useMemo(() => {\n    if (target.type === 'job' || assetHealthLoading) {\n      return mergedAssetHealth(assetHealth);\n    }\n    return assetHealth.find(itemWithAssetKey(target.anchorAssetKey)) || mergedAssetHealth([]);\n  }, [assetHealth, assetHealthLoading, target]);\n\n  const displayedBaseAsset =\n    target.type === 'job'\n      ? partitionedAssets[0]\n      : partitionedAssets.find(itemWithAssetKey(target.anchorAssetKey));\n\n  const displayedPartitionDefinition = displayedBaseAsset?.partitionDefinition;\n\n  const knownDimensions = partitionedAssets[0].partitionDefinition?.dimensionTypes || [];\n  const [missingFailedOnly, setMissingFailedOnly] = React.useState(true);\n\n  const [selections, setSelections] = usePartitionDimensionSelections({\n    knownDimensionNames: knownDimensions.map((d) => d.name),\n    modifyQueryString: false,\n    assetHealth: displayedHealth,\n    skipPartitionKeyValidation:\n      displayedPartitionDefinition?.type === PartitionDefinitionType.DYNAMIC,\n    shouldReadPartitionQueryStringParam: true,\n  });\n\n  const keysInSelection = React.useMemo(\n    () =>\n      explodePartitionKeysInSelection(selections, (dimensionKeys: string[]) => {\n        let states = displayedHealth.stateForKey(dimensionKeys);\n        if (!(states instanceof Array)) {\n          states = [states];\n        }\n        return states;\n      }),\n    [selections, displayedHealth],\n  );\n\n  const [launchWithRangesAsTags, setLaunchWithRangesAsTags] = React.useState(false);\n  const canLaunchWithRangesAsTags =\n    selections.every((s) => s.selectedRanges.length === 1) &&\n    selections.some((s) => s.selectedKeys.length > 1);\n  const keysFiltered = React.useMemo(\n    () =>\n      missingFailedOnly\n        ? keysInSelection.filter((key) =>\n            [AssetPartitionStatus.MISSING, AssetPartitionStatus.FAILED].some((state) =>\n              key.state.includes(state),\n            ),\n          )\n        : keysInSelection,\n    [keysInSelection, missingFailedOnly],\n  );\n\n  const client = useApolloClient();\n  const history = useHistory();\n\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n  const launchAsBackfill =\n    target.type === 'pureWithAnchorAsset' || (!launchWithRangesAsTags && keysFiltered.length !== 1);\n\n  React.useEffect(() => {\n    !canLaunchWithRangesAsTags && setLaunchWithRangesAsTags(false);\n  }, [canLaunchWithRangesAsTags]);\n\n  React.useEffect(() => {\n    launchWithRangesAsTags && setMissingFailedOnly(false);\n  }, [launchWithRangesAsTags]);\n\n  React.useEffect(() => {\n    target.type === 'pureWithAnchorAsset' && setMissingFailedOnly(false);\n  }, [target]);\n\n  const onLaunch = async () => {\n    setLaunching(true);\n\n    if (launchAsBackfill) {\n      await onLaunchAsBackfill();\n    } else {\n      await onLaunchAsSingleRun();\n    }\n    setLaunching(false);\n  };\n\n  const onLaunchAsSingleRun = async () => {\n    if (!('jobName' in target)) {\n      // Should never happen, this is essentially an assertion failure\n      showCustomAlert({\n        title: 'Unable to launch as single run',\n        body:\n          'This selection is not valid for a single run launch. ' +\n          'Please report this error to the Dagster team.',\n      });\n      return;\n    }\n\n    if (!canLaunchPipelineExecution) {\n      // Should never happen, this is essentially an assertion failure\n      showCustomAlert({\n        title: 'Unable to launch as single run',\n        body: 'You do not have permission to launch this job.',\n      });\n    }\n\n    const {data: tagAndConfigData} = await client.query<\n      ConfigPartitionSelectionQuery,\n      ConfigPartitionSelectionQueryVariables\n    >({\n      query: CONFIG_PARTITION_SELECTION_QUERY,\n      fetchPolicy: 'network-only',\n      variables: {\n        repositorySelector: {\n          repositoryLocationName: repoAddress.location,\n          repositoryName: repoAddress.name,\n        },\n        partitionSetName: target.partitionSetName,\n        partitionName: keysFiltered[0].partitionKey,\n      },\n    });\n\n    if (\n      !tagAndConfigData ||\n      !tagAndConfigData.partitionSetOrError ||\n      tagAndConfigData.partitionSetOrError.__typename !== 'PartitionSet' ||\n      !tagAndConfigData.partitionSetOrError.partition\n    ) {\n      return;\n    }\n\n    const {partition} = tagAndConfigData.partitionSetOrError;\n\n    if (partition.tagsOrError.__typename === 'PythonError') {\n      showCustomAlert({\n        title: 'Unable to load tags',\n        body: <PythonErrorInfo error={partition.tagsOrError} />,\n      });\n      return;\n    }\n    if (partition.runConfigOrError.__typename === 'PythonError') {\n      showCustomAlert({\n        title: 'Unable to load tags',\n        body: <PythonErrorInfo error={partition.runConfigOrError} />,\n      });\n      return;\n    }\n\n    const runConfigData = partition.runConfigOrError.yaml || '';\n    let allTags = [...partition.tagsOrError.results, ...tags];\n\n    if (launchWithRangesAsTags) {\n      allTags = allTags.filter((t) => !t.key.startsWith(DagsterTag.Partition));\n      allTags.push({\n        key: DagsterTag.AssetPartitionRangeStart,\n        value: keysInSelection[0].partitionKey,\n      });\n      allTags.push({\n        key: DagsterTag.AssetPartitionRangeEnd,\n        value: keysInSelection[keysInSelection.length - 1].partitionKey,\n      });\n    }\n\n    const result = await launchWithTelemetry(\n      {\n        executionParams: {\n          ...executionParamsForAssetJob(repoAddress, target.jobName, assets, allTags),\n          runConfigData,\n          mode: partition.mode,\n        },\n      },\n      'toast',\n    );\n\n    if (result?.__typename === 'LaunchRunSuccess') {\n      setOpen(false);\n    }\n  };\n\n  const onLaunchAsBackfill = async () => {\n    const selectorIfJobPage: LaunchBackfillParams['selector'] | undefined =\n      'jobName' in target && !isHiddenAssetGroupJob(target.jobName)\n        ? {\n            partitionSetName: target.partitionSetName,\n            repositorySelector: {\n              repositoryLocationName: repoAddress.location,\n              repositoryName: repoAddress.name,\n            },\n          }\n        : undefined;\n\n    const {data: launchBackfillData} = await client.mutate<\n      LaunchPartitionBackfillMutation,\n      LaunchPartitionBackfillMutationVariables\n    >({\n      mutation: LAUNCH_PARTITION_BACKFILL_MUTATION,\n      variables: {\n        backfillParams: {\n          selector: selectorIfJobPage,\n          assetSelection: assets.map((a) => ({path: a.assetKey.path})),\n          partitionNames: keysFiltered.map((k) => k.partitionKey),\n          fromFailure: false,\n          tags,\n        },\n      },\n    });\n\n    if (launchBackfillData?.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      showBackfillSuccessToast(\n        history,\n        launchBackfillData?.launchPartitionBackfill.backfillId,\n        true,\n      );\n      setOpen(false);\n    } else {\n      showBackfillErrorToast(launchBackfillData);\n    }\n  };\n\n  const launchButton = () => {\n    if (launchAsBackfill && !canLaunchPartitionBackfill) {\n      return (\n        <Tooltip content={disabledReasons.canLaunchPartitionBackfill}>\n          <Button disabled>\n            {target.type === 'job'\n              ? `Launch ${keysFiltered.length}-run backfill`\n              : 'Launch backfill'}\n          </Button>\n        </Tooltip>\n      );\n    }\n\n    if (!launchAsBackfill && !canLaunchPipelineExecution) {\n      return (\n        <Tooltip content={disabledReasons.canLaunchPipelineExecution}>\n          <Button disabled>Launch 1 run</Button>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Button\n        data-testid={testId('launch-button')}\n        intent=\"primary\"\n        onClick={onLaunch}\n        disabled={keysFiltered.length === 0}\n        loading={launching}\n      >\n        {launching\n          ? 'Launching...'\n          : launchAsBackfill\n          ? target.type === 'job'\n            ? `Launch ${keysFiltered.length}-run backfill`\n            : 'Launch backfill'\n          : `Launch 1 run`}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <div data-testid={testId('choose-partitions-dialog')}>\n        <Warnings\n          launchAsBackfill={launchAsBackfill}\n          upstreamAssetKeys={upstreamAssetKeys}\n          selections={selections}\n          setSelections={setSelections}\n        />\n        <ToggleableSection\n          title={<Subheading>Partition selection</Subheading>}\n          isInitiallyOpen={true}\n        >\n          {target.type === 'pureWithAnchorAsset' && (\n            <Box\n              flex={{alignItems: 'center', gap: 8}}\n              padding={{top: 12, horizontal: 24}}\n              data-testid={testId('anchor-asset-label')}\n            >\n              <Icon name=\"asset\" />\n              <Subheading>{displayNameForAssetKey(target.anchorAssetKey)}</Subheading>\n            </Box>\n          )}\n          {selections.map((range, idx) => (\n            <Box\n              key={range.dimension.name}\n              border={{\n                side: 'bottom',\n                width: 1,\n                color: Colors.KeylineGray,\n              }}\n              padding={{vertical: 12, horizontal: 24}}\n            >\n              <Box as={Subheading} flex={{alignItems: 'center', gap: 8}}>\n                <Icon name=\"partition\" />\n                {range.dimension.name}\n              </Box>\n              <Box>\n                Select partitions to materialize.{' '}\n                {range.dimension.type === PartitionDefinitionType.TIME_WINDOW\n                  ? 'Click and drag to select a range on the timeline.'\n                  : null}\n              </Box>\n              <DimensionRangeWizard\n                partitionKeys={range.dimension.partitionKeys}\n                health={{\n                  ranges: displayedHealth.rangesForSingleDimension(\n                    idx,\n                    selections.length === 2 ? selections[1 - idx].selectedRanges : undefined,\n                  ),\n                }}\n                dimensionType={range.dimension.type}\n                selected={range.selectedKeys}\n                setSelected={(selectedKeys) =>\n                  setSelections((selections) =>\n                    selections.map((r) =>\n                      r.dimension === range.dimension ? {...r, selectedKeys} : r,\n                    ),\n                  )\n                }\n                partitionDefinitionName={\n                  displayedPartitionDefinition?.name ||\n                  displayedBaseAsset?.partitionDefinition?.dimensionTypes.find(\n                    (d) => d.name === range.dimension.name,\n                  )?.dynamicPartitionsDefinitionName\n                }\n                repoAddress={repoAddress}\n                refetch={refetch}\n              />\n\n              {target.type === 'pureWithAnchorAsset' && (\n                <Alert\n                  key=\"alert\"\n                  intent=\"info\"\n                  title=\"Dagster will materialize all partitions downstream of the selected partitions for the selected assets, using separate runs as needed.\"\n                />\n              )}\n            </Box>\n          ))}\n        </ToggleableSection>\n        <ToggleableSection\n          title={\n            <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n              <Subheading>Tags</Subheading>\n              <span>{tags.length} tags</span>\n            </Box>\n          }\n          isInitiallyOpen={false}\n        >\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            <div>Tags will be applied to all backfill runs</div>\n            {tags.length ? (\n              <TagContainer\n                tagsFromSession={tags}\n                onRequestEdit={() => setTagEditorOpen(true)}\n                actions={[\n                  {\n                    label: 'Remove',\n                    onClick: (tag) => {\n                      setTags(tags.filter((t) => t.key !== tag.key));\n                    },\n                  },\n                ]}\n              />\n            ) : null}\n            <div>\n              <Button onClick={() => setTagEditorOpen(true)}>\n                {`${tags.length ? 'Edit' : 'Add'} tags`}\n              </Button>\n            </div>\n          </Box>\n        </ToggleableSection>\n        <ToggleableSection\n          title={<Subheading data-testid={testId('backfill-options')}>Backfill options</Subheading>}\n          isInitiallyOpen={true}\n        >\n          {target.type === 'job' && (\n            <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 12}}>\n              <Checkbox\n                data-testid={testId('missing-only-checkbox')}\n                label=\"Backfill only failed and missing partitions within selection\"\n                checked={missingFailedOnly}\n                disabled={launchWithRangesAsTags}\n                onChange={() => setMissingFailedOnly(!missingFailedOnly)}\n              />\n              <RadioContainer>\n                <Subheading>Launch as...</Subheading>\n                <Radio\n                  data-testid={testId('ranges-as-tags-true-radio')}\n                  checked={canLaunchWithRangesAsTags && launchWithRangesAsTags}\n                  disabled={!canLaunchWithRangesAsTags}\n                  onChange={() => setLaunchWithRangesAsTags(!launchWithRangesAsTags)}\n                >\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                    <span>Single run</span>\n                    <Tooltip\n                      targetTagName=\"div\"\n                      position=\"top-left\"\n                      content={\n                        <div style={{maxWidth: 300}}>\n                          This option requires that your assets are written to operate on a\n                          partition key range via context.asset_partition_key_range_for_output or\n                          context.asset_partitions_time_window_for_output.\n                        </div>\n                      }\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                </Radio>\n                <Radio\n                  data-testid={testId('ranges-as-tags-false-radio')}\n                  checked={!canLaunchWithRangesAsTags || !launchWithRangesAsTags}\n                  disabled={!canLaunchWithRangesAsTags}\n                  onChange={() => setLaunchWithRangesAsTags(!launchWithRangesAsTags)}\n                >\n                  Multiple runs (One per selected partition)\n                </Radio>\n              </RadioContainer>\n            </Box>\n          )}\n        </ToggleableSection>\n\n        <Box padding={{horizontal: 24}}>\n          {previewCount > 0 && (\n            <Box\n              margin={{top: 16}}\n              flex={{direction: 'column', gap: 8}}\n              padding={{vertical: 16, horizontal: 20}}\n              border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n              background={Colors.Gray100}\n              style={{\n                marginLeft: -20,\n                marginRight: -20,\n                overflowY: 'auto',\n                overflowX: 'visible',\n                maxHeight: '35vh',\n              }}\n            >\n              {partitionedAssets.slice(0, previewCount).map((a) => (\n                <PartitionHealthSummary\n                  key={displayNameForAssetKey(a.assetKey)}\n                  assetKey={a.assetKey}\n                  showAssetKey\n                  data={assetHealth}\n                  selections={\n                    a.partitionDefinition &&\n                    displayedPartitionDefinition &&\n                    partitionDefinitionsEqual(a.partitionDefinition, displayedPartitionDefinition)\n                      ? selections\n                      : undefined\n                  }\n                />\n              ))}\n              {morePreviewsCount > 0 && (\n                <Box margin={{vertical: 8}}>\n                  <ButtonLink onClick={() => setPreviewCount(partitionedAssets.length)}>\n                    Show {morePreviewsCount} more {morePreviewsCount > 1 ? 'previews' : 'preview'}\n                  </ButtonLink>\n                </Box>\n              )}\n            </Box>\n          )}\n\n          {previewCount === 0 && partitionedAssets.length > 1 && (\n            <Box margin={{top: 16, bottom: 8}}>\n              <ButtonLink onClick={() => setPreviewCount(5)}>\n                Show per-asset partition health\n              </ButtonLink>\n            </Box>\n          )}\n        </Box>\n      </div>\n\n      <DialogFooter\n        topBorder\n        left={\n          'partitionSetName' in target && (\n            <RunningBackfillsNotice partitionSetName={target.partitionSetName} />\n          )\n        }\n      >\n        <Button intent=\"none\" onClick={() => setOpen(false)}>\n          Cancel\n        </Button>\n        {launchButton()}\n      </DialogFooter>\n    </>\n  );\n};\n\nconst UpstreamUnavailableWarning: React.FC<{\n  upstreamAssetKeys: AssetKey[];\n  selections: PartitionDimensionSelection[];\n  setSelections: (next: PartitionDimensionSelection[]) => void;\n}> = ({upstreamAssetKeys, selections, setSelections}) => {\n  // We want to warn if an immediately upstream asset 1) has the same partitioning and\n  // 2) is missing materializations for keys in `allSelected`. We only offer this feature\n  // for single-dimensional partitioned assets because it's difficult to express the\n  // unavailable partitions in the multi-dimensional case and our \"two range inputs\" won't\n  // allow us to remove missing individual pairs.\n  const upstreamAssetHealth = usePartitionHealthData(upstreamAssetKeys);\n  if (upstreamAssetHealth.length === 0) {\n    return null;\n  }\n\n  const upstreamUnavailable = (singleDimensionKey: string) =>\n    upstreamAssetHealth.some((a) => {\n      // If the key is not undefined, it's present in the partition key space of the asset\n      return (\n        a.dimensions.length && a.stateForKey([singleDimensionKey]) === AssetPartitionStatus.MISSING\n      );\n    });\n\n  const upstreamUnavailableSpans =\n    selections.length === 1\n      ? assembleIntoSpans(selections[0].selectedKeys, upstreamUnavailable).filter(\n          (s) => s.status === true,\n        )\n      : [];\n\n  if (upstreamUnavailableSpans.length === 0) {\n    return null;\n  }\n\n  const onRemoveUpstreamUnavailable = () => {\n    if (selections.length > 1) {\n      throw new Error('Assertion failed, this feature is only available for 1 dimensional assets');\n    }\n    setSelections([\n      {...selections[0], selectedKeys: reject(selections[0].selectedKeys, upstreamUnavailable)},\n    ]);\n  };\n\n  return (\n    <Alert\n      intent=\"warning\"\n      title=\"Upstream data missing\"\n      description={\n        <>\n          {upstreamUnavailableSpans\n            .map((span) => stringForSpan(span, selections[0].selectedKeys))\n            .join(', ')}\n          {\n            ' cannot be materialized because upstream materializations are missing. Consider materializing upstream assets or '\n          }\n          <ButtonLink underline=\"always\" onClick={onRemoveUpstreamUnavailable}>\n            remove these partitions\n          </ButtonLink>\n          {` to avoid failures.`}\n        </>\n      }\n    />\n  );\n};\n\nexport const LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY = gql`\n  query LaunchAssetChoosePartitionsQuery {\n    instance {\n      ...DaemonNotRunningAlertInstanceFragment\n      ...UsingDefaultLauncherAlertInstanceFragment\n    }\n  }\n\n  ${DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT}\n  ${USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT}\n`;\n\nconst Warnings = ({\n  launchAsBackfill,\n  upstreamAssetKeys,\n  selections,\n  setSelections,\n}: {\n  launchAsBackfill: boolean;\n  upstreamAssetKeys: AssetKey[];\n  selections: PartitionDimensionSelection[];\n  setSelections: (next: PartitionDimensionSelection[]) => void;\n}) => {\n  const instanceResult = useQuery<\n    LaunchAssetChoosePartitionsQuery,\n    LaunchAssetChoosePartitionsQueryVariables\n  >(LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY);\n  const instance = instanceResult.data?.instance;\n\n  const alerts = [\n    UpstreamUnavailableWarning({\n      upstreamAssetKeys,\n      selections,\n      setSelections,\n    }),\n    instance && launchAsBackfill && DaemonNotRunningAlert({instance}),\n    instance && launchAsBackfill && UsingDefaultLauncherAlert({instance}),\n  ]\n    .filter((a) => !!a)\n    .map((a, index) => <Box key={index}>{a}</Box>);\n\n  if (!instance || !alerts.length) {\n    return null;\n  }\n\n  return (\n    <ToggleableSection\n      background={Colors.Yellow50}\n      isInitiallyOpen={false}\n      title={\n        <Box\n          flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n          style={{color: Colors.Yellow700}}\n        >\n          <Box flex={{alignItems: 'center', gap: 12}}>\n            <Icon name=\"warning\" color={Colors.Yellow700} />\n            <Subheading>Warnings</Subheading>\n          </Box>\n          <span>{alerts.length} warnings</span>{' '}\n        </Box>\n      }\n    >\n      <Box flex={{direction: 'column', gap: 16}} padding={{vertical: 12, horizontal: 24}}>\n        {alerts}\n      </Box>\n    </ToggleableSection>\n  );\n};\n\nconst ToggleableSection = ({\n  isInitiallyOpen,\n  title,\n  children,\n  background,\n}: {\n  isInitiallyOpen: boolean;\n  title: React.ReactNode;\n  children: React.ReactNode;\n  background?: string;\n}) => {\n  const [isOpen, setIsOpen] = React.useState(isInitiallyOpen);\n  return (\n    <Box>\n      <Box\n        onClick={() => setIsOpen(!isOpen)}\n        background={background ?? Colors.Gray50}\n        border={{side: 'bottom', color: Colors.KeylineGray, width: 1}}\n        flex={{alignItems: 'center', direction: 'row'}}\n        padding={{vertical: 12, horizontal: 24}}\n        style={{cursor: 'pointer'}}\n      >\n        <Rotateable $rotate={!isOpen}>\n          <Icon name=\"arrow_drop_down\" />\n        </Rotateable>\n        <div style={{flex: 1}}>{title}</div>\n      </Box>\n      {isOpen && <Box>{children}</Box>}\n    </Box>\n  );\n};\n\nconst Rotateable = styled.span<{$rotate: boolean}>`\n  ${({$rotate}) => ($rotate ? 'transform: rotate(-90deg);' : '')}\n`;\n","import {ApolloClient, gql, useApolloClient} from '@apollo/client';\nimport {Box, Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui';\nimport pick from 'lodash/pick';\nimport uniq from 'lodash/uniq';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {\n  displayNameForAssetKey,\n  isHiddenAssetGroupJob,\n  LiveData,\n  toGraphId,\n  tokenForAssetKey,\n} from '../asset-graph/Utils';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {AssetLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {testId} from '../testing/testId';\nimport {CONFIG_TYPE_SCHEMA_FRAGMENT} from '../typeexplorer/ConfigTypeSchema';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from './AssetConfig';\nimport {MULTIPLE_DEFINITIONS_WARNING} from './AssetDefinedInMultipleReposNotice';\nimport {LaunchAssetChoosePartitionsDialog} from './LaunchAssetChoosePartitionsDialog';\nimport {partitionDefinitionsEqual} from './MultipartitioningSupport';\nimport {isAssetMissing, isAssetStale} from './Stale';\nimport {AssetKey} from './types';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n  LaunchAssetLoaderResourceQuery,\n  LaunchAssetLoaderResourceQueryVariables,\n  LaunchAssetCheckUpstreamQuery,\n  LaunchAssetCheckUpstreamQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\nexport type LaunchAssetsChoosePartitionsTarget =\n  | {type: 'job'; jobName: string; partitionSetName: string}\n  | {type: 'pureWithAnchorAsset'; anchorAssetKey: AssetKey};\n\ntype LaunchAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'launchpad';\n      jobName: string;\n      sessionPresets: Partial<IExecutionSession>;\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'partitions';\n      target: LaunchAssetsChoosePartitionsTarget;\n      assets: LaunchAssetExecutionAssetNodeFragment[];\n      upstreamAssetKeys: AssetKey[];\n      repoAddress: RepoAddress;\n    }\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nconst countOrBlank = (k: unknown[]) => (k.length > 1 ? ` (${k.length})` : '');\n\ntype Asset =\n  | {\n      assetKey: AssetKey;\n      hasMaterializePermission: boolean;\n      partitionDefinition: {__typename: string} | null;\n      isSource: boolean;\n    }\n  | {\n      assetKey: AssetKey;\n      hasMaterializePermission: boolean;\n      isPartitioned: boolean;\n      isSource: boolean;\n    };\n\nexport type AssetsInScope = {all: Asset[]; skipAllTerm?: boolean} | {selected: Asset[]};\n\ntype LaunchOption = {\n  assetKeys: AssetKey[];\n  label: string;\n  hasMaterializePermission: boolean;\n  icon?: JSX.Element;\n};\n\nconst isAnyPartitioned = (assets: Asset[]) =>\n  assets.some(\n    (a) =>\n      ('partitionDefinition' in a && !!a.partitionDefinition) ||\n      ('isPartitioned' in a && a.isPartitioned),\n  );\n\nexport const ERROR_INVALID_ASSET_SELECTION =\n  `Assets can only be materialized together if they are defined in` +\n  ` the same code location and share a partition space, or form a connected` +\n  ` graph in which root assets share the same partitioning.`;\n\nfunction optionsForButton(scope: AssetsInScope, liveDataForStale?: LiveData): LaunchOption[] {\n  // If you pass a set of selected assets, we always show just one option\n  // to materialize that selection.\n  if ('selected' in scope) {\n    const assets = scope.selected.filter((a) => !a.isSource);\n    const hasMaterializePermission = scope.selected.every(\n      (assetNode) => assetNode.hasMaterializePermission,\n    );\n\n    return [\n      {\n        assetKeys: assets.map((a) => a.assetKey),\n        label: `Materialize selected${countOrBlank(assets)}${isAnyPartitioned(assets) ? '…' : ''}`,\n        hasMaterializePermission,\n      },\n    ];\n  }\n\n  const options: LaunchOption[] = [];\n  const assets = scope.all.filter((a) => !a.isSource);\n  const hasMaterializePermission = assets.every((assetNode) => assetNode.hasMaterializePermission);\n\n  options.push({\n    assetKeys: assets.map((a) => a.assetKey),\n    label:\n      assets.length > 1 && !scope.skipAllTerm\n        ? `Materialize all${isAnyPartitioned(assets) ? '…' : ''}`\n        : `Materialize${isAnyPartitioned(assets) ? '…' : ''}`,\n    hasMaterializePermission,\n  });\n\n  if (liveDataForStale) {\n    const missingOrStale = assets.filter(\n      (a) =>\n        isAssetMissing(liveDataForStale[toGraphId(a.assetKey)]) ||\n        isAssetStale(liveDataForStale[toGraphId(a.assetKey)]),\n    );\n\n    options.push({\n      assetKeys: missingOrStale.map((a) => a.assetKey),\n      label: `Propagate changes${countOrBlank(missingOrStale)}`,\n      hasMaterializePermission,\n      icon: <Icon name=\"changes_present\" />,\n    });\n  }\n\n  return options;\n}\n\nexport const LaunchAssetExecutionButton: React.FC<{\n  scope: AssetsInScope;\n  liveDataForStale?: LiveData; // For \"stale\" dropdown options\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, liveDataForStale, preferredJobName, intent = 'primary'}) => {\n  const {onClick, loading, launchpadElement} = useMaterializationAction(preferredJobName);\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const options = optionsForButton(scope, liveDataForStale);\n  const firstOption = options[0];\n  const hasMaterializePermission = firstOption.hasMaterializePermission;\n\n  const {MaterializeButton} = useLaunchPadHooks();\n\n  if (!firstOption) {\n    return <span />;\n  }\n\n  if (!hasMaterializePermission) {\n    return (\n      <Tooltip content=\"You do not have permission to materialize assets\" position=\"bottom-right\">\n        <Button intent={intent} icon={<Icon name=\"materialization\" />} disabled>\n          {firstOption.label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <Box flex={{alignItems: 'center'}}>\n        <Tooltip\n          content=\"Shift+click to add configuration\"\n          position=\"bottom-right\"\n          useDisabledButtonTooltipFix\n        >\n          <MaterializeButton\n            intent={intent}\n            data-testid={testId('materialize-button')}\n            onClick={(e) => onClick(firstOption.assetKeys, e)}\n            style={{\n              borderTopRightRadius: 0,\n              borderBottomRightRadius: 0,\n              borderRight: `1px solid rgba(255,255,255,0.2)`,\n            }}\n            disabled={!firstOption.assetKeys.length}\n            icon={loading ? <Spinner purpose=\"body-text\" /> : <Icon name=\"materialization\" />}\n          >\n            {firstOption.label}\n          </MaterializeButton>\n        </Tooltip>\n\n        <Popover\n          isOpen={isOpen}\n          onInteraction={(nextOpen) => setIsOpen(nextOpen)}\n          position=\"bottom-right\"\n          content={\n            <Menu>\n              <MenuItem\n                text=\"Open in launchpad\"\n                icon={<Icon name=\"open_in_new\" />}\n                onClick={(e: React.MouseEvent<any>) => {\n                  onClick(firstOption.assetKeys, e, true);\n                }}\n              />\n              {options.slice(1).map((option) => (\n                <MenuItem\n                  key={option.label}\n                  text={option.label}\n                  icon={option.icon || 'materialization'}\n                  disabled={option.assetKeys.length === 0}\n                  onClick={(e) => onClick(option.assetKeys, e)}\n                />\n              ))}\n            </Menu>\n          }\n        >\n          <Button\n            role=\"button\"\n            style={{minWidth: 'initial', borderTopLeftRadius: 0, borderBottomLeftRadius: 0}}\n            icon={<Icon name=\"arrow_drop_down\" />}\n            disabled={!firstOption.assetKeys.length}\n            intent={intent}\n          />\n        </Popover>\n      </Box>\n      {launchpadElement}\n    </>\n  );\n};\n\nexport const useMaterializationAction = (preferredJobName?: string) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const client = useApolloClient();\n  const confirm = useConfirmation();\n\n  const [state, setState] = React.useState<LaunchAssetsState>({type: 'none'});\n\n  const onClick = async (\n    assetKeys: AssetKey[],\n    e: React.MouseEvent<any>,\n    _forceLaunchpad = false,\n  ) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: assetKeys.map(({path}) => ({path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey || _forceLaunchpad;\n\n    const next = await stateForLaunchingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to Materialize',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    const missing = await upstreamAssetsWithNoMaterializations(client, assets);\n    if (missing.length) {\n      setState({type: 'none'});\n      try {\n        await confirm({\n          title: 'Are you sure?',\n          description: (\n            <>\n              <div>\n                Materializing these assets may fail because the upstream assets listed below have\n                not been materialized yet.\n              </div>\n              <ul>\n                {missing.map((assetKey, idx) => (\n                  <li key={idx}>{displayNameForAssetKey(assetKey)}</li>\n                ))}\n              </ul>\n            </>\n          ),\n        });\n        setState({type: 'loading'});\n      } catch {\n        return;\n      }\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  const launchpad = () => {\n    if (state.type === 'launchpad') {\n      return (\n        <AssetLaunchpad\n          assetJobName={state.jobName}\n          repoAddress={state.repoAddress}\n          sessionPresets={state.sessionPresets}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n        />\n      );\n    }\n\n    if (state.type === 'partitions') {\n      return (\n        <LaunchAssetChoosePartitionsDialog\n          assets={state.assets}\n          upstreamAssetKeys={state.upstreamAssetKeys}\n          repoAddress={state.repoAddress}\n          target={state.target}\n          open={true}\n          setOpen={() => setState({type: 'none'})}\n          refetch={async () => {\n            const result = await client.query<\n              LaunchAssetLoaderQuery,\n              LaunchAssetLoaderQueryVariables\n            >({\n              query: LAUNCH_ASSET_LOADER_QUERY,\n              variables: {assetKeys: state.assets.map(({assetKey}) => ({path: assetKey.path}))},\n            });\n            const assets = result.data.assetNodes;\n            const next = await stateForLaunchingAssets(client, assets, false, preferredJobName);\n            if (next.type === 'error') {\n              showCustomAlert({\n                title: 'Unable to Materialize',\n                body: next.error,\n              });\n              setState({type: 'none'});\n              return;\n            }\n            setState(next);\n          }}\n        />\n      );\n    }\n\n    return null;\n  };\n\n  return {onClick, loading: state.type === 'loading', launchpadElement: launchpad()};\n};\n\nasync function stateForLaunchingAssets(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<LaunchAssetsState> {\n  if (assets.some((x) => x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more source assets are selected and cannot be materialized.',\n    };\n  }\n\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const jobName = getCommonJob(assets, preferredJobName);\n  const partitionDefinition = assets.find((a) => !!a.partitionDefinition)?.partitionDefinition;\n\n  const inSameRepo = assets.every(\n    (a) =>\n      a.repository.name === repoAddress.name && a.repository.location.name === repoAddress.location,\n  );\n  const inSameOrNoPartitionSpace = assets.every(\n    (a) =>\n      !a.partitionDefinition ||\n      !partitionDefinition ||\n      partitionDefinitionsEqual(a.partitionDefinition, partitionDefinition),\n  );\n\n  if (!inSameRepo || !inSameOrNoPartitionSpace || !jobName) {\n    const anchorAsset = getAnchorAssetForPartitionMappedBackfill(assets);\n    if (!anchorAsset) {\n      return {\n        type: 'error',\n        error: ERROR_INVALID_ASSET_SELECTION,\n      };\n    }\n    return {\n      type: 'partitions',\n      assets,\n      target: {type: 'pureWithAnchorAsset', anchorAssetKey: anchorAsset.assetKey},\n      upstreamAssetKeys: getUpstreamAssetKeys(assets),\n      repoAddress,\n    };\n  }\n\n  const resourceResult = await client.query<\n    LaunchAssetLoaderResourceQuery,\n    LaunchAssetLoaderResourceQueryVariables\n  >({\n    query: LAUNCH_ASSET_LOADER_RESOURCE_QUERY,\n    variables: {\n      pipelineName: jobName,\n      repositoryName: assets[0].repository.name,\n      repositoryLocationName: assets[0].repository.location.name,\n    },\n  });\n  const pipeline = resourceResult.data.pipelineOrError;\n  if (pipeline.__typename !== 'Pipeline') {\n    return {type: 'error', error: pipeline.message};\n  }\n  const partitionSets = resourceResult.data.partitionSetsOrError;\n  if (partitionSets.__typename !== 'PartitionSets') {\n    return {type: 'error', error: partitionSets.message};\n  }\n\n  const partitionSetName = partitionSets.results[0]?.name;\n  const requiredResourceKeys = assets.flatMap((a) => a.requiredResources.map((r) => r.resourceKey));\n  const resources = pipeline.modes[0].resources.filter((r) =>\n    requiredResourceKeys.includes(r.name),\n  );\n  const anyResourcesHaveRequiredConfig = resources.some((r) => r.configField?.isRequired);\n  const anyAssetsHaveRequiredConfig = assets.some((a) => a.configField?.isRequired);\n\n  // Note: If a partition definition is present and we're launching a user-defined job,\n  // we assume that any required config will be provided by a PartitionedConfig function\n  // attached to the job. Otherwise backfills won't work and you'll know to add one!\n  const assumeConfigPresent = partitionDefinition && !isHiddenAssetGroupJob(jobName);\n\n  const needLaunchpad =\n    !assumeConfigPresent && (anyAssetsHaveRequiredConfig || anyResourcesHaveRequiredConfig);\n\n  if (needLaunchpad || forceLaunchpad) {\n    const assetOpNames = assets.flatMap((a) => a.opNames || []);\n    return {\n      type: 'launchpad',\n      jobName,\n      repoAddress,\n      sessionPresets: {\n        flattenGraphs: true,\n        assetSelection: assets.map((a) => ({assetKey: a.assetKey, opNames: a.opNames})),\n        solidSelectionQuery: assetOpNames.map((name) => `\"${name}\"`).join(', '),\n        base: partitionSetName\n          ? {partitionsSetName: partitionSetName, partitionName: null, tags: []}\n          : undefined,\n      },\n    };\n  }\n  if (partitionDefinition) {\n    return {\n      type: 'partitions',\n      assets,\n      target: {type: 'job', jobName, partitionSetName},\n      upstreamAssetKeys: getUpstreamAssetKeys(assets),\n      repoAddress,\n    };\n  }\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n\nexport function getCommonJob(\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  preferredJobName?: string,\n) {\n  const everyAssetHasJob = (jobName: string) => assets.every((a) => a.jobNames.includes(jobName));\n  const jobsInCommon = assets[0] ? assets[0].jobNames.filter(everyAssetHasJob) : [];\n  return jobsInCommon.find((name) => name === preferredJobName) || jobsInCommon[0] || null;\n}\n\nfunction getAnchorAssetForPartitionMappedBackfill(assets: LaunchAssetExecutionAssetNodeFragment[]) {\n  // We have the ability to launch a pure asset backfill which will infer the partitions\n  // of downstream assets IFF the selection's root assets (at the top of the tree) ALL\n  // share a partition definition\n\n  // First, get the roots of the selection. The root assets are the ones with none\n  // of their dependencyKeys selected.\n  const roots = assets.filter((a) => {\n    const aDeps = a.dependencyKeys.map(tokenForAssetKey);\n    return !assets.some((b) => aDeps.includes(tokenForAssetKey(b.assetKey)));\n  });\n\n  const partitionedRoots = roots\n    .filter((r) => !!r.partitionDefinition)\n    .sort((a, b) =>\n      displayNameForAssetKey(a.assetKey).localeCompare(displayNameForAssetKey(b.assetKey)),\n    );\n\n  if (!partitionedRoots.length) {\n    return null;\n  }\n\n  // Next, see if they all share a partition set. If they do, any random root can be\n  // the anchor asset but we do it alphabetically so that it is deterministic.\n  const first = partitionedRoots[0];\n  if (\n    !partitionedRoots.every((r) =>\n      partitionDefinitionsEqual(first.partitionDefinition!, r.partitionDefinition!),\n    )\n  ) {\n    return null;\n  }\n\n  return first;\n}\n\nfunction getUpstreamAssetKeys(assets: LaunchAssetExecutionAssetNodeFragment[]) {\n  const assetKeys = new Set(assets.map((a) => JSON.stringify({path: a.assetKey.path})));\n  return uniq(assets.flatMap((a) => a.dependencyKeys.map(({path}) => JSON.stringify({path}))))\n    .filter((key) => !assetKeys.has(key))\n    .map((key) => JSON.parse(key));\n}\n\nasync function upstreamAssetsWithNoMaterializations(\n  client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n) {\n  const upstreamAssetKeys = getUpstreamAssetKeys(assets);\n  if (upstreamAssetKeys.length === 0) {\n    return [];\n  }\n\n  const result = await client.query<\n    LaunchAssetCheckUpstreamQuery,\n    LaunchAssetCheckUpstreamQueryVariables\n  >({\n    query: LAUNCH_ASSET_CHECK_UPSTREAM_QUERY,\n    variables: {assetKeys: upstreamAssetKeys},\n  });\n\n  return result.data.assetNodes\n    .filter((a) => !a.isSource && a.assetMaterializations.length === 0)\n    .map((a) => a.assetKey);\n}\n\nexport function executionParamsForAssetJob(\n  repoAddress: RepoAddress,\n  jobName: string,\n  assets: {assetKey: AssetKey; opNames: string[]}[],\n  tags: {key: string; value: string}[],\n): LaunchPipelineExecutionMutationVariables['executionParams'] {\n  return {\n    mode: 'default',\n    executionMetadata: {\n      tags: tags.map((t) => pick(t, ['key', 'value'])),\n    },\n    runConfigData: '{}',\n    selector: {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n      pipelineName: jobName,\n      assetSelection: assets.map((asset) => ({\n        path: asset.assetKey.path,\n      })),\n    },\n  };\n}\n\nexport function buildAssetCollisionsAlert(data: LaunchAssetLoaderQuery) {\n  return {\n    title: MULTIPLE_DEFINITIONS_WARNING,\n    body: (\n      <div style={{overflow: 'auto'}}>\n        One or more of the selected assets are defined in multiple code locations. Rename these\n        assets to avoid collisions and then try again.\n        <ul>\n          {data.assetNodeDefinitionCollisions.map((collision, idx) => (\n            <li key={idx}>\n              <strong>{displayNameForAssetKey(collision.assetKey)}</strong>\n              <ul>\n                {collision.repositories.map((r, ridx) => (\n                  <li key={ridx}>\n                    {repoAddressAsHumanString({name: r.name, location: r.location.name})}\n                  </li>\n                ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n      </div>\n    ),\n  };\n}\n\nconst LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT = gql`\n  fragment LaunchAssetExecutionAssetNodeFragment on AssetNode {\n    id\n    opNames\n    jobNames\n    graphName\n    hasMaterializePermission\n    partitionDefinition {\n      ...PartitionDefinitionForLaunchAsset\n    }\n    isObservable\n    isSource\n    assetKey {\n      path\n    }\n    dependencyKeys {\n      path\n    }\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n    ...AssetNodeConfigFragment\n  }\n\n  fragment PartitionDefinitionForLaunchAsset on PartitionDefinition {\n    description\n    type\n    name\n    dimensionTypes {\n      name\n      dynamicPartitionsDefinitionName\n    }\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n`;\n\nexport const LAUNCH_ASSET_LOADER_QUERY = gql`\n  query LaunchAssetLoaderQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys) {\n      id\n      ...LaunchAssetExecutionAssetNodeFragment\n    }\n    assetNodeDefinitionCollisions(assetKeys: $assetKeys) {\n      assetKey {\n        path\n      }\n      repositories {\n        id\n        name\n        location {\n          id\n          name\n        }\n      }\n    }\n  }\n\n  ${LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT}\n`;\n\nexport const LAUNCH_ASSET_LOADER_RESOURCE_QUERY = gql`\n  query LaunchAssetLoaderResourceQuery(\n    $pipelineName: String!\n    $repositoryLocationName: String!\n    $repositoryName: String!\n  ) {\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PartitionSets {\n        results {\n          id\n          name\n        }\n      }\n    }\n\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PythonError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on Pipeline {\n        id\n        modes {\n          id\n          resources {\n            name\n            description\n            configField {\n              name\n              isRequired\n              configType {\n                ...ConfigTypeSchemaFragment\n                recursiveConfigTypes {\n                  ...ConfigTypeSchemaFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${CONFIG_TYPE_SCHEMA_FRAGMENT}\n`;\n\nexport const LAUNCH_ASSET_CHECK_UPSTREAM_QUERY = gql`\n  query LaunchAssetCheckUpstreamQuery($assetKeys: [AssetKeyInput!]!) {\n    assetNodes(assetKeys: $assetKeys, loadMaterializations: true) {\n      id\n      assetKey {\n        path\n      }\n      isSource\n      opNames\n      graphName\n      assetMaterializations(limit: 1) {\n        runId\n      }\n    }\n  }\n`;\n","import {ApolloClient, useApolloClient} from '@apollo/client';\nimport {Button, Spinner, Tooltip, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nimport {\n  AssetsInScope,\n  buildAssetCollisionsAlert,\n  executionParamsForAssetJob,\n  getCommonJob,\n  LAUNCH_ASSET_LOADER_QUERY,\n} from './LaunchAssetExecutionButton';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\ntype ObserveAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nexport const LaunchAssetObservationButton: React.FC<{\n  scope: AssetsInScope;\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, preferredJobName, intent = 'none'}) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const [state, setState] = React.useState<ObserveAssetsState>({type: 'none'});\n  const client = useApolloClient();\n\n  const scopeAssets = 'selected' in scope ? scope.selected : scope.all;\n  if (!scopeAssets.length) {\n    return <span />;\n  }\n\n  const count = scopeAssets.length > 1 ? ` (${scopeAssets.length})` : '';\n  const label =\n    'selected' in scope\n      ? `Observe selected${count}`\n      : scope.skipAllTerm\n      ? `Observe${count}`\n      : `Observe sources ${count}`;\n\n  const hasMaterializePermission = scopeAssets.every((a) => a.hasMaterializePermission);\n  if (!hasMaterializePermission) {\n    return (\n      <Tooltip content=\"You do not have permission to observe source assets\">\n        <Button intent={intent} icon={<Icon name=\"observation\" />} disabled>\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  const onClick = async (e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: scopeAssets.map((a) => ({path: a.assetKey.path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForObservingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to observe',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  return (\n    <Button\n      intent={intent}\n      onClick={onClick}\n      icon={\n        state.type === 'loading' ? <Spinner purpose=\"body-text\" /> : <Icon name=\"observation\" />\n      }\n    >\n      {label}\n    </Button>\n  );\n};\n\nasync function stateForObservingAssets(\n  _client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  _forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<ObserveAssetsState> {\n  if (assets.some((x) => !x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more non-source assets are selected and cannot be observed.',\n    };\n  }\n\n  if (assets.some((x) => !x.isObservable)) {\n    return {\n      type: 'error',\n      error: 'One or more of the selected source assets are unversioned and cannot be observed.',\n    };\n  }\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be observed together.',\n    };\n  }\n\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n","import {Spinner, Box, Colors, Caption} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {PartitionStatus} from '../partitions/PartitionStatus';\n\nimport {AssetPartitionStatus} from './AssetPartitionStatus';\nimport {isTimeseriesDimension} from './MultipartitioningSupport';\nimport {AssetKey} from './types';\nimport {PartitionHealthData, PartitionDimensionSelection} from './usePartitionHealthData';\n\nexport const PartitionHealthSummary: React.FC<{\n  assetKey: AssetKey;\n  showAssetKey?: boolean;\n  data: PartitionHealthData[];\n  selections?: PartitionDimensionSelection[];\n}> = React.memo(({showAssetKey, assetKey, data, selections}) => {\n  const assetData = data.find((d) => JSON.stringify(d.assetKey) === JSON.stringify(assetKey));\n\n  if (!assetData) {\n    return (\n      <div style={{minHeight: 55, position: 'relative'}}>\n        <Spinner purpose=\"section\" />\n      </div>\n    );\n  }\n\n  const keysForTotals = selections\n    ? selections.map((r) => r.selectedKeys)\n    : assetData.dimensions.map((d) => d.partitionKeys);\n\n  const total = keysForTotals.reduce((total, d) => d.length * total, 1);\n\n  const success = keysForTotals\n    .reduce(\n      (combinations, d) =>\n        combinations.length\n          ? combinations.flatMap((keys) => d.map((key) => [...keys, key]))\n          : d.map((key) => [key]),\n      [] as string[][],\n    )\n    .filter((dkeys) => assetData.stateForKey(dkeys) === AssetPartitionStatus.MATERIALIZED).length;\n\n  return (\n    <Box color={Colors.Gray500}>\n      <Box flex={{justifyContent: 'space-between'}} style={{fontWeight: 600}} margin={{bottom: 4}}>\n        <Caption>{showAssetKey ? displayNameForAssetKey(assetKey) : 'Materialized'}</Caption>\n        <Caption>{`${success.toLocaleString()}/${total.toLocaleString()}`}</Caption>\n      </Box>\n      {assetData.dimensions.map((dimension, dimensionIdx) => (\n        <Box key={dimensionIdx} margin={{bottom: 4}}>\n          {assetData.dimensions.length > 1 && <Caption>{dimension.name}</Caption>}\n          <PartitionStatus\n            small\n            partitionNames={dimension.partitionKeys}\n            splitPartitions={!isTimeseriesDimension(dimension)}\n            selected={selections ? selections[dimensionIdx].selectedKeys : undefined}\n            health={{\n              ranges: assetData.rangesForSingleDimension(\n                dimensionIdx,\n                selections?.length === 2 ? selections[1 - dimensionIdx].selectedRanges : undefined,\n              ),\n            }}\n          />\n        </Box>\n      ))}\n    </Box>\n  );\n});\n","import {Colors, Box, BaseTag, Tooltip, Icon, Body, ButtonLink} from '@dagster-io/ui';\nimport groupBy from 'lodash/groupBy';\nimport isEqual from 'lodash/isEqual';\nimport React from 'react';\n\nimport {displayNameForAssetKey, LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetKeyInput, StaleCauseCategory, StaleStatus} from '../graphql/types';\n\nexport const isAssetMissing = (liveData?: LiveDataForNode) =>\n  liveData && liveData.staleStatus === StaleStatus.MISSING;\n\nexport const isAssetStale = (liveData?: LiveDataForNode) =>\n  liveData && liveData.staleStatus === StaleStatus.STALE;\n\nconst NO_CAUSES = 'No reasons available.';\n\nconst LABELS = {\n  self: {\n    [StaleCauseCategory.CODE]: 'Code version',\n    [StaleCauseCategory.DATA]: 'Data version',\n    [StaleCauseCategory.DEPENDENCIES]: 'Dependencies',\n  },\n  upstream: {\n    [StaleCauseCategory.CODE]: 'Upstream code version',\n    [StaleCauseCategory.DATA]: 'Upstream data',\n    [StaleCauseCategory.DEPENDENCIES]: 'Upstream dependencies',\n  },\n};\n\nexport const StaleReasonsLabel: React.FC<{\n  assetKey: AssetKeyInput;\n  include: 'all' | 'upstream' | 'self';\n  liveData?: LiveDataForNode;\n}> = ({liveData, include, assetKey}) => {\n  if (!isAssetStale(liveData) || !liveData?.staleCauses.length) {\n    return null;\n  }\n\n  return (\n    <Body color={Colors.Yellow700}>\n      <Tooltip position=\"top\" content={<StaleCausesSummary causes={liveData.staleCauses} />}>\n        {Object.keys(groupedCauses(assetKey, include, liveData)).join(', ')}\n      </Tooltip>\n    </Body>\n  );\n};\n\nexport const StaleReasonsTags: React.FC<{\n  assetKey: AssetKeyInput;\n  include: 'all' | 'upstream' | 'self';\n  liveData?: LiveDataForNode;\n  onClick?: () => void;\n}> = ({liveData, include, assetKey, onClick}) => {\n  if (!isAssetStale(liveData) || !liveData?.staleCauses.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {Object.entries(groupedCauses(assetKey, include, liveData)).map(([label, causes]) => (\n        <Tooltip key={label} position=\"top\" content={<StaleCausesSummary causes={causes} />}>\n          <BaseTag\n            fillColor={Colors.Yellow50}\n            textColor={Colors.Yellow700}\n            interactive={!!onClick}\n            icon={<Icon name=\"changes_present\" color={Colors.Yellow700} />}\n            label={\n              onClick ? (\n                <ButtonLink underline=\"never\" onClick={onClick} color={Colors.Yellow700}>\n                  {label}\n                </ButtonLink>\n              ) : (\n                label\n              )\n            }\n          />\n        </Tooltip>\n      ))}\n    </>\n  );\n};\n\nconst MAX_DISPLAYED_REASONS = 4;\n\nfunction groupedCauses(\n  assetKey: AssetKeyInput,\n  include: 'all' | 'upstream' | 'self',\n  liveData?: LiveDataForNode,\n) {\n  const all = (liveData?.staleCauses || [])\n    .map((cause) => {\n      const target = isEqual(assetKey.path, cause.key.path) ? 'self' : 'upstream';\n      return {...cause, target, label: LABELS[target][cause.category]};\n    })\n    .filter((cause) => include === 'all' || include === cause.target);\n\n  return groupBy(all, (cause) => cause.label);\n}\n\nexport const StaleCausesInfoDot: React.FC<{causes: LiveDataForNode['staleCauses']}> = ({\n  causes,\n}) => (\n  <Tooltip\n    position=\"top\"\n    content={causes && causes.length > 0 ? <StaleCausesSummary causes={causes} /> : NO_CAUSES}\n  >\n    <Icon name=\"info\" size={12} color={Colors.Yellow700} />\n  </Tooltip>\n);\n\nconst StaleCausesSummary: React.FC<{causes: LiveDataForNode['staleCauses']}> = ({causes}) => (\n  <Box>\n    <strong>Changes since last materialization:</strong>\n    <ul style={{margin: 0, padding: '4px 12px'}}>\n      {causes.slice(0, MAX_DISPLAYED_REASONS).map((cause, idx) => (\n        <li key={idx}>\n          [{displayNameForAssetKey(cause.key)}] {cause.reason}{' '}\n          {cause.dependency ? `(${displayNameForAssetKey(cause.dependency)})` : ''}\n        </li>\n      ))}\n      {causes.length > MAX_DISPLAYED_REASONS ? (\n        <span style={{color: Colors.Gray400}}>{`and ${\n          causes.length - MAX_DISPLAYED_REASONS\n        } more...`}</span>\n      ) : (\n        ''\n      )}\n    </ul>\n  </Box>\n);\n","import {gql} from '@apollo/client';\nimport {Box, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {UnderlyingOpsAssetNodeFragment} from './types/UnderlyingOpsOrGraph.types';\n\nexport const UnderlyingOpsOrGraph: React.FC<{\n  assetNode: UnderlyingOpsAssetNodeFragment;\n  repoAddress: RepoAddress;\n  minimal?: boolean;\n}> = ({assetNode, repoAddress, minimal}) => {\n  const {assetKey, graphName, opNames, jobNames} = assetNode;\n  const opCount = opNames.length;\n\n  if (!opCount) {\n    return null;\n  }\n\n  if (!graphName) {\n    const firstOp = opNames[0];\n    if (displayNameForAssetKey(assetKey) === firstOp) {\n      return null;\n    }\n    const opPath = workspacePathFromAddress(repoAddress, `/ops/${firstOp}`);\n    return (\n      <Box flex={{gap: 4, alignItems: 'center'}}>\n        <Icon name=\"op\" size={16} />\n        <Mono>\n          <Link to={opPath}>{firstOp}</Link>\n        </Mono>\n      </Box>\n    );\n  }\n\n  if (!jobNames.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{gap: 4, alignItems: 'center'}}>\n      <Icon name=\"schema\" size={16} />\n      {minimal ? (\n        <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n          View graph\n        </Link>\n      ) : (\n        <Mono>\n          <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n            {graphName}\n          </Link>\n          {` (${opCount === 1 ? '1 op' : `${opCount} ops`})`}\n        </Mono>\n      )}\n    </Box>\n  );\n};\n\nexport const UNDERLYING_OPS_ASSET_NODE_FRAGMENT = gql`\n  fragment UnderlyingOpsAssetNodeFragment on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    graphName\n    opNames\n    jobNames\n  }\n`;\n","import groupBy from 'lodash/groupBy';\nimport React from 'react';\n\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nconst NO_PARTITION_KEY = '__NO_PARTITION__';\n\ntype Event = AssetMaterializationFragment | AssetObservationFragment;\n\nexport type AssetEventGroup = {\n  latest: Event | null;\n  all: Event[];\n  timestamp: string;\n  partition?: string;\n};\n\nconst sortByEventTimestamp = (a: Event, b: Event) => Number(b?.timestamp) - Number(a?.timestamp);\n\n/**\n * A hook that can bucket a list of materializations by partition, if any, with the `latest`\n * materialization separated from predecessor materializations.\n */\nconst groupByPartition = (events: Event[], definedPartitionKeys: string[]): AssetEventGroup[] => {\n  const grouped = groupBy(events, (m) => m.partition || NO_PARTITION_KEY);\n  const orderedPartitionKeys = [...definedPartitionKeys].reverse();\n\n  if (NO_PARTITION_KEY in grouped) {\n    orderedPartitionKeys.push(NO_PARTITION_KEY);\n  }\n\n  return orderedPartitionKeys\n    .filter((key) => key !== NO_PARTITION_KEY)\n    .map((key) => {\n      const sorted = [...(grouped[key] || [])].sort(sortByEventTimestamp);\n      const latestMaterialization = sorted.find((a) => a.__typename === 'MaterializationEvent');\n      const latest = latestMaterialization || sorted[0] || null;\n\n      return {\n        all: sorted,\n        latest,\n        timestamp: latest?.timestamp,\n        partition: key,\n      };\n    });\n};\n\nexport function useGroupedEvents(\n  xAxis: 'partition' | 'time',\n  materializations: Event[],\n  observations: Event[],\n  loadedPartitionKeys: string[] | undefined,\n) {\n  return React.useMemo<AssetEventGroup[]>(() => {\n    const events = [...materializations, ...observations].sort(\n      (b, a) => Number(a.timestamp) - Number(b.timestamp),\n    );\n    if (xAxis === 'partition' && loadedPartitionKeys) {\n      return groupByPartition(events, loadedPartitionKeys);\n    } else {\n      // return a group for every materialization to achieve un-grouped rendering\n      return events.map((event) => ({\n        latest: event,\n        partition: event.partition || undefined,\n        timestamp: event.timestamp,\n        all: [],\n      }));\n    }\n  }, [loadedPartitionKeys, materializations, observations, xAxis]);\n}\n","import React from 'react';\n\n/**\n * Allows you to easily support updating state based on previous state.\n *\n * usage:\n * function useMyCustomStateHook() {\n *   const [state, setState] = useState(initialState);\n *   const update = (nextState: T) => {\n *     setState(doSomeFancyCalculation(nextState));\n *   };\n *   return [state, useSetStateUpdateCallback(state, update)];\n * }\n */\nexport function useSetStateUpdateCallback<T>(\n  currentState: T,\n  updateCallback: (next: T) => void,\n): (next: React.SetStateAction<T>) => void {\n  const stateRef = React.useRef<T>(currentState);\n  stateRef.current = currentState;\n\n  const updateCallbackRef = React.useRef(updateCallback);\n  updateCallbackRef.current = updateCallback;\n\n  const update = React.useCallback((next: React.SetStateAction<T>) => {\n    if (next instanceof Function) {\n      stateRef.current = next(stateRef.current);\n    } else {\n      stateRef.current = next;\n    }\n    updateCallbackRef.current(stateRef.current);\n  }, []);\n\n  return update;\n}\n","import React from 'react';\n\nimport {QueryPersistedStateConfig, useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSetStateUpdateCallback} from '../hooks/useSetStateUpdateCallback';\nimport {\n  allPartitionsSpan,\n  partitionsToText,\n  allPartitionsRange,\n  spanTextToSelections,\n} from '../partitions/SpanRepresentation';\n\nimport {placeholderDimensionSelection} from './MultipartitioningSupport';\nimport {PartitionHealthData, PartitionDimensionSelection} from './usePartitionHealthData';\n\ntype DimensionQueryState = {\n  name: string;\n  rangeText: string | undefined;\n  isFromPartitionQueryStringParam: boolean;\n};\n\nfunction buildSerializer(assetHealth: Pick<PartitionHealthData, 'dimensions'>) {\n  const serializer: QueryPersistedStateConfig<DimensionQueryState[]> = {\n    defaults: {},\n    encode: (state) => {\n      return Object.fromEntries(state.map((s) => [`${s.name}_range`, s.rangeText]));\n    },\n    decode: (qs) => {\n      const results: Record<string, {text: string; isFromPartitionQueryStringParam: boolean}> = {};\n      for (const key in qs) {\n        if (key.endsWith('_range')) {\n          const name = key.replace(/_range$/, '');\n          results[name] = {text: qs[key], isFromPartitionQueryStringParam: false};\n        } else if (key === 'partition') {\n          const partitions = qs[key].split('|');\n          for (let i = 0; i < partitions.length; i++) {\n            const partitionText = partitions[i];\n            const name = assetHealth?.dimensions[i]?.name;\n            if (name) {\n              results[name] = {text: partitionText, isFromPartitionQueryStringParam: true};\n            }\n          }\n        }\n      }\n      return Object.entries(results).map(([name, {text, isFromPartitionQueryStringParam}]) => ({\n        name,\n        rangeText: text,\n        isFromPartitionQueryStringParam,\n      }));\n    },\n  };\n  return serializer;\n}\n\n/**\n * This hook behaves like useState and manages the user's selected partition key\n * ranges on each partition dimension.\n *\n * Internally, this hook reads initial state from the query string and (optionally)\n * writes changes back to the query string using the compacted \"spans\" format.\n */\nexport const usePartitionDimensionSelections = (opts: {\n  assetHealth: Pick<PartitionHealthData, 'dimensions'>;\n  modifyQueryString: boolean;\n  knownDimensionNames?: string[]; // improves loading state if available\n  skipPartitionKeyValidation?: boolean;\n  shouldReadPartitionQueryStringParam?: boolean; // This hook is used in 2 different cases\n  // The first use case (AssetPartitions.tsx) uses this state to filter the available partitions to select from when filtering using time based partitions.\n  // The second use case (LaunchAssetChoosePartitionsDialog.tsx) uses this state to store the user's selections, which includes non-time based partitions.\n  //   For the second use case we rely on the \"partition\" query string param in addition to the existing \"{dimension}_range\" query string params.\n}) => {\n  const {\n    assetHealth,\n    knownDimensionNames = [],\n    modifyQueryString,\n    skipPartitionKeyValidation,\n    shouldReadPartitionQueryStringParam = false,\n  } = opts;\n\n  const serializer = React.useMemo(() => buildSerializer(assetHealth), [assetHealth]);\n  const [query, setQuery] = useQueryPersistedState<DimensionQueryState[]>(serializer);\n  const [local, setLocal] = React.useState<DimensionQueryState[]>([]);\n\n  const knownDimensionNamesJSON = JSON.stringify(knownDimensionNames);\n\n  const inflated = React.useMemo((): PartitionDimensionSelection[] => {\n    if (!assetHealth || !assetHealth.dimensions.length) {\n      return JSON.parse(knownDimensionNamesJSON).map(placeholderDimensionSelection);\n    }\n    return assetHealth.dimensions.map((dimension) => {\n      const saved =\n        local.find((s) => s.name === dimension.name) ||\n        query.find((s) => s.name === dimension.name);\n\n      // Note: It's valid for the user to clear the range to \"\", so it's\n      // important that we persist \"\" and specifically check for `undefined`\n      // when filling in the default value (all keys)\n      if (\n        saved?.rangeText !== undefined &&\n        (shouldReadPartitionQueryStringParam || !saved?.isFromPartitionQueryStringParam)\n      ) {\n        return {\n          dimension,\n          ...spanTextToSelections(\n            dimension.partitionKeys,\n            saved.rangeText,\n            skipPartitionKeyValidation,\n          ),\n        };\n      } else {\n        return {\n          dimension,\n          selectedRanges: [allPartitionsRange(dimension)],\n          selectedKeys: [...dimension.partitionKeys],\n        };\n      }\n    });\n  }, [\n    assetHealth,\n    knownDimensionNamesJSON,\n    local,\n    query,\n    shouldReadPartitionQueryStringParam,\n    skipPartitionKeyValidation,\n  ]);\n\n  const setInflated = (ranges: PartitionDimensionSelection[]) => {\n    const next = ranges.map((r) => {\n      const rangeText = partitionsToText(\n        r.selectedKeys,\n        skipPartitionKeyValidation ? undefined : r.dimension.partitionKeys,\n      );\n\n      const saved =\n        local.find((s) => s.name === r.dimension.name) ||\n        query.find((s) => s.name === r.dimension.name);\n\n      return {\n        name: r.dimension.name,\n        rangeText: rangeText !== allPartitionsSpan(r.dimension) ? rangeText : undefined,\n        isFromPartitionQueryStringParam:\n          saved?.rangeText === rangeText ? saved.isFromPartitionQueryStringParam : false,\n      };\n    });\n    if (modifyQueryString) {\n      setQuery(next);\n    } else {\n      setLocal(next);\n    }\n  };\n\n  return [inflated, useSetStateUpdateCallback(inflated, setInflated)] as const;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\n\nimport {ASSET_LINEAGE_FRAGMENT} from './AssetLineageElements';\nimport {AssetViewParams} from './AssetView';\nimport {AssetKey} from './types';\nimport {AssetEventsQuery, AssetEventsQueryVariables} from './types/useRecentAssetEvents.types';\n\n/**\n * If the asset has a defined partition space, we load all materializations in the\n * last 100 partitions. This ensures that if you run a huge backfill of old partitions,\n * you still see accurate info for the last 100 partitions in the UI. A count-based\n * limit could cause random partitions to disappear if materializations were out of order.\n */\nexport function useRecentAssetEvents(\n  assetKey: AssetKey,\n  params: AssetViewParams,\n  {assetHasDefinedPartitions}: {assetHasDefinedPartitions: boolean},\n) {\n  // The params behavior on this page is a bit nuanced - there are two main query\n  // params: ?timestamp= and ?partition= and only one is set at a time. They can\n  // be undefined, an empty string or a value and all three states are used.\n  //\n  // - If both are undefined, we expand the first item in the table by default\n  // - If one is present, it determines which xAxis is used (partition grouping)\n  // - If one is present and set to a value, that item in the table is expanded.\n  // - If one is present but an empty string, no items in the table is expanded.\n\n  const before = params.asOf ? `${Number(params.asOf) + 1}` : undefined;\n  const xAxisDefault = assetHasDefinedPartitions ? 'partition' : 'time';\n  const xAxis: 'partition' | 'time' =\n    params.partition !== undefined\n      ? 'partition'\n      : params.time !== undefined || before\n      ? 'time'\n      : xAxisDefault;\n\n  const loadUsingPartitionKeys = assetHasDefinedPartitions && xAxis === 'partition';\n\n  const {data, loading, refetch} = useQuery<AssetEventsQuery, AssetEventsQueryVariables>(\n    ASSET_EVENTS_QUERY,\n    {\n      variables: loadUsingPartitionKeys\n        ? {\n            assetKey: {path: assetKey.path},\n            before,\n            partitionInLast: 120,\n          }\n        : {\n            assetKey: {path: assetKey.path},\n            before,\n            limit: 100,\n          },\n    },\n  );\n\n  return React.useMemo(() => {\n    const asset = data?.assetOrError.__typename === 'Asset' ? data?.assetOrError : null;\n    const materializations = asset?.assetMaterializations || [];\n    const observations = asset?.assetObservations || [];\n\n    const allPartitionKeys = asset?.definition?.partitionKeys;\n    const loadedPartitionKeys =\n      loadUsingPartitionKeys && allPartitionKeys\n        ? allPartitionKeys.slice(allPartitionKeys.length - 120)\n        : uniq(\n            [...materializations, ...observations].map((p) => p.partition!).filter(Boolean),\n          ).sort();\n\n    return {\n      asset,\n      loadedPartitionKeys,\n      materializations,\n      observations,\n      loading,\n      refetch,\n      xAxis,\n    };\n  }, [data, loading, refetch, loadUsingPartitionKeys, xAxis]);\n}\n\nexport const ASSET_MATERIALIZATION_FRAGMENT = gql`\n  fragment AssetMaterializationFragment on MaterializationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      ...AssetLineageFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_LINEAGE_FRAGMENT}\n`;\n\nexport const ASSET_OBSERVATION_FRAGMENT = gql`\n  fragment AssetObservationFragment on ObservationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        runId\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nexport const ASSET_EVENTS_QUERY = gql`\n  query AssetEventsQuery(\n    $assetKey: AssetKeyInput!\n    $limit: Int\n    $before: String\n    $partitionInLast: Int\n  ) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetObservations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetObservationFragment\n        }\n        assetMaterializations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetMaterializationFragment\n        }\n\n        definition {\n          id\n          partitionKeys\n        }\n      }\n    }\n  }\n\n  ${ASSET_OBSERVATION_FRAGMENT}\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {HTMLInputProps, InputGroupProps2, Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  Colors,\n  Icon,\n  IconWrapper,\n  MenuDivider,\n  MenuItem,\n  Menu,\n  Select,\n  Spinner,\n  Suggest,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {AppContext} from '../app/AppContext';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {PartitionDefinitionType, RepositorySelector} from '../graphql/types';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {CreatePartitionDialog} from '../partitions/CreatePartitionDialog';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  ConfigEditorGeneratorPipelineFragment,\n  ConfigEditorPipelinePresetFragment,\n  PartitionSetForConfigEditorFragment,\n  ConfigPartitionResultFragment,\n  ConfigPartitionsQuery,\n  ConfigPartitionsQueryVariables,\n} from './types/ConfigEditorConfigPicker.types';\n\ntype Pipeline = ConfigEditorGeneratorPipelineFragment;\ntype Preset = ConfigEditorPipelinePresetFragment;\ntype PartitionSet = PartitionSetForConfigEditorFragment;\ntype Partition = ConfigPartitionResultFragment;\ntype ConfigGenerator = Preset | PartitionSet;\n\ninterface ConfigEditorConfigPickerProps {\n  base: IExecutionSession['base'];\n  pipeline: Pipeline;\n  pipelineMode?: string;\n  partitionSets: PartitionSet[];\n  onSaveSession: (updates: Partial<IExecutionSession>) => void;\n  onSelectPreset: (preset: Preset) => Promise<void>;\n  onSelectPartition: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => Promise<void>;\n  repoAddress: RepoAddress;\n  assetSelection?: IExecutionSession['assetSelection'];\n}\n\nexport const ConfigEditorConfigPicker: React.FC<ConfigEditorConfigPickerProps> = (props) => {\n  const {\n    pipeline,\n    base,\n    onSaveSession,\n    onSelectPreset,\n    onSelectPartition,\n    partitionSets,\n    repoAddress,\n    assetSelection,\n  } = props;\n\n  const {isJob, presets} = pipeline;\n\n  const configGenerators: ConfigGenerator[] = React.useMemo(() => {\n    const byName = (a: {name: string}, b: {name: string}) => a.name.localeCompare(b.name);\n    return [...presets, ...partitionSets].sort(byName);\n  }, [presets, partitionSets]);\n\n  const label = () => {\n    if (!base) {\n      if (presets.length && !partitionSets.length) {\n        return 'Preset';\n      }\n      if (!presets.length && partitionSets.length) {\n        return 'Partition Set';\n      }\n      return 'Preset / Partition Set';\n    }\n\n    if ('presetName' in base) {\n      return `Preset: ${base.presetName}`;\n    }\n\n    return `Partition Set: ${base.partitionsSetName}`;\n  };\n\n  const onSelect = (item: ConfigGenerator) => {\n    if (item.__typename === 'PartitionSet') {\n      onSaveSession({\n        mode: item.mode,\n        base: {\n          partitionsSetName: item.name,\n          partitionName: null,\n          tags: base ? base.tags : null,\n        },\n      });\n    } else {\n      onSelectPreset(item);\n    }\n  };\n\n  return (\n    <PickerContainer>\n      {isJob || configGenerators.length < 1 ? null : (\n        <ConfigEditorConfigGeneratorPicker\n          label={label()}\n          configGenerators={configGenerators}\n          onSelect={onSelect}\n        />\n      )}\n      {base && 'partitionsSetName' in base ? (\n        <ConfigEditorPartitionPicker\n          pipeline={pipeline}\n          partitionSetName={base.partitionsSetName}\n          value={base.partitionName}\n          onSelect={onSelectPartition}\n          repoAddress={repoAddress}\n          assetSelection={assetSelection}\n        />\n      ) : null}\n    </PickerContainer>\n  );\n};\n\ninterface ConfigEditorPartitionPickerProps {\n  pipeline: Pipeline;\n  partitionSetName: string;\n  value: string | null;\n  onSelect: (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n  ) => void;\n  repoAddress: RepoAddress;\n  assetSelection?: IExecutionSession['assetSelection'];\n}\n\nconst SORT_ORDER_KEY_BASE = 'dagit.partition-sort-order';\ntype SortOrder = 'asc' | 'desc';\n\nconst ConfigEditorPartitionPicker: React.FC<ConfigEditorPartitionPickerProps> = React.memo(\n  (props) => {\n    const {partitionSetName, value, onSelect, repoAddress, assetSelection} = props;\n    const {basePath} = React.useContext(AppContext);\n    const repositorySelector = repoAddressToSelector(repoAddress);\n\n    const {data, refetch, loading} = useQuery<\n      ConfigPartitionsQuery,\n      ConfigPartitionsQueryVariables\n    >(CONFIG_PARTITIONS_QUERY, {\n      variables: {\n        repositorySelector,\n        partitionSetName,\n        assetKeys: assetSelection?.map((selection) => ({path: selection.assetKey.path})),\n      },\n      fetchPolicy: 'network-only',\n    });\n\n    const sortOrderKey = `${SORT_ORDER_KEY_BASE}-${basePath}-${repoAddressAsHumanString(\n      repoAddress,\n    )}-${partitionSetName}`;\n\n    const [sortOrder, setSortOrder] = useStateWithStorage<SortOrder>(sortOrderKey, (value: any) =>\n      value === undefined ? 'asc' : value,\n    );\n\n    const partitions: Partition[] = React.useMemo(() => {\n      const retrieved =\n        data?.partitionSetOrError.__typename === 'PartitionSet' &&\n        data?.partitionSetOrError.partitionsOrError.__typename === 'Partitions'\n          ? data.partitionSetOrError.partitionsOrError.results\n          : [];\n      return sortOrder === 'asc' ? retrieved : [...retrieved].reverse();\n    }, [data, sortOrder]);\n\n    const error =\n      data?.partitionSetOrError.__typename === 'PartitionSet' &&\n      data?.partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ? data.partitionSetOrError.partitionsOrError\n        : null;\n\n    const selected = partitions.find((p) => p.name === value);\n\n    const onClickSort = React.useCallback(\n      (event) => {\n        event.preventDefault();\n        setSortOrder((order) => (order === 'asc' ? 'desc' : 'asc'));\n      },\n      [setSortOrder],\n    );\n\n    const rightElement = partitions.length ? (\n      <SortButton onMouseDown={onClickSort}>\n        <Icon name=\"sort_by_alpha\" color={Colors.Gray400} />\n      </SortButton>\n    ) : undefined;\n\n    const inputProps: InputGroupProps2 & HTMLInputProps = {\n      placeholder: 'Partition',\n      style: {width: 180},\n      intent: (loading ? !!value : !!selected) ? Intent.NONE : Intent.DANGER,\n      rightElement,\n    };\n\n    const {isDynamicPartition, partitionDefinitionName} = React.useMemo(() => {\n      const assetNodes = data?.assetNodes;\n      const definition = assetNodes?.find((a) => !!a.partitionDefinition)?.partitionDefinition;\n      if (\n        !definition ||\n        assetNodes?.some(\n          (node) =>\n            node?.partitionDefinition?.name && node?.partitionDefinition?.name !== definition?.name,\n        )\n      ) {\n        return {isDynamicPartition: false, partitionDefinitionName: undefined};\n      }\n      return {\n        isDynamicPartition: definition.type === PartitionDefinitionType.DYNAMIC,\n        partitionDefinitionName: definition.name,\n      };\n    }, [data?.assetNodes]);\n\n    const [showCreatePartition, setShowCreatePartition] = React.useState(false);\n\n    // If we are loading the partitions and do NOT have any cached data to display,\n    // show the component in a loading state with a spinner and fill it with the\n    // current partition's name so it doesn't flicker (if one is set already.)\n    if (loading && partitions.length === 0) {\n      return (\n        <Suggest<string>\n          key=\"loading\"\n          inputProps={{\n            ...inputProps,\n            rightElement: !value ? (\n              <Box\n                flex={{direction: 'column', justifyContent: 'center'}}\n                padding={{right: 4}}\n                style={{height: '30px'}}\n              >\n                <Spinner purpose=\"body-text\" />\n              </Box>\n            ) : undefined,\n          }}\n          items={[]}\n          itemRenderer={() => null}\n          noResults={<MenuItem disabled={true} text=\"Loading...\" />}\n          inputValueRenderer={(str) => str}\n          selectedItem={value}\n          onItemSelect={() => {}}\n        />\n      );\n    }\n\n    if (error) {\n      showCustomAlert({\n        body: <PythonErrorInfo error={error} />,\n      });\n    }\n\n    // Note: We don't want this Suggest to be a fully \"controlled\" React component.\n    // Keeping it's state is annoyign and we only want to update our data model on\n    // selection change. However, we need to set an initial value (defaultSelectedItem)\n    // and ensure it is re-applied to the internal state when it changes (via `key` below).\n    return (\n      <>\n        <Suggest<Partition>\n          key={selected ? selected.name : 'none'}\n          defaultSelectedItem={selected}\n          items={partitions}\n          inputProps={inputProps}\n          inputValueRenderer={(partition) => partition.name}\n          itemPredicate={(query, partition) => query.length === 0 || partition.name.includes(query)}\n          itemRenderer={(partition, props) => (\n            <MenuItem\n              active={props.modifiers.active}\n              onClick={props.handleClick}\n              key={partition.name}\n              text={partition.name}\n            />\n          )}\n          noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n          onItemSelect={(item) => {\n            onSelect(repositorySelector, partitionSetName, item.name);\n          }}\n        />\n        {isDynamicPartition ? (\n          <Button\n            onClick={() => {\n              setShowCreatePartition(true);\n            }}\n          >\n            Add new partition\n          </Button>\n        ) : null}\n        <CreatePartitionDialog\n          key={showCreatePartition ? '1' : '0'}\n          isOpen={showCreatePartition}\n          partitionDefinitionName={partitionDefinitionName}\n          repoAddress={repoAddress}\n          close={() => {\n            setShowCreatePartition(false);\n          }}\n          refetch={async () => {\n            await refetch();\n          }}\n          onCreated={(partitionName) => {\n            onSelect(repositorySelector, partitionSetName, partitionName);\n          }}\n        />\n      </>\n    );\n  },\n);\n\ninterface ConfigEditorConfigGeneratorPickerProps {\n  label: string;\n  configGenerators: ConfigGenerator[];\n  onSelect: (configGenerator: ConfigGenerator) => void;\n}\n\nconst ConfigEditorConfigGeneratorPicker: React.FC<ConfigEditorConfigGeneratorPickerProps> = React.memo(\n  (props) => {\n    const {configGenerators, label, onSelect} = props;\n    const button = React.useRef<HTMLButtonElement>(null);\n\n    return (\n      <div>\n        <ShortcutHandler\n          shortcutLabel=\"⌥E\"\n          shortcutFilter={(e) => e.code === 'KeyE' && e.altKey}\n          onShortcut={() => button.current?.click()}\n        >\n          <Select<ConfigGenerator>\n            items={configGenerators}\n            itemPredicate={(query, configGenerator) =>\n              query.length === 0 || configGenerator.name.includes(query)\n            }\n            itemListRenderer={({itemsParentRef, renderItem, filteredItems}) => {\n              const renderedPresetItems = filteredItems\n                .filter((item) => item.__typename === 'PipelinePreset')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const renderedPartitionSetItems = filteredItems\n                .filter((item) => item.__typename === 'PartitionSet')\n                .map(renderItem)\n                .filter(Boolean);\n\n              const bothTypesPresent =\n                renderedPresetItems.length > 0 && renderedPartitionSetItems.length > 0;\n\n              return (\n                <Menu ulRef={itemsParentRef}>\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Presets\" />}\n                  {renderedPresetItems}\n                  {bothTypesPresent && <MenuDivider />}\n                  {bothTypesPresent && <MenuItem disabled={true} text=\"Partition Sets\" />}\n                  {renderedPartitionSetItems}\n                </Menu>\n              );\n            }}\n            itemRenderer={(item, props) => (\n              <MenuItem\n                active={props.modifiers.active}\n                onClick={props.handleClick}\n                key={item.name}\n                text={\n                  <div>\n                    {item.name}\n                    <div style={{opacity: 0.4, fontSize: '0.75rem'}}>\n                      {[\n                        item.solidSelection\n                          ? item.solidSelection.length === 1\n                            ? `Ops: ${item.solidSelection[0]}`\n                            : `Ops: ${item.solidSelection.length}`\n                          : `Ops: All`,\n                        `Mode: ${item.mode}`,\n                      ].join(' - ')}\n                    </div>\n                  </div>\n                }\n              />\n            )}\n            noResults={<MenuItem disabled={true} text=\"No presets.\" />}\n            onItemSelect={onSelect}\n          >\n            <Button\n              ref={button}\n              data-test-id=\"preset-selector-button\"\n              rightIcon={<Icon name=\"expand_more\" />}\n            >\n              {label}\n            </Button>\n          </Select>\n        </ShortcutHandler>\n      </div>\n    );\n  },\n);\n\nexport const SortButton = styled.button`\n  border: 0;\n  cursor: pointer;\n  padding: 4px;\n  margin: 3px 3px 0 0;\n  background-color: ${Colors.White};\n  border-radius: 4px;\n  transition: background-color 100ms;\n\n  :focus {\n    background-color: ${Colors.Gray100};\n    outline: none;\n  }\n  :hover {\n    ${IconWrapper} {\n      background-color: ${Colors.Gray700};\n    }\n  }\n`;\n\nconst PickerContainer = styled.div`\n  display: flex;\n  justify: space-between;\n  align-items: center;\n  gap: 6px;\n`;\n\nconst CONFIG_PARTITIONS_QUERY = gql`\n  query ConfigPartitionsQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n    $assetKeys: [AssetKeyInput!]\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              ...ConfigPartitionResult\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n    assetNodes(assetKeys: $assetKeys) {\n      id\n      partitionDefinition {\n        name\n        type\n      }\n    }\n  }\n\n  fragment ConfigPartitionResult on Partition {\n    name\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_PARTITION_SELECTION_QUERY = gql`\n  query ConfigPartitionSelectionQuery(\n    $repositorySelector: RepositorySelector!\n    $partitionSetName: String!\n    $partitionName: String!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      __typename\n      ... on PartitionSet {\n        id\n        partition(partitionName: $partitionName) {\n          name\n          solidSelection\n          runConfigOrError {\n            ... on PartitionRunConfig {\n              yaml\n            }\n            ...PythonErrorFragment\n          }\n          mode\n          tagsOrError {\n            ... on PartitionTags {\n              results {\n                key\n                value\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPipelineFragment on Pipeline {\n    id\n    isJob\n    name\n    presets {\n      ...ConfigEditorPipelinePreset\n    }\n    tags {\n      key\n      value\n    }\n  }\n\n  fragment ConfigEditorPipelinePreset on PipelinePreset {\n    name\n    mode\n    solidSelection\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT = gql`\n  fragment ConfigEditorGeneratorPartitionSetsFragment on PartitionSets {\n    results {\n      id\n      ...PartitionSetForConfigEditor\n    }\n  }\n\n  fragment PartitionSetForConfigEditor on PartitionSet {\n    id\n    name\n    mode\n    solidSelection\n  }\n`;\n","import * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {ConfigEditor, ConfigSchema} from './ConfigEditor';\nimport {Spinner} from './Spinner';\nimport {SplitPanelContainer} from './SplitPanelContainer';\nimport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\nimport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\n\ninterface Props {\n  onConfigChange: (config: string) => void;\n  config?: string;\n  configSchema?: ConfigSchema | null;\n  isLoading: boolean;\n  identifier: string;\n}\n\n// Force code editor hints to appear above the dialog modal\nexport const CodeMirrorInDialogStyle = createGlobalStyle`\n  .CodeMirror-hints,\n  .CodeMirror-hints.dagit {\n    z-index: 100;\n  }\n`;\n\nexport const ConfigEditorWithSchema: React.FC<Props> = ({\n  isLoading,\n  identifier,\n  config,\n  onConfigChange,\n  configSchema,\n}) => {\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const [editorHelpContext, setEditorHelpContext] = React.useState<ConfigEditorHelpContext | null>(\n    null,\n  );\n  const editor = React.useRef<ConfigEditor | null>(null);\n\n  return (\n    <>\n      <CodeMirrorInDialogStyle />\n      <SplitPanelContainer\n        ref={editorSplitPanelContainer}\n        axis=\"horizontal\"\n        identifier={identifier}\n        firstMinSize={100}\n        firstInitialPercent={70}\n        first={\n          !isLoading ? (\n            <ConfigEditor\n              ref={editor}\n              configCode={config!}\n              onConfigChange={onConfigChange}\n              onHelpContextChange={(next) => {\n                if (next && !isHelpContextEqual(editorHelpContext, next)) {\n                  setEditorHelpContext(next);\n                }\n              }}\n              readOnly={false}\n              checkConfig={async (_j) => {\n                return {isValid: true};\n              }}\n              configSchema={configSchema}\n            />\n          ) : (\n            <Box style={{height: '100%'}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n              <Spinner purpose=\"section\" />\n            </Box>\n          )\n        }\n        second={\n          <Box style={{height: 500}}>\n            <ConfigEditorHelp\n              context={editorHelpContext}\n              allInnerTypes={configSchema?.allConfigTypes || []}\n            />\n          </Box>\n        }\n      />\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {\n  createSingleSession,\n  IExecutionSession,\n  IExecutionSessionChanges,\n  useInitialDataForMode,\n} from '../app/ExecutionSessionStorage';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport LaunchpadSession from './LaunchpadSession';\nimport {\n  LaunchpadSessionPartitionSetsFragment,\n  LaunchpadSessionPipelineFragment,\n} from './types/LaunchpadRoot.types';\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  sessionPresets: Partial<IExecutionSession>;\n}\n\nexport const LaunchpadTransientSessionContainer = (props: Props) => {\n  const {launchpadType, pipeline, partitionSets, repoAddress, sessionPresets} = props;\n\n  const initialData = useInitialDataForMode(pipeline, partitionSets);\n  const initialSessionComplete = createSingleSession({\n    ...sessionPresets,\n    runConfigYaml: initialData.runConfigYaml,\n  });\n\n  const [session, setSession] = React.useState<IExecutionSession>(initialSessionComplete);\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    const newSession = {...session, ...changes};\n    setSession(newSession);\n  };\n\n  return (\n    <LaunchpadSession\n      launchpadType={launchpadType}\n      session={session}\n      onSave={onSaveSession}\n      pipeline={pipeline}\n      partitionSets={partitionSets}\n      repoAddress={repoAddress}\n    />\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {CodeMirrorInDialogStyle, Dialog, DialogHeader} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {IExecutionSession} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT,\n  CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT,\n} from './ConfigEditorConfigPicker';\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {LaunchpadTransientSessionContainer} from './LaunchpadTransientSessionContainer';\nimport {LaunchpadRootQuery, LaunchpadRootQueryVariables} from './types/LaunchpadRoot.types';\n\nconst LaunchpadStoredSessionsContainer = React.lazy(\n  () => import('./LaunchpadStoredSessionsContainer'),\n);\n\nexport type LaunchpadType = 'asset' | 'job';\n\n// ########################\n// ##### LAUNCHPAD ROOTS\n// ########################\n\nexport const AssetLaunchpad: React.FC<{\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n  assetJobName: string;\n  open: boolean;\n  setOpen: (open: boolean) => void;\n}> = ({repoAddress, sessionPresets, assetJobName, open, setOpen}) => {\n  const title = 'Launchpad (configure assets)';\n\n  return (\n    <Dialog\n      style={{height: '90vh', width: '80%'}}\n      isOpen={open}\n      canEscapeKeyClose={true}\n      canOutsideClickClose={true}\n      onClose={() => setOpen(false)}\n    >\n      <DialogHeader icon=\"layers\" label={title} />\n      <CodeMirrorInDialogStyle />\n      <LaunchpadAllowedRoot\n        launchpadType=\"asset\"\n        pipelinePath={assetJobName}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets}\n      />\n    </Dialog>\n  );\n};\n\nexport const JobLaunchpad: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {pipelinePath, repoPath} = useParams<{repoPath: string; pipelinePath: string}>();\n  const {\n    permissions: {canLaunchPipelineExecution},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  if (!canLaunchPipelineExecution) {\n    return <Redirect to={`/locations/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n\n  return (\n    <LaunchpadAllowedRoot\n      launchpadType=\"job\"\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\n// ########################\n// ##### LAUNCHPAD ALLOWED ROOT\n// ########################\n\ninterface Props {\n  launchpadType: LaunchpadType;\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  sessionPresets?: Partial<IExecutionSession>;\n}\n\nconst LaunchpadAllowedRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {pipelinePath, repoAddress, launchpadType, sessionPresets} = props;\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(props);\n\n  const {name: repositoryName, location: repositoryLocationName} = repoAddress;\n\n  const result = useQuery<LaunchpadRootQuery, LaunchpadRootQueryVariables>(\n    PIPELINE_EXECUTION_ROOT_QUERY,\n    {\n      variables: {repositoryName, repositoryLocationName, pipelineName},\n      partialRefetch: true,\n    },\n  );\n\n  const pipelineOrError = result?.data?.pipelineOrError;\n  const partitionSetsOrError = result?.data?.partitionSetsOrError;\n\n  if (!pipelineOrError || !partitionSetsOrError) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (\n    partitionSetsOrError.__typename === 'PipelineNotFoundError' ||\n    pipelineOrError.__typename === 'PipelineNotFoundError'\n  ) {\n    const message =\n      pipelineOrError.__typename === 'PipelineNotFoundError'\n        ? pipelineOrError.message\n        : 'No data returned from GraphQL';\n\n    return pipelineName !== '' ? (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title={isJob ? 'Job not found' : 'Pipeline not found'}\n        description={message}\n      />\n    ) : (\n      <LaunchpadSessionError\n        icon=\"no-results\"\n        title={isJob ? 'Select a job' : 'Select a pipeline'}\n        description={message}\n      />\n    );\n  }\n\n  if (pipelineOrError.__typename === 'InvalidSubsetError') {\n    throw new Error(`Should never happen because we do not request a subset`);\n  }\n\n  if (pipelineOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={pipelineOrError.message}\n      />\n    );\n  }\n  if (partitionSetsOrError && partitionSetsOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"Python Error\"\n        description={partitionSetsOrError.message}\n      />\n    );\n  }\n\n  if (launchpadType === 'asset') {\n    return (\n      <LaunchpadTransientSessionContainer\n        launchpadType={launchpadType}\n        pipeline={pipelineOrError}\n        partitionSets={partitionSetsOrError}\n        repoAddress={repoAddress}\n        sessionPresets={sessionPresets || {}}\n      />\n    );\n  } else {\n    // job\n    return (\n      <React.Suspense fallback={<div />}>\n        <LaunchpadStoredSessionsContainer\n          launchpadType={launchpadType}\n          pipeline={pipelineOrError}\n          partitionSets={partitionSetsOrError}\n          repoAddress={repoAddress}\n        />\n      </React.Suspense>\n    );\n  }\n};\n\nconst PIPELINE_EXECUTION_ROOT_QUERY = gql`\n  query LaunchpadRootQuery(\n    $pipelineName: String!\n    $repositoryName: String!\n    $repositoryLocationName: String!\n  ) {\n    pipelineOrError(\n      params: {\n        pipelineName: $pipelineName\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on Pipeline {\n        id\n        ...LaunchpadSessionPipelineFragment\n      }\n      ...PythonErrorFragment\n    }\n    partitionSetsOrError(\n      pipelineName: $pipelineName\n      repositorySelector: {\n        repositoryName: $repositoryName\n        repositoryLocationName: $repositoryLocationName\n      }\n    ) {\n      __typename\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...LaunchpadSessionPartitionSetsFragment\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment LaunchpadSessionPartitionSetsFragment on PartitionSets {\n    ...ConfigEditorGeneratorPartitionSetsFragment\n  }\n\n  fragment LaunchpadSessionPipelineFragment on Pipeline {\n    id\n    isJob\n    isAssetJob\n    ...ConfigEditorGeneratorPipelineFragment\n    modes {\n      id\n      name\n      description\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT}\n  ${CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT}\n`;\n","// Patched lint mode that won't constantly lint\nimport CodeMirror from 'codemirror';\n\nconst GUTTER_ID = 'CodeMirror-lint-markers';\n\nfunction showTooltip(e, content, node) {\n  const tt = document.createElement('div');\n  const nodeRect = node.getBoundingClientRect();\n\n  tt.className = 'CodeMirror-lint-tooltip';\n  tt.appendChild(content.cloneNode(true));\n  document.body.appendChild(tt);\n  if (nodeRect.top > tt.clientHeight) {\n    // position on the top\n    tt.style.top = nodeRect.top - tt.clientHeight - 5 + 'px';\n    tt.style.left = nodeRect.left + 5 + 'px';\n  } else {\n    // positon on the right if top would be off-screen\n    tt.style.top = nodeRect.top + 5 + 'px';\n    tt.style.left = nodeRect.right + 10 + 'px';\n  }\n  if (tt.style.opacity != null) {\n    tt.style.opacity = 1;\n  }\n  return tt;\n}\nfunction rm(elt) {\n  if (elt.parentNode) {\n    elt.parentNode.removeChild(elt);\n  }\n}\nfunction hideTooltip(tt) {\n  if (!tt.parentNode) {\n    return;\n  }\n  if (tt.style.opacity == null) {\n    rm(tt);\n  }\n  tt.style.opacity = 0;\n  setTimeout(function () {\n    rm(tt);\n  }, 600);\n}\n\nfunction showTooltipFor(e, content, node) {\n  let tooltip = showTooltip(e, content, node);\n  function hide() {\n    CodeMirror.off(node, 'mouseout', hide);\n    if (tooltip) {\n      hideTooltip(tooltip);\n      tooltip = null;\n    }\n  }\n  const poll = setInterval(function () {\n    if (tooltip) {\n      for (let n = node; ; n = n.parentNode) {\n        if (n && n.nodeType === 11) {\n          n = n.host;\n        }\n        if (n === document.body) {\n          return;\n        }\n        if (!n) {\n          hide();\n          break;\n        }\n      }\n    }\n    if (!tooltip) {\n      return clearInterval(poll);\n    }\n  }, 400);\n  CodeMirror.on(node, 'mouseout', hide);\n}\n\nfunction parseOptions(_cm, options) {\n  if (options instanceof Function) {\n    return {getAnnotations: options};\n  }\n  if (!options || options === true) {\n    options = {};\n  }\n  return options;\n}\n\nfunction clearMarks(cm) {\n  const state = cm.state.lint;\n  if (state.hasGutter) {\n    cm.clearGutter(GUTTER_ID);\n  }\n  for (let i = 0; i < state.marked.length; ++i) {\n    state.marked[i].clear();\n  }\n  state.marked.length = 0;\n}\n\nfunction makeMarker(labels, severity, multiple, tooltips) {\n  const marker = document.createElement('div');\n  let inner = marker;\n  marker.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-' + severity;\n  if (multiple) {\n    inner = marker.appendChild(document.createElement('div'));\n    inner.className = 'CodeMirror-lint-marker CodeMirror-lint-marker-multiple';\n  }\n\n  if (tooltips !== false) {\n    CodeMirror.on(inner, 'mouseover', function (e) {\n      showTooltipFor(e, labels, inner);\n    });\n  }\n  return marker;\n}\n\nfunction getMaxSeverity(a, b) {\n  if (a === 'error') {\n    return a;\n  } else {\n    return b;\n  }\n}\n\nfunction groupByLine(annotations) {\n  const lines = [];\n  for (let i = 0; i < annotations.length; ++i) {\n    const ann = annotations[i],\n      line = ann.from.line;\n    (lines[line] || (lines[line] = [])).push(ann);\n  }\n  return lines;\n}\n\nfunction annotationTooltip(ann) {\n  let severity = ann.severity;\n  if (!severity) {\n    severity = 'error';\n  }\n  const tip = document.createElement('div');\n  tip.className = 'CodeMirror-lint-message CodeMirror-lint-message-' + severity;\n  if (typeof ann.messageHTML !== 'undefined') {\n    tip.innerHTML = ann.messageHTML;\n  } else {\n    tip.appendChild(document.createTextNode(ann.message));\n  }\n  return tip;\n}\n\nfunction updateLinting(cm, annotationsNotSorted) {\n  clearMarks(cm);\n  const state = cm.state.lint,\n    options = state.options;\n\n  const annotations = groupByLine(annotationsNotSorted);\n\n  for (let line = 0; line < annotations.length; ++line) {\n    const anns = annotations[line];\n    if (!anns) {\n      continue;\n    }\n\n    let maxSeverity = null;\n    const tipLabel = state.hasGutter && document.createDocumentFragment();\n\n    for (let i = 0; i < anns.length; ++i) {\n      let ann = anns[i];\n      let severity = ann.severity;\n      if (!severity) {\n        severity = 'error';\n      }\n      maxSeverity = getMaxSeverity(maxSeverity, severity);\n\n      if (options.formatAnnotation) {\n        ann = options.formatAnnotation(ann);\n      }\n      if (state.hasGutter) {\n        tipLabel.appendChild(annotationTooltip(ann));\n      }\n\n      if (ann.to) {\n        state.marked.push(\n          cm.markText(ann.from, ann.to, {\n            className: 'CodeMirror-lint-mark CodeMirror-lint-mark-' + severity,\n            __annotation: ann,\n          }),\n        );\n      }\n    }\n\n    if (state.hasGutter) {\n      cm.setGutterMarker(\n        line,\n        GUTTER_ID,\n        makeMarker(tipLabel, maxSeverity, anns.length > 1, state.options.tooltips),\n      );\n    }\n  }\n  if (options.onUpdateLinting) {\n    options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n  }\n}\n\nfunction lintAsync(cm, getAnnotations, passOptions) {\n  const state = cm.state.lint;\n  let id = ++state.waitingFor;\n  function abort() {\n    id = -1;\n    cm.off('change', abort);\n  }\n  cm.on('change', abort);\n  getAnnotations(\n    cm.getValue(),\n    function (annotations, arg2) {\n      cm.off('change', abort);\n      if (state.waitingFor !== id) {\n        return;\n      }\n      if (arg2 && annotations instanceof CodeMirror) {\n        annotations = arg2;\n      }\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    },\n    passOptions,\n    cm,\n  );\n}\n\nfunction startLinting(cm) {\n  const state = cm.state.lint,\n    options = state.options;\n  /*\n   * Passing rules in `options` property prevents JSHint (and other linters) from complaining\n   * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\n   */\n  const passOptions = options.options || options;\n  const getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), 'lint');\n  if (!getAnnotations) {\n    return;\n  }\n  if (options.async || getAnnotations.async) {\n    lintAsync(cm, getAnnotations, passOptions);\n  } else {\n    const annotations = getAnnotations(cm.getValue(), passOptions, cm);\n    if (!annotations) {\n      return;\n    }\n    if (annotations.then) {\n      annotations.then(function (issues) {\n        cm.operation(function () {\n          updateLinting(cm, issues);\n        });\n      });\n    } else {\n      cm.operation(function () {\n        updateLinting(cm, annotations);\n      });\n    }\n  }\n}\n\nfunction onChange(cm) {\n  const state = cm.state.lint;\n  if (!state) {\n    return;\n  }\n  clearTimeout(state.timeout);\n  state.timeout = setTimeout(function () {\n    startLinting(cm);\n  }, state.options.delay || 500);\n}\n\nfunction popupTooltip(docs, annotations, e) {\n  const target = e.target || e.srcElement;\n\n  const tooltip = document.createDocumentFragment();\n\n  if (docs) {\n    const docsEl = document.createElement('div');\n    docsEl.textContent = docs;\n    tooltip.appendChild(docsEl);\n    if (annotations.length) {\n      docsEl.style.paddingBottom = '4px';\n      docsEl.style.marginBottom = '4px';\n      docsEl.style.borderBottom = '1px solid rgba(0,0,0,0.25)';\n    }\n  }\n\n  for (let i = 0; i < annotations.length; i++) {\n    const ann = annotations[i];\n    tooltip.appendChild(annotationTooltip(ann));\n  }\n  showTooltipFor(e, tooltip, target);\n}\n\nfunction onMouseOver(cm, e) {\n  const target = e.target || e.srcElement;\n  const box = target.getBoundingClientRect(),\n    x = (box.left + box.right) / 2,\n    y = (box.top + box.bottom) / 2;\n  const pos = cm.coordsChar({left: x, top: y}, 'client');\n  const spans = cm.findMarksAt(pos);\n\n  const getDocs = cm.getHelper(CodeMirror.Pos(0, 0), 'dagster-docs');\n  const docs = getDocs(cm, pos);\n\n  const annotations = [];\n  for (let i = 0; i < spans.length; ++i) {\n    const ann = spans[i].__annotation;\n    if (ann) {\n      annotations.push(ann);\n    }\n  }\n\n  if (docs || annotations.length) {\n    popupTooltip(docs, annotations, e);\n  }\n}\n\nfunction LintState(cm, options, hasGutter) {\n  this.marked = [];\n  this.options = options;\n  this.timeout = null;\n  this.hasGutter = hasGutter;\n  this.onMouseOver = function (e) {\n    onMouseOver(cm, e);\n  };\n  this.waitingFor = 0;\n}\n\nexport const patchLint = () => {\n  CodeMirror.defineOption('lint', false, function (cm, val, old) {\n    if (old && old !== CodeMirror.Init) {\n      clearMarks(cm);\n      if (cm.state.lint.options.lintOnChange !== false) {\n        cm.off('change', onChange);\n      }\n      CodeMirror.off(cm.getWrapperElement(), 'mouseover', cm.state.lint.onMouseOver);\n      clearTimeout(cm.state.lint.timeout);\n      delete cm.state.lint;\n    }\n\n    if (val) {\n      const gutters = cm.getOption('gutters');\n      let hasLintGutter = false;\n      for (let i = 0; i < gutters.length; ++i) {\n        if (gutters[i] === GUTTER_ID) {\n          hasLintGutter = true;\n        }\n      }\n      const state = (cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter));\n      if (state.options.lintOnChange !== false) {\n        cm.on('change', onChange);\n      }\n      if (state.options.tooltips !== false && state.options.tooltips !== 'gutter') {\n        CodeMirror.on(cm.getWrapperElement(), 'mouseover', state.onMouseOver);\n      }\n    }\n  });\n\n  CodeMirror.defineExtension('performLint', function () {\n    if (this.state.lint) {\n      startLinting(this);\n    }\n  });\n};\n","import 'codemirror/addon/comment/comment';\nimport 'codemirror/addon/dialog/dialog';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/foldgutter.css';\nimport 'codemirror/addon/fold/indent-fold';\nimport 'codemirror/addon/hint/show-hint';\nimport 'codemirror/addon/hint/show-hint.css';\nimport 'codemirror/addon/lint/lint.css';\nimport 'codemirror/addon/search/jump-to-line';\nimport 'codemirror/addon/search/search';\nimport 'codemirror/addon/search/searchcursor';\nimport 'codemirror/keymap/sublime';\n\nimport {Editor} from 'codemirror';\nimport debounce from 'lodash/debounce';\nimport * as React from 'react';\nimport {createGlobalStyle} from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {StyledCodeMirror} from './CodeMirror';\nimport {patchLint} from './configeditor/codemirror-yaml/lint';\nimport {\n  YamlModeValidateFunction,\n  expandAutocompletionContextAtCursor,\n  findRangeInDocumentFromPath,\n  YamlModeValidationResult,\n} from './configeditor/codemirror-yaml/mode'; // eslint-disable-line import/no-duplicates\nimport {ConfigEditorHelpContext} from './configeditor/types/ConfigEditorHelpContext';\nimport {ConfigSchema} from './configeditor/types/ConfigSchema';\n\nexport {isHelpContextEqual} from './configeditor/isHelpContextEqual';\nexport {ConfigEditorHelp} from './configeditor/ConfigEditorHelp';\n\nexport type {ConfigEditorHelpContext, ConfigSchema, YamlModeValidationResult};\n\npatchLint();\n\ninterface ConfigEditorProps {\n  configCode: string;\n  readOnly: boolean;\n  configSchema?: ConfigSchema | null;\n\n  checkConfig: YamlModeValidateFunction;\n  onConfigChange: (newValue: string) => void;\n  onHelpContextChange: (helpContext: ConfigEditorHelpContext | null) => void;\n}\n\nconst AUTO_COMPLETE_AFTER_KEY = /^[a-zA-Z0-9_@(]$/;\nconst performLint = debounce((editor: any) => {\n  editor.performLint();\n}, 1000);\n\nconst ConfigEditorStyle = createGlobalStyle`\n  .react-codemirror2 .CodeMirror.cm-s-config-editor {\n    height: initial;\n    position: absolute;\n    inset: 0;\n  }\n`;\n\nexport class ConfigEditor extends React.Component<ConfigEditorProps> {\n  _editor?: Editor;\n\n  componentDidUpdate(prevProps: ConfigEditorProps) {\n    if (!this._editor) {\n      return;\n    }\n    if (prevProps.configSchema === this.props.configSchema) {\n      return;\n    }\n    this.performInitialPass();\n  }\n\n  shouldComponentUpdate(prevProps: ConfigEditorProps) {\n    // Unfortunately, updates to the ConfigEditor clear the linter highlighting for\n    // unknown reasons and they're recalculated asynchronously. To prevent flickering,\n    // only update if our input has meaningfully changed.\n    return (\n      prevProps.configCode !== this.props.configCode ||\n      prevProps.readOnly !== this.props.readOnly ||\n      prevProps.configSchema !== this.props.configSchema\n    );\n  }\n\n  // Public API\n\n  moveCursor = (line: number, ch: number) => {\n    if (!this._editor) {\n      return;\n    }\n    this._editor.setCursor(line, ch, {scroll: false});\n    const {clientHeight} = this._editor.getScrollInfo();\n    const {left, top} = this._editor.cursorCoords(true, 'local');\n    const offsetFromTop = 20;\n\n    this._editor?.scrollIntoView({\n      left,\n      right: left,\n      top: top - offsetFromTop,\n      bottom: top + (clientHeight - offsetFromTop),\n    });\n    this._editor.focus();\n  };\n\n  moveCursorToPath = (path: string[]) => {\n    if (!this._editor) {\n      return;\n    }\n    const codeMirrorDoc = this._editor.getDoc();\n    const yamlDoc = yaml.parseDocument(this.props.configCode);\n    const range = findRangeInDocumentFromPath(yamlDoc, path, 'key');\n    if (!range) {\n      return;\n    }\n    const from = codeMirrorDoc.posFromIndex(range ? range.start : 0) as CodeMirror.Position;\n    this.moveCursor(from.line, from.ch);\n  };\n\n  // End Public API\n\n  performInitialPass() {\n    // update the gutter and redlining\n    performLint(this._editor);\n\n    // update the contextual help based on the configSchema and content\n    const {context} = expandAutocompletionContextAtCursor(this._editor);\n    this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n  }\n\n  render() {\n    // Unfortunately, CodeMirror is too intense to be simulated in the JSDOM \"virtual\" DOM.\n    // Until we run tests against something like selenium, trying to render the editor in\n    // tests have to stop here.\n    if (process.env.NODE_ENV === 'test') {\n      return <span />;\n    }\n\n    return (\n      <div style={{flex: 1, position: 'relative'}}>\n        <ConfigEditorStyle />\n        <StyledCodeMirror\n          value={this.props.configCode}\n          theme={['config-editor']}\n          options={\n            {\n              mode: 'yaml',\n              lineNumbers: true,\n              readOnly: this.props.readOnly,\n              indentUnit: 2,\n              smartIndent: true,\n              showCursorWhenSelecting: true,\n              lintOnChange: false,\n              lint: {\n                checkConfig: this.props.checkConfig,\n                lintOnChange: false,\n                onUpdateLinting: false,\n              },\n              hintOptions: {\n                completeSingle: false,\n                closeOnUnfocus: false,\n                schema: this.props.configSchema,\n              },\n              keyMap: 'sublime',\n              extraKeys: {\n                'Cmd-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Ctrl-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Alt-Space': (editor: any) => editor.showHint({completeSingle: true}),\n                'Shift-Tab': (editor: any) => editor.execCommand('indentLess'),\n                Tab: (editor: any) => editor.execCommand('indentMore'),\n                // Persistent search box in Query Editor\n                'Cmd-F': 'findPersistent',\n                'Ctrl-F': 'findPersistent',\n              },\n              gutters: [\n                'CodeMirror-foldgutter',\n                'CodeMirror-lint-markers',\n                'CodeMirror-linenumbers',\n              ],\n              foldGutter: true,\n            } as any\n          }\n          editorDidMount={(editor) => {\n            this._editor = editor;\n            this.performInitialPass();\n          }}\n          onBeforeChange={(editor, data, value) => {\n            this.props.onConfigChange(value);\n          }}\n          onCursorActivity={(editor: any) => {\n            if (editor.getSelection().length) {\n              this.props.onHelpContextChange(null);\n            } else {\n              const {context} = expandAutocompletionContextAtCursor(editor);\n              this.props.onHelpContextChange(context ? {type: context.closestMappingType} : null);\n            }\n          }}\n          onChange={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onBlur={(editor: Editor) => {\n            performLint(editor);\n          }}\n          onKeyUp={(editor, event: KeyboardEvent) => {\n            if (AUTO_COMPLETE_AFTER_KEY.test(event.key)) {\n              editor.execCommand('autocomplete');\n            }\n          }}\n        />\n      </div>\n    );\n  }\n}\n","import {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\nexport const isHelpContextEqual = (\n  prev: ConfigEditorHelpContext | null,\n  next: ConfigEditorHelpContext | null,\n) => (prev && prev.type.key) === (next && next.type.key);\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Colors} from '../Colors';\nimport {ConfigTypeSchema, TypeData} from '../ConfigTypeSchema';\nimport {isHelpContextEqual} from '../configeditor/isHelpContextEqual';\n\nimport {ConfigEditorHelpContext} from './types/ConfigEditorHelpContext';\n\ninterface ConfigEditorHelpProps {\n  context: ConfigEditorHelpContext | null;\n  allInnerTypes: TypeData[];\n}\n\nexport const ConfigEditorHelp: React.FC<ConfigEditorHelpProps> = React.memo(\n  ({context, allInnerTypes}) => {\n    if (!context) {\n      return <Container />;\n    }\n    return (\n      <Container>\n        <ConfigScrollWrap>\n          <ConfigTypeSchema type={context.type} typesInScope={allInnerTypes} maxDepth={2} />\n        </ConfigScrollWrap>\n        <AutocompletionsNote>Use Ctrl+Space to show auto-completions inline.</AutocompletionsNote>\n      </Container>\n    );\n  },\n  (prev, next) => isHelpContextEqual(prev.context, next.context),\n);\n\nconst AutocompletionsNote = styled.div`\n  font-size: 0.75rem;\n  text-align: center;\n  padding: 4px;\n  border-top: 1px solid ${Colors.KeylineGray};\n  background: ${Colors.Gray100};\n  color: ${Colors.Gray500};\n`;\n\nconst ConfigScrollWrap = styled.div`\n  padding: 8px;\n  color: ${Colors.Dark};\n  flex: 1;\n  pointer-events: initial;\n  max-height: 100%;\n  overflow-y: auto;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  background-color: ${Colors.Gray50};\n  height: 100%;\n`;\n","import {gql} from '@apollo/client';\nimport {YamlModeValidationResult} from '@dagster-io/ui';\nimport yaml from 'yaml';\n\nimport {ConfigEditorValidationFragment} from './types/ConfigEditorUtils.types';\n\nexport const CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT = gql`\n  fragment ConfigEditorRunConfigSchemaFragment on RunConfigSchema {\n    rootConfigType {\n      key\n    }\n    allConfigTypes {\n      ...AllConfigTypesForEditor\n    }\n  }\n\n  fragment AllConfigTypesForEditor on ConfigType {\n    key\n    description\n    isSelector\n    typeParamKeys\n    ... on RegularConfigType {\n      givenName\n    }\n    ... on MapConfigType {\n      keyLabelName\n    }\n    ... on EnumConfigType {\n      givenName\n      values {\n        value\n        description\n      }\n    }\n    ... on CompositeConfigType {\n      ...CompositeConfigTypeForSchema\n    }\n    ... on ScalarUnionConfigType {\n      key\n      scalarTypeKey\n      nonScalarTypeKey\n    }\n  }\n\n  fragment CompositeConfigTypeForSchema on CompositeConfigType {\n    fields {\n      name\n      description\n      isRequired\n      configTypeKey\n      defaultValueAsJson\n    }\n  }\n`;\n\nexport const CONFIG_EDITOR_VALIDATION_FRAGMENT = gql`\n  fragment ConfigEditorValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        __typename\n        reason\n        message\n        stack {\n          entries {\n            __typename\n            ... on EvaluationStackPathEntry {\n              fieldName\n            }\n            ... on EvaluationStackListItemEntry {\n              listIndex\n            }\n            ... on EvaluationStackMapKeyEntry {\n              mapKey\n            }\n            ... on EvaluationStackMapValueEntry {\n              mapKey\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ntype StackEntry =\n  | {\n      __typename: 'EvaluationStackPathEntry';\n      fieldName: string;\n    }\n  | {\n      __typename: 'EvaluationStackListItemEntry';\n      listIndex: number;\n    }\n  | {\n      __typename: 'EvaluationStackMapKeyEntry';\n      mapKey: object;\n    }\n  | {\n      __typename: 'EvaluationStackMapValueEntry';\n      mapKey: object;\n    };\n\nexport function errorStackToYamlPath(entries: StackEntry[]) {\n  return entries.map((entry) => {\n    switch (entry.__typename) {\n      case 'EvaluationStackPathEntry':\n        return entry.fieldName;\n      case 'EvaluationStackListItemEntry':\n        return `${entry.listIndex}`;\n      case 'EvaluationStackMapKeyEntry':\n      case 'EvaluationStackMapValueEntry':\n        return `${entry.mapKey}`;\n    }\n  });\n}\n\nexport function responseToYamlValidationResult(\n  configYaml: string,\n  response: ConfigEditorValidationFragment,\n): YamlModeValidationResult {\n  if (response.__typename !== 'RunConfigValidationInvalid') {\n    return {isValid: true};\n  }\n\n  const errors = response.errors.map((err) => ({\n    message: err.message,\n    reason: err.reason,\n    path: errorStackToYamlPath(err.stack.entries),\n  }));\n\n  // Errors at the top level have no stack path because they are not within any\n  // dicts. To avoid highlighting the entire editor, associate them with the first\n  // element of the top dict.\n  const parsed = yaml.parse(configYaml);\n  const topLevelKey = Object.keys(parsed);\n  errors.forEach((error) => {\n    if (error.path.length === 0 && topLevelKey.length) {\n      error.path = [topLevelKey[0]];\n    }\n  });\n\n  return {isValid: false, errors};\n}\n","import {Button, Icon, MenuItem, Select} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {ModeNotFoundError} from './ModeNotFoundError';\n\ninterface Mode {\n  name: string;\n}\n\ninterface ConfigEditorModePickerProps {\n  modes: Mode[];\n  modeError?: ModeNotFoundError;\n  modeName: string | null;\n  onModeChange: (mode: string) => void;\n}\n\nconst MODE_PICKER_HINT_TEXT = `To add a mode, add a ModeDefinition to the pipeline.`;\n\nexport const ConfigEditorModePicker: React.FC<ConfigEditorModePickerProps> = (props) => {\n  const resolvedMode = props.modeName\n    ? props.modes.find((m) => m.name === props.modeName)\n    : props.modes[0];\n\n  React.useEffect(() => {\n    if (resolvedMode && resolvedMode.name !== props.modeName) {\n      props.onModeChange?.(resolvedMode.name);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [resolvedMode, props.modeName]);\n\n  const singleMode = props.modes.length === 1;\n  const valid = !props.modeError;\n  const disabled = singleMode && valid;\n\n  const onItemSelect = (mode: Mode) => {\n    props.onModeChange?.(mode.name);\n  };\n\n  return (\n    <Select\n      activeItem={resolvedMode}\n      filterable={true}\n      disabled={disabled}\n      items={props.modes}\n      itemPredicate={(query, mode) => query.length === 0 || mode.name.includes(query)}\n      itemRenderer={(mode, props) => (\n        <MenuItem\n          active={props.modifiers.active}\n          key={mode.name}\n          text={mode.name}\n          onClick={props.handleClick}\n        />\n      )}\n      onItemSelect={onItemSelect}\n    >\n      <Button\n        icon={valid ? undefined : <Icon name=\"error\" />}\n        intent={valid ? 'none' : 'danger'}\n        title={disabled ? MODE_PICKER_HINT_TEXT : 'Current execution mode'}\n        disabled={disabled}\n        rightIcon={<Icon name=\"expand_more\" />}\n        data-test-id=\"mode-picker-button\"\n      >\n        {valid\n          ? resolvedMode\n            ? `Mode: ${resolvedMode.name}`\n            : 'Select Mode'\n          : 'Invalid Mode Selection'}\n      </Button>\n    </Select>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpSelectorQuery, OpSelectorQueryVariables} from './types/OpSelector.types';\n\ninterface IOpSelectorProps {\n  pipelineName: string;\n  serverProvidedSubsetError?: {message: string};\n  value: string[] | null;\n  query: string | null;\n  onChange: (value: string[] | null, query: string | null) => void;\n  flattenGraphs: boolean;\n  onFlattenGraphsChange: (v: boolean) => void;\n  repoAddress: RepoAddress;\n}\n\nconst SOLID_SELECTOR_QUERY = gql`\n  query OpSelectorQuery($selector: PipelineSelector!, $requestScopeHandleID: String) {\n    pipelineOrError(params: $selector) {\n      __typename\n      ... on Pipeline {\n        id\n        name\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on InvalidSubsetError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const OpSelector = (props: IOpSelectorProps) => {\n  const {\n    serverProvidedSubsetError,\n    onChange,\n    pipelineName,\n    repoAddress,\n    onFlattenGraphsChange,\n  } = props;\n  const [focused, setFocused] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const flattenGraphs = props.flattenGraphs || false;\n  const selector = {...repoAddressToSelector(repoAddress), pipelineName};\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n  const {data, loading} = useQuery<OpSelectorQuery, OpSelectorQueryVariables>(\n    SOLID_SELECTOR_QUERY,\n    {\n      variables: {selector, requestScopeHandleID: flattenGraphs ? undefined : ''},\n    },\n  );\n\n  const query = props.query || '*';\n\n  const opHandles =\n    data?.pipelineOrError.__typename === 'Pipeline'\n      ? flattenGraphs\n        ? explodeCompositesInHandleGraph(data.pipelineOrError.solidHandles)\n        : data.pipelineOrError.solidHandles\n      : [];\n  const ops = opHandles.map((h) => h.solid);\n  const flattenGraphsEnabled =\n    flattenGraphs || ops.some((f) => f.definition.__typename === 'CompositeSolidDefinition');\n\n  const opsFetchError =\n    (data?.pipelineOrError.__typename !== 'Pipeline' && data?.pipelineOrError.message) || null;\n\n  const queryResultOps = filterByQuery(ops, query).all;\n  const invalidOpSelection = !loading && queryResultOps.length === 0;\n\n  const errorMessage = invalidOpSelection\n    ? isJob\n      ? `You must provide a valid op query or * to execute the entire job.`\n      : `You must provide a valid solid query or * to execute the entire pipeline.`\n    : serverProvidedSubsetError\n    ? serverProvidedSubsetError.message\n    : opsFetchError;\n\n  const onTextChange = (nextQuery: string) => {\n    if (nextQuery === '') {\n      nextQuery = '*';\n    }\n    const queryResultOps = filterByQuery(ops, nextQuery).all;\n\n    // If all ops are returned, we set the subset to null rather than sending\n    // a comma separated list of evey solid to the API\n    if (queryResultOps.length === ops.length) {\n      onChange(null, nextQuery);\n    } else {\n      onChange(\n        queryResultOps.map((s) => s.name),\n        nextQuery,\n      );\n    }\n  };\n\n  if (!data?.pipelineOrError) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Popover\n        isOpen={focused && !!errorMessage}\n        position=\"bottom-left\"\n        content={<PopoverErrorWrap>{errorMessage}</PopoverErrorWrap>}\n      >\n        <ShortcutHandler\n          shortcutLabel=\"⌥S\"\n          shortcutFilter={(e) => e.code === 'KeyS' && e.altKey}\n          onShortcut={() => inputRef.current?.focus()}\n        >\n          <GraphQueryInput\n            width={(query !== '*' && query !== '') || focused || flattenGraphsEnabled ? 350 : 90}\n            intent={errorMessage ? 'danger' : 'none'}\n            items={ops}\n            ref={inputRef}\n            value={query}\n            placeholder=\"Type an op subset…\"\n            onChange={onTextChange}\n            onFocus={() => setFocused(true)}\n            onBlur={() => setFocused(false)}\n            linkToPreview={{\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName,\n              isJob,\n            }}\n            flattenGraphsEnabled={flattenGraphsEnabled}\n            flattenGraphs={flattenGraphs}\n            setFlattenGraphs={() => {\n              onFlattenGraphsChange(!flattenGraphs);\n            }}\n          />\n        </ShortcutHandler>\n      </Popover>\n    </Box>\n  );\n};\n\nconst PopoverErrorWrap = styled.div`\n  padding: 4px 8px;\n  border-radius: 2px;\n  border: 1px solid ${Colors.Red500};\n  background: ${Colors.Red200};\n  color: ${Colors.Red700};\n`;\n","import {gql} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {Intent} from '@blueprintjs/core';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  Icon,\n  SplitPanelContainer,\n  Tag,\n  Code,\n  Tooltip,\n  FontFamily,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {errorStackToYamlPath} from '../configeditor/ConfigEditorUtils';\nimport {\n  CompositeConfigTypeForSchemaFragment,\n  ConfigEditorRunConfigSchemaFragment,\n} from '../configeditor/types/ConfigEditorUtils.types';\n\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {\n  RunPreviewValidationErrorsFragment,\n  RunPreviewValidationFragment,\n} from './types/RunPreview.types';\n\ntype ValidationError = RunPreviewValidationErrorsFragment;\ntype ValidationErrorOrNode = ValidationError | React.ReactNode;\n\nfunction isValidationError(e: ValidationErrorOrNode): e is ValidationError {\n  return e && typeof e === 'object' && '__typename' in e ? true : false;\n}\n\nconst stateToHint: {[key: string]: {title: string; intent: Intent}} = {\n  invalid: {\n    title: `You need to fix this configuration section.`,\n    intent: 'danger',\n  },\n  missing: {\n    title: `You need to add this configuration section.`,\n    intent: 'danger',\n  },\n  present: {\n    title: `This section is present and valid.`,\n    intent: 'none',\n  },\n  none: {title: `This section is empty and valid.`, intent: 'none'},\n};\n\nconst RemoveExtraConfigButton = ({\n  onRemoveExtraPaths,\n  extraNodes,\n  disabled,\n}: {\n  extraNodes: string[];\n  onRemoveExtraPaths: (paths: string[]) => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const knownKeyExtraPaths: {[key: string]: string[]} = {};\n  const otherPaths: string[] = [];\n\n  for (const path of extraNodes) {\n    const parts = path.split('.');\n\n    // If the length is 2, the first part of the path is a known key, such as \"solids\", \"resouces\",\n    // or \"loggers\", and the user has provided extra config for one of those. We will keep track of\n    // these in `knownKeyExtraPaths` just so we can display them with an extra description.\n    if (parts.length === 2) {\n      const [type, name] = parts;\n      if (!knownKeyExtraPaths[type]) {\n        knownKeyExtraPaths[type] = [];\n      }\n      knownKeyExtraPaths[type].push(name);\n    } else {\n      otherPaths.push(path);\n    }\n  }\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Remove extra config',\n      description: (\n        <div>\n          <p>\n            {`You have provided extra configuration in your run config which does not conform to your\n            pipeline's config schema.`}\n          </p>\n          {Object.entries(knownKeyExtraPaths).length > 0 &&\n            Object.entries(knownKeyExtraPaths).map(([key, value]) => (\n              <React.Fragment key={key}>\n                <p>Extra {key}:</p>\n                <ul>\n                  {value.map((v) => (\n                    <li key={v}>\n                      <Code>{v}</Code>\n                    </li>\n                  ))}\n                </ul>\n              </React.Fragment>\n            ))}\n          {otherPaths.length > 0 && (\n            <>\n              <p>Other extra paths:</p>\n              <ul>\n                {otherPaths.map((v) => (\n                  <li key={v}>\n                    <Code>{v}</Code>\n                  </li>\n                ))}\n              </ul>\n            </>\n          )}\n          <p>\n            Clicking confirm will automatically remove this extra configuration from your run\n            config.\n          </p>\n        </div>\n      ),\n    });\n    onRemoveExtraPaths(extraNodes);\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Remove extra config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No extra config to remove\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst ScaffoldConfigButton = ({\n  onScaffoldMissingConfig,\n  missingNodes,\n  disabled,\n}: {\n  missingNodes: string[];\n  onScaffoldMissingConfig: () => void;\n  disabled: boolean;\n}) => {\n  const confirm = useConfirmation();\n\n  const confirmationMessage = (\n    <div>\n      {missingNodes.length > 0 && (\n        <>\n          <p>Missing paths:</p>\n          <ul>\n            {missingNodes.map((v) => (\n              <li key={v}>\n                <Code>{v}</Code>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      <p>\n        Clicking confirm will automatically scaffold this missing configuration into your run config\n        with default values. You will need to change the values appropriately.\n      </p>\n    </div>\n  );\n\n  const onClick = async () => {\n    await confirm({\n      title: 'Scaffold missing config',\n      description: confirmationMessage,\n    });\n    onScaffoldMissingConfig();\n  };\n\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n      <Button disabled={disabled} onClick={onClick}>\n        Scaffold missing config\n      </Button>\n      {disabled ? (\n        <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n          <Icon name=\"check_circle\" color={Colors.Green500} />\n          No missing config\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\ninterface RunPreviewProps {\n  validation: RunPreviewValidationFragment | null;\n  document: any | null;\n  launchpadType: LaunchpadType;\n\n  runConfigSchema?: ConfigEditorRunConfigSchemaFragment;\n  onHighlightPath: (path: string[]) => void;\n  onRemoveExtraPaths: (paths: string[]) => void;\n  onScaffoldMissingConfig: () => void;\n  solidSelection: string[] | null;\n}\n\nexport const RunPreview: React.FC<RunPreviewProps> = (props) => {\n  const {\n    document,\n    validation,\n    onHighlightPath,\n    launchpadType,\n    onRemoveExtraPaths,\n    onScaffoldMissingConfig,\n    solidSelection,\n    runConfigSchema,\n  } = props;\n  const [errorsOnly, setErrorsOnly] = React.useState(false);\n\n  const rootCompositeChildren = React.useMemo(() => {\n    if (!runConfigSchema) {\n      return {};\n    }\n\n    const {allConfigTypes, rootConfigType} = runConfigSchema;\n    const children: {\n      [fieldName: string]: CompositeConfigTypeForSchemaFragment;\n    } = {};\n\n    const root = allConfigTypes.find((t) => t.key === rootConfigType.key);\n    if (root?.__typename !== 'CompositeConfigType') {\n      return children;\n    }\n\n    root.fields.forEach((field) => {\n      const allConfigVersion = allConfigTypes.find((t) => t.key === field.configTypeKey);\n      if (allConfigVersion?.__typename !== 'CompositeConfigType') {\n        return;\n      }\n      children[field.name] = allConfigVersion;\n    });\n\n    return children;\n  }, [runConfigSchema]);\n\n  const extraNodes: string[] = [];\n  const missingNodes: string[] = [];\n  const errorsAndPaths: {\n    pathKey: string;\n    error: ValidationErrorOrNode;\n  }[] = [];\n\n  if (validation && validation.__typename === 'RunConfigValidationInvalid') {\n    validation.errors.forEach((e) => {\n      const path = errorStackToYamlPath(e.stack.entries);\n\n      errorsAndPaths.push({pathKey: path.join('.'), error: e});\n\n      if (e.__typename === 'MissingFieldConfigError') {\n        missingNodes.push([...path, e.field.name].join('.'));\n      } else if (e.__typename === 'MissingFieldsConfigError') {\n        for (const field of e.fields) {\n          missingNodes.push([...path, field.name].join('.'));\n        }\n      } else if (e.__typename === 'FieldNotDefinedConfigError') {\n        extraNodes.push([...path, e.fieldName].join('.'));\n      } else if (e.__typename === 'FieldsNotDefinedConfigError') {\n        for (const fieldName of e.fieldNames) {\n          extraNodes.push([...path, fieldName].join('.'));\n        }\n      } else if (e.__typename === 'RuntimeMismatchConfigError') {\n        // If an entry at a path is the wrong type,\n        // it is equivalent to it being missing\n        missingNodes.push(path.join('.'));\n      }\n    });\n  }\n\n  if (validation?.__typename === 'InvalidSubsetError') {\n    errorsAndPaths.push({pathKey: '', error: validation.message});\n  }\n\n  if (validation?.__typename === 'PythonError') {\n    const info = <PythonErrorInfo error={validation} />;\n    errorsAndPaths.push({\n      pathKey: '',\n      error: (\n        <span>\n          PythonError:{' '}\n          <ButtonLink onClick={() => showCustomAlert({body: info})}>Click for details</ButtonLink>\n        </span>\n      ),\n    });\n  }\n\n  const {resources, ops, solids, ...rest} = rootCompositeChildren;\n  const hasOps = !!ops?.fields;\n\n  const itemsIn = (parents: string[], items: {name: string; isRequired: boolean}[]) => {\n    const boxes = items\n      .map((item) => {\n        // If a solid selection is in use, discard anything not in it.\n        if (solidSelection?.length && !solidSelection?.includes(item.name)) {\n          return null;\n        }\n\n        const path = [...parents, item.name];\n        const pathKey = path.join('.');\n        const pathErrors = errorsAndPaths\n          .filter((e) => e.pathKey === pathKey || e.pathKey.startsWith(`${pathKey}.`))\n          .map((e) => e.error);\n\n        const isPresent = pathExistsInObject(path, document);\n        const containsMissing = missingNodes.some((missingNode) =>\n          missingNode.includes(path.join('.')),\n        );\n        const isInvalid = pathErrors.length || containsMissing;\n        const isMissing = path.some((_, idx) =>\n          missingNodes.includes(path.slice(0, idx + 1).join('.')),\n        );\n\n        if (errorsOnly && !isInvalid) {\n          return false;\n        }\n\n        const state =\n          isMissing && item.isRequired\n            ? 'missing'\n            : isInvalid\n            ? 'invalid'\n            : isPresent\n            ? 'present'\n            : 'none';\n\n        return (\n          <Tooltip\n            position=\"bottom\"\n            content={stateToHint[state].title}\n            intent={stateToHint[state].intent}\n            key={item.name}\n          >\n            <Tag\n              key={item.name}\n              intent={stateToHint[state].intent}\n              onClick={() => {\n                const first = pathErrors.find(isValidationError);\n                onHighlightPath(first ? errorStackToYamlPath(first.stack.entries) : path);\n              }}\n            >\n              {item.name}\n            </Tag>\n          </Tooltip>\n        );\n      })\n      .filter(Boolean);\n\n    if (!boxes.length) {\n      return <ItemsEmptyNotice>Nothing to display.</ItemsEmptyNotice>;\n    }\n    return boxes;\n  };\n\n  return (\n    <SplitPanelContainer\n      identifier=\"run-preview\"\n      axis=\"horizontal\"\n      first={\n        <ErrorListContainer>\n          <Section>\n            <SectionTitle>Errors</SectionTitle>\n            {errorsAndPaths.length ? (\n              errorsAndPaths.map((item, idx) => (\n                <ErrorRow key={idx} error={item.error} onHighlight={onHighlightPath} />\n              ))\n            ) : (\n              <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                <Icon name=\"check_circle\" color={Colors.Green500} />\n                No errors\n              </Box>\n            )}\n          </Section>\n          <Section>\n            <SectionTitle>Config actions:</SectionTitle>\n            <Box flex={{direction: 'column', gap: 8}} padding={{top: 4, bottom: 20}}>\n              <ScaffoldConfigButton\n                onScaffoldMissingConfig={onScaffoldMissingConfig}\n                missingNodes={missingNodes}\n                disabled={!missingNodes.length}\n              />\n              <RemoveExtraConfigButton\n                onRemoveExtraPaths={onRemoveExtraPaths}\n                extraNodes={extraNodes}\n                disabled={!extraNodes.length}\n              />\n            </Box>\n          </Section>\n        </ErrorListContainer>\n      }\n      firstInitialPercent={50}\n      firstMinSize={150}\n      second={\n        <>\n          <div style={{overflowY: 'scroll', width: '100%', height: '100%'}}>\n            <RuntimeAndResourcesSection>\n              <Section>\n                <SectionTitle>Runtime</SectionTitle>\n                <ItemSet>\n                  {itemsIn(\n                    [],\n                    Object.keys(rest).map((name) => ({name, isRequired: false})),\n                  )}\n                </ItemSet>\n              </Section>\n              {(resources?.fields.length || 0) > 0 && (\n                <Section>\n                  <SectionTitle>Resources</SectionTitle>\n                  <ItemSet>{itemsIn(['resources'], resources?.fields || [])}</ItemSet>\n                </Section>\n              )}\n            </RuntimeAndResourcesSection>\n            <Section>\n              <SectionTitle>{launchpadType === 'asset' ? 'Assets (Ops)' : 'Ops'}</SectionTitle>\n              <ItemSet>\n                {itemsIn(\n                  [hasOps ? 'ops' : 'solids'],\n                  (hasOps ? ops?.fields : solids?.fields) || [],\n                )}\n              </ItemSet>\n            </Section>\n            <div style={{height: 50}} />\n          </div>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              right: 0,\n              padding: '12px 15px 0px 10px',\n              background: 'rgba(255,255,255,0.7)',\n            }}\n          >\n            <Checkbox\n              label=\"Errors Only\"\n              checked={errorsOnly}\n              onChange={() => setErrorsOnly(!errorsOnly)}\n            />\n          </div>\n        </>\n      }\n    />\n  );\n};\n\nexport const RUN_PREVIEW_VALIDATION_FRAGMENT = gql`\n  fragment RunPreviewValidationFragment on PipelineConfigValidationResult {\n    __typename\n    ... on RunConfigValidationInvalid {\n      errors {\n        ...RunPreviewValidationErrors\n      }\n    }\n    ... on PipelineNotFoundError {\n      message\n    }\n    ... on InvalidSubsetError {\n      message\n    }\n    ...PythonErrorFragment\n  }\n\n  fragment RunPreviewValidationErrors on PipelineConfigValidationError {\n    reason\n    message\n    stack {\n      entries {\n        __typename\n        ... on EvaluationStackPathEntry {\n          fieldName\n        }\n        ... on EvaluationStackListItemEntry {\n          listIndex\n        }\n        ... on EvaluationStackMapKeyEntry {\n          mapKey\n        }\n        ... on EvaluationStackMapValueEntry {\n          mapKey\n        }\n      }\n    }\n    ... on MissingFieldConfigError {\n      field {\n        name\n      }\n    }\n    ... on MissingFieldsConfigError {\n      fields {\n        name\n      }\n    }\n    ... on FieldNotDefinedConfigError {\n      fieldName\n    }\n    ... on FieldsNotDefinedConfigError {\n      fieldNames\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst SectionTitle = styled.div`\n  color: ${Colors.Gray400};\n  text-transform: uppercase;\n  font-size: 12px;\n  margin-bottom: 8px;\n`;\n\nconst Section = styled.div`\n  margin-top: 14px;\n  margin-left: 10px;\n`;\n\nconst ItemSet = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n\nconst ItemsEmptyNotice = styled.div`\n  font-size: 13px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n`;\n\nconst ErrorListContainer = styled.div`\n  margin-left: 10px;\n  overflow-y: scroll;\n  height: 100%;\n`;\n\nconst ErrorRowContainer = styled.div<{hoverable: boolean}>`\n  text-align: left;\n  font-size: 13px;\n  white-space: pre-wrap;\n  word-break: break-word;\n  font-family: ${FontFamily.monospace};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  border-bottom: 1px solid #ccc;\n  padding: 8px;\n  margin: 8px 12px 0 -8px;\n  &:last-child {\n    border-bottom: 0;\n    margin-bottom: 15px;\n  }\n  ${({hoverable}) =>\n    hoverable &&\n    `&:hover {\n      background: ${Colors.Gray50};\n    }\n  `}\n`;\n\nconst RuntimeAndResourcesSection = styled.div`\n  display: flex;\n  gap: 12px;\n  @media (max-width: 800px) {\n    flex-direction: column;\n  }\n`;\n\nconst ErrorRow: React.FC<{\n  error: ValidationError | React.ReactNode;\n  onHighlight: (path: string[]) => void;\n}> = ({error, onHighlight}) => {\n  let message: React.ReactNode = null;\n  let target: ValidationError | null = null;\n  if (isValidationError(error)) {\n    message = error.message;\n    target = error;\n  } else {\n    message = error;\n  }\n\n  let displayed = message;\n  if (typeof message === 'string' && message.length > 400) {\n    displayed = truncateErrorMessage(message);\n  }\n\n  return (\n    <ErrorRowContainer\n      hoverable={!!target}\n      onClick={() => target && onHighlight(errorStackToYamlPath(target.stack.entries))}\n    >\n      <div style={{paddingRight: 4}}>\n        <Icon name=\"error\" color={Colors.Red500} />\n      </div>\n      <div>\n        {displayed}\n        {displayed !== message && (\n          <>\n            &nbsp;\n            <ButtonLink\n              onClick={() =>\n                showCustomAlert({\n                  body: <div style={{whiteSpace: 'pre-wrap'}}>{message}</div>,\n                })\n              }\n            >\n              View all\n            </ButtonLink>\n          </>\n        )}\n      </div>\n    </ErrorRowContainer>\n  );\n};\n\nfunction truncateErrorMessage(message: string) {\n  let split = message.indexOf('{');\n  if (split === -1) {\n    split = message.indexOf('. ');\n  }\n  if (split === -1) {\n    split = 400;\n  }\n  return message.substr(0, split) + '... ';\n}\n\nfunction pathExistsInObject(path: string[], object: any): boolean {\n  if (!object || typeof object !== 'object') {\n    return false;\n  }\n  if (path.length === 0) {\n    return true;\n  }\n  const [first, ...rest] = path;\n  return pathExistsInObject(rest, object[first]);\n}\n","import {assertUnreachable} from '../app/Util';\nimport {\n  AllConfigTypesForEditorFragment,\n  ConfigEditorRunConfigSchemaFragment,\n} from '../configeditor/types/ConfigEditorUtils.types';\n\nexport const scaffoldType = (\n  configTypeKey: string,\n  typeLookup: {[key: string]: AllConfigTypesForEditorFragment},\n): any => {\n  const type = typeLookup[configTypeKey];\n\n  switch (type.__typename) {\n    case 'CompositeConfigType':\n      if (type.isSelector) {\n        // Could potentially do something better here, like scaffold out\n        // all the types and let the user delete the ones they don't want.\n        return '<selector>';\n      }\n\n      const config = {};\n      for (const field of type.fields) {\n        const {name, isRequired, configTypeKey} = field;\n        if (isRequired) {\n          (config as any)[name] = scaffoldType(configTypeKey, typeLookup);\n        }\n      }\n\n      return config;\n    case 'ArrayConfigType':\n      return [];\n    case 'MapConfigType':\n      return {};\n    case 'NullableConfigType':\n      // If a type is nullable we include it in the scaffolded config anyway\n      // by using the inner type\n      const innerType = type.typeParamKeys[0];\n      return scaffoldType(innerType, typeLookup);\n    case 'EnumConfigType':\n      // Here we just join all the potential enum values with a |. The user needs to delete\n      // all the values but the ones they want to use.\n      return type.values.map((i) => i.value).join('|');\n    case 'ScalarUnionConfigType':\n      // Here we just scaffold the scalar value. Could potentially try to\n      // scaffold the other type instead.\n      const {scalarTypeKey} = type;\n      return scaffoldType(scalarTypeKey, typeLookup);\n    case 'RegularConfigType':\n      return {\n        String: '',\n        Int: 0,\n        Float: 0.0,\n        Bool: true,\n        Any: 'AnyType',\n      }[type.key];\n    default:\n      assertUnreachable(type);\n  }\n};\n\nexport const createTypeLookup = (allConfigTypes: AllConfigTypesForEditorFragment[]) => {\n  const typeLookup: {[key: string]: AllConfigTypesForEditorFragment} = {};\n  for (const type of allConfigTypes) {\n    typeLookup[type.key] = type;\n  }\n\n  return typeLookup;\n};\n\nexport const scaffoldPipelineConfig = (configSchema: ConfigEditorRunConfigSchemaFragment) => {\n  const {allConfigTypes, rootConfigType} = configSchema;\n  const typeLookup = createTypeLookup(allConfigTypes);\n  const config = scaffoldType(rootConfigType.key, typeLookup);\n  return config;\n};\n","import {gql, useApolloClient, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  ConfigEditor,\n  ConfigEditorHelpContext,\n  Group,\n  Icon,\n  SecondPanelToggle,\n  SplitPanelContainer,\n  isHelpContextEqual,\n  ConfigEditorHelp,\n  TextInput,\n} from '@dagster-io/ui';\nimport merge from 'deepmerge';\nimport uniqBy from 'lodash/uniqBy';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\nimport * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {\n  IExecutionSession,\n  IExecutionSessionChanges,\n  PipelineRunTag,\n  SessionBase,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {\n  CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT,\n  CONFIG_EDITOR_VALIDATION_FRAGMENT,\n  responseToYamlValidationResult,\n} from '../configeditor/ConfigEditorUtils';\nimport {PipelineSelector, RepositorySelector} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  ConfigEditorConfigPicker,\n  CONFIG_PARTITION_SELECTION_QUERY,\n} from './ConfigEditorConfigPicker';\nimport {ConfigEditorModePicker} from './ConfigEditorModePicker';\nimport {useLaunchPadHooks} from './LaunchpadHooksContext';\nimport {LaunchpadType} from './LaunchpadRoot';\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {OpSelector} from './OpSelector';\nimport {RunPreview, RUN_PREVIEW_VALIDATION_FRAGMENT} from './RunPreview';\nimport {SessionSettingsBar} from './SessionSettingsBar';\nimport {TagContainer, TagEditor} from './TagEditor';\nimport {scaffoldPipelineConfig} from './scaffoldType';\nimport {\n  ConfigEditorPipelinePresetFragment,\n  ConfigPartitionSelectionQuery,\n  ConfigPartitionSelectionQueryVariables,\n} from './types/ConfigEditorConfigPicker.types';\nimport {\n  LaunchpadSessionPartitionSetsFragment,\n  LaunchpadSessionPipelineFragment,\n} from './types/LaunchpadRoot.types';\nimport {\n  PipelineExecutionConfigSchemaQuery,\n  PipelineExecutionConfigSchemaQueryVariables,\n  PreviewConfigQuery,\n  PreviewConfigQueryVariables,\n} from './types/LaunchpadSession.types';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\nconst LOADING_CONFIG_FOR_PARTITION = `Generating configuration...`;\nconst LOADING_CONFIG_SCHEMA = `Loading config schema...`;\nconst LOADING_RUN_PREVIEW = `Checking config...`;\n\ntype Preset = ConfigEditorPipelinePresetFragment;\n\ninterface LaunchpadSessionProps {\n  session: IExecutionSession;\n  onSave: (changes: IExecutionSessionChanges) => void;\n  launchpadType: LaunchpadType;\n  pipeline: LaunchpadSessionPipelineFragment;\n  partitionSets: LaunchpadSessionPartitionSetsFragment;\n  repoAddress: RepoAddress;\n  initialExecutionSessionState?: Partial<IExecutionSession>;\n}\n\ninterface ILaunchpadSessionState {\n  preview: PreviewConfigQuery | null;\n  previewLoading: boolean;\n  previewedDocument: any | null;\n  configLoading: boolean;\n  editorHelpContext: ConfigEditorHelpContext | null;\n  tagEditorOpen: boolean;\n}\n\ntype Action =\n  | {type: 'preview-loading'; payload: boolean}\n  | {\n      type: 'set-preview';\n      payload: {\n        preview: PreviewConfigQuery | null;\n        previewLoading: boolean;\n        previewedDocument: string | null;\n      };\n    }\n  | {type: 'toggle-tag-editor'; payload: boolean}\n  | {type: 'toggle-config-loading'; payload: boolean}\n  | {type: 'set-editor-help-context'; payload: ConfigEditorHelpContext | null};\n\nconst reducer = (state: ILaunchpadSessionState, action: Action) => {\n  switch (action.type) {\n    case 'preview-loading':\n      return {...state, previewLoading: action.payload};\n    case 'set-preview': {\n      const {preview, previewedDocument, previewLoading} = action.payload;\n      return {\n        ...state,\n        preview,\n        previewedDocument,\n        previewLoading,\n      };\n    }\n    case 'toggle-tag-editor':\n      return {...state, tagEditorOpen: action.payload};\n    case 'toggle-config-loading':\n      return {...state, configLoading: action.payload};\n    case 'set-editor-help-context':\n      return {...state, editorHelpContext: action.payload};\n    default:\n      return state;\n  }\n};\n\nconst LaunchButtonContainer: React.FC<{\n  launchpadType: LaunchpadType;\n  children: React.ReactNode;\n}> = ({launchpadType, children}) => {\n  if (launchpadType === 'asset') {\n    return (\n      <Box\n        flex={{direction: 'row'}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        padding={{right: 12, vertical: 8}}\n      >\n        <div style={{flexGrow: 1}} />\n        {children}\n      </Box>\n    );\n  } else {\n    // job\n    return <div style={{position: 'absolute', bottom: 12, right: 12, zIndex: 1}}>{children}</div>;\n  }\n};\n\nconst initialState: ILaunchpadSessionState = {\n  preview: null,\n  previewLoading: false,\n  previewedDocument: null,\n  configLoading: false,\n  editorHelpContext: null,\n  tagEditorOpen: false,\n};\n\nconst LaunchpadSession: React.FC<LaunchpadSessionProps> = (props) => {\n  const {\n    launchpadType,\n    session: currentSession,\n    onSave,\n    partitionSets,\n    pipeline,\n    repoAddress,\n  } = props;\n\n  const client = useApolloClient();\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  const {\n    permissions: {canLaunchPipelineExecution},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const mounted = React.useRef<boolean>(false);\n  const editor = React.useRef<ConfigEditor | null>(null);\n  const editorSplitPanelContainer = React.useRef<SplitPanelContainer | null>(null);\n  const previewCounter = React.useRef(0);\n\n  const {isJob} = pipeline;\n  const tagsFromSession = React.useMemo(() => currentSession.tags || [], [currentSession]);\n\n  const pipelineSelector: PipelineSelector = {\n    ...repoAddressToSelector(repoAddress),\n    pipelineName: pipeline.name,\n    solidSelection: currentSession.solidSelection || undefined,\n    assetSelection: currentSession.assetSelection?.map(({assetKey: {path}}) => ({path})),\n  };\n\n  const configResult = useQuery<\n    PipelineExecutionConfigSchemaQuery,\n    PipelineExecutionConfigSchemaQueryVariables\n  >(PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY, {\n    variables: {selector: pipelineSelector, mode: currentSession?.mode},\n    partialRefetch: true,\n  });\n\n  const configSchemaOrError = configResult?.data?.runConfigSchemaOrError;\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n\n  const onSaveSession = (changes: IExecutionSessionChanges) => {\n    onSave(changes);\n  };\n\n  const onConfigChange = (config: any) => {\n    onSaveSession({\n      runConfigYaml: config,\n    });\n  };\n\n  const onOpSelectionChange = (\n    solidSelection: string[] | null,\n    solidSelectionQuery: string | null,\n  ) => {\n    onSaveSession({\n      solidSelection,\n      solidSelectionQuery,\n    });\n  };\n\n  const onFlattenGraphsChange = (flattenGraphs: boolean) => {\n    onSaveSession({flattenGraphs});\n  };\n\n  const onModeChange = (mode: string) => {\n    onSaveSession({mode});\n  };\n\n  const onRemoveExtraPaths = (paths: string[]) => {\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      for (const path of paths) {\n        deletePropertyPath(runConfigData, path);\n      }\n      onSaveSession({runConfigYaml: yaml.stringify(runConfigData)});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n  };\n\n  const runConfigSchema =\n    configSchemaOrError?.__typename === 'RunConfigSchema' ? configSchemaOrError : undefined;\n  const modeError =\n    configSchemaOrError?.__typename === 'ModeNotFoundError' ? configSchemaOrError : undefined;\n\n  const onScaffoldMissingConfig = () => {\n    const config = runConfigSchema ? scaffoldPipelineConfig(runConfigSchema) : {};\n    try {\n      const runConfigData = yaml.parse(sanitizeConfigYamlString(currentSession.runConfigYaml));\n      const updatedRunConfigData = merge(config, runConfigData);\n      const runConfigYaml = yaml.stringify(updatedRunConfigData);\n      onSaveSession({runConfigYaml});\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n    }\n  };\n\n  const buildExecutionVariables = () => {\n    if (!currentSession) {\n      return;\n    }\n\n    const configYamlOrEmpty = sanitizeConfigYamlString(currentSession.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch (err) {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n\n    return {\n      executionParams: {\n        runConfigData: configYamlOrEmpty,\n        selector: {\n          ...pipelineSelector,\n          assetSelection: currentSession.assetSelection\n            ? currentSession.assetSelection.map((a) => ({path: a.assetKey.path}))\n            : undefined,\n        },\n        mode: currentSession.mode || 'default',\n        executionMetadata: {\n          tags: uniqBy(\n            [\n              // pass solid selection query via tags\n              // clean up https://github.com/dagster-io/dagster/issues/2495\n              ...(currentSession.solidSelectionQuery\n                ? [\n                    {\n                      key: DagsterTag.SolidSelection,\n                      value: currentSession.solidSelectionQuery,\n                    },\n                  ]\n                : []),\n              ...(currentSession?.base && (currentSession?.base as any)['presetName']\n                ? [\n                    {\n                      key: DagsterTag.PresetName,\n                      value: (currentSession?.base as any)['presetName'],\n                    },\n                  ]\n                : []),\n\n              ...tagsFromSession.map(onlyKeyAndValue),\n\n              // note, we apply these last - uniqBy uses the first value it sees for\n              // each key, so these can be overridden in the session\n              ...pipeline.tags.map(onlyKeyAndValue),\n            ],\n            (tag) => tag.key,\n          ),\n        },\n      },\n    };\n  };\n\n  const saveTags = (tags: PipelineRunTag[]) => {\n    const tagDict = {};\n    const toSave: PipelineRunTag[] = [];\n    tags.forEach((tag: PipelineRunTag) => {\n      if (!(tag.key in tagDict)) {\n        (tagDict as any)[tag.key] = tag.value;\n        toSave.push(tag);\n      }\n    });\n    onSaveSession({tags: toSave});\n  };\n\n  const checkConfig = async (configYaml: string) => {\n    // Another request to preview a newer document may be made while this request\n    // is in flight, in which case completion of this async method should not set loading=false.\n    previewCounter.current += 1;\n    const currentPreviewCount = previewCounter.current;\n    const configYamlOrEmpty = sanitizeConfigYamlString(configYaml);\n\n    dispatch({type: 'preview-loading', payload: true});\n\n    const {data} = await client.query<PreviewConfigQuery, PreviewConfigQueryVariables>({\n      fetchPolicy: 'no-cache',\n      query: PREVIEW_CONFIG_QUERY,\n      variables: {\n        runConfigData: configYamlOrEmpty,\n        pipeline: pipelineSelector,\n        mode: currentSession.mode || 'default',\n      },\n    });\n\n    if (mounted.current) {\n      const isLatestRequest = currentPreviewCount === previewCounter.current;\n      dispatch({\n        type: 'set-preview',\n        payload: {\n          preview: data,\n          previewedDocument: configYamlOrEmpty,\n          previewLoading: isLatestRequest ? false : state.previewLoading,\n        },\n      });\n    }\n\n    return responseToYamlValidationResult(configYamlOrEmpty, data.isPipelineConfigValid);\n  };\n\n  const tagsApplyingNewBaseTags = (newBaseTags: PipelineRunTag[]) => {\n    // If you choose a new base (preset or partition), we want to make a best-effort to preserve\n    // the tags you've manually typed in, but remove:\n    // - Tags that were in your previous base and are unchanged\n    // - Tags that are specified in the new base\n    const preservedUserTags = currentSession.base\n      ? tagsFromSession.filter(\n          (t) =>\n            currentSession.base?.tags &&\n            !currentSession.base?.tags.some((bt) => bt.key === t.key && bt.value === t.value) &&\n            !newBaseTags.some((bt) => bt.key === t.key),\n        )\n      : [];\n\n    return [...newBaseTags, ...preservedUserTags];\n  };\n\n  const onSelectPreset = async (preset: Preset) => {\n    const newBaseTags = preset.tags.map(onlyKeyAndValue);\n\n    onSaveSession({\n      base: {presetName: preset.name, tags: newBaseTags},\n      name: preset.name,\n      runConfigYaml: preset.runConfigYaml || '',\n      solidSelection: preset.solidSelection,\n      solidSelectionQuery: preset.solidSelection === null ? '*' : preset.solidSelection.join(','),\n      mode: preset.mode,\n      tags: tagsApplyingNewBaseTags(newBaseTags),\n      needsRefresh: false,\n    });\n  };\n\n  const onSelectPartition = async (\n    repositorySelector: RepositorySelector,\n    partitionSetName: string,\n    partitionName: string,\n    sessionSolidSelection?: string[] | null,\n  ) => {\n    onConfigLoading();\n    try {\n      const {base} = currentSession;\n      const {data} = await client.query<\n        ConfigPartitionSelectionQuery,\n        ConfigPartitionSelectionQueryVariables\n      >({\n        query: CONFIG_PARTITION_SELECTION_QUERY,\n        variables: {repositorySelector, partitionSetName, partitionName},\n      });\n\n      if (\n        !data ||\n        !data.partitionSetOrError ||\n        data.partitionSetOrError.__typename !== 'PartitionSet' ||\n        !data.partitionSetOrError.partition\n      ) {\n        onConfigLoaded();\n        return;\n      }\n\n      const {partition} = data.partitionSetOrError;\n\n      let newBaseTags: {key: string; value: string}[] = [];\n      if (partition.tagsOrError.__typename === 'PythonError') {\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.tagsOrError} />,\n        });\n      } else {\n        newBaseTags = partition.tagsOrError.results.map(onlyKeyAndValue);\n      }\n\n      let runConfigYaml;\n      if (partition.runConfigOrError.__typename === 'PythonError') {\n        runConfigYaml = '';\n        showCustomAlert({\n          body: <PythonErrorInfo error={partition.runConfigOrError} />,\n        });\n      } else {\n        runConfigYaml = partition.runConfigOrError.yaml;\n      }\n\n      const solidSelection = sessionSolidSelection || partition.solidSelection;\n\n      onSaveSession({\n        name: partition.name,\n        base: Object.assign({}, base, {partitionName: partition.name, tags: newBaseTags}),\n        runConfigYaml,\n        solidSelection,\n        solidSelectionQuery: solidSelection === null ? '*' : solidSelection.join(','),\n        mode: partition.mode,\n        tags: tagsApplyingNewBaseTags(newBaseTags),\n        needsRefresh: false,\n      });\n    } catch {}\n    onConfigLoaded();\n  };\n\n  const onRefreshConfig = async (base: SessionBase) => {\n    // Handle preset-based configuration.\n    if ('presetName' in base) {\n      const {presetName} = base;\n      const matchingPreset = pipeline.presets.find((preset) => preset.name === presetName);\n      if (matchingPreset) {\n        onSelectPreset({\n          ...matchingPreset,\n          solidSelection: currentSession.solidSelection || matchingPreset.solidSelection,\n        });\n      }\n      return;\n    }\n\n    // Otherwise, handle partition-based configuration.\n    const {partitionName, partitionsSetName} = base;\n    const repositorySelector = repoAddressToSelector(repoAddress);\n\n    // It is expected that `partitionName` is set here, since we shouldn't be showing the\n    // button at all otherwise.\n    if (partitionName) {\n      onConfigLoading();\n      await onSelectPartition(\n        repositorySelector,\n        partitionsSetName,\n        partitionName,\n        currentSession.solidSelection,\n      );\n      onConfigLoaded();\n    }\n  };\n\n  const onDismissRefreshWarning = () => {\n    onSaveSession({needsRefresh: false});\n  };\n\n  const openTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: true});\n  const closeTagEditor = () => dispatch({type: 'toggle-tag-editor', payload: false});\n\n  const onConfigLoading = () => dispatch({type: 'toggle-config-loading', payload: true});\n  const onConfigLoaded = () => dispatch({type: 'toggle-config-loading', payload: false});\n\n  const {\n    preview,\n    previewLoading,\n    previewedDocument,\n    configLoading,\n    editorHelpContext,\n    tagEditorOpen,\n  } = state;\n\n  const refreshableSessionBase = React.useMemo(() => {\n    const {base, needsRefresh} = currentSession;\n    if (\n      base &&\n      needsRefresh &&\n      ('presetName' in base || (base.partitionsSetName && base.partitionName))\n    ) {\n      return base;\n    }\n    return null;\n  }, [currentSession]);\n\n  let launchButtonTitle: string | undefined;\n  if (launchpadType === 'asset') {\n    launchButtonTitle = 'Materialize';\n  }\n\n  let launchButtonWarning: string | undefined;\n  if (\n    partitionSets.results.length &&\n    currentSession.base &&\n    'partitionsSetName' in currentSession.base &&\n    !currentSession.base.partitionName\n  ) {\n    launchButtonWarning =\n      'This job is partitioned. Are you sure you want to launch' +\n      ' a run without a partition specified?';\n  }\n\n  const {LaunchRootExecutionButton} = useLaunchPadHooks();\n\n  return (\n    <>\n      <SplitPanelContainer\n        axis=\"vertical\"\n        identifier=\"execution\"\n        firstMinSize={100}\n        firstInitialPercent={75}\n        first={\n          <>\n            <LoadingOverlay isLoading={configLoading} message={LOADING_CONFIG_FOR_PARTITION} />\n            <SessionSettingsBar>\n              <ConfigEditorConfigPicker\n                pipeline={pipeline}\n                partitionSets={partitionSets.results}\n                base={currentSession.base}\n                onSaveSession={onSaveSession}\n                onSelectPreset={onSelectPreset}\n                onSelectPartition={onSelectPartition}\n                repoAddress={repoAddress}\n                assetSelection={currentSession.assetSelection}\n              />\n              <SessionSettingsSpacer />\n              {launchpadType === 'asset' ? (\n                <TextInput\n                  readOnly\n                  value={\n                    currentSession.assetSelection\n                      ? currentSession.assetSelection\n                          .map((a) => tokenForAssetKey(a.assetKey))\n                          .join(', ')\n                      : '*'\n                  }\n                />\n              ) : (\n                <OpSelector\n                  serverProvidedSubsetError={\n                    preview?.isPipelineConfigValid.__typename === 'InvalidSubsetError'\n                      ? preview.isPipelineConfigValid\n                      : undefined\n                  }\n                  pipelineName={pipeline.name}\n                  value={currentSession.solidSelection || null}\n                  query={currentSession.solidSelectionQuery || null}\n                  onChange={onOpSelectionChange}\n                  flattenGraphs={currentSession.flattenGraphs}\n                  onFlattenGraphsChange={onFlattenGraphsChange}\n                  repoAddress={repoAddress}\n                />\n              )}\n\n              {isJob ? (\n                <span />\n              ) : (\n                <>\n                  <SessionSettingsSpacer />\n                  <ConfigEditorModePicker\n                    modes={pipeline.modes}\n                    modeError={modeError}\n                    onModeChange={onModeChange}\n                    modeName={currentSession.mode}\n                  />\n                </>\n              )}\n              <TagEditor\n                tagsFromDefinition={pipeline.tags}\n                tagsFromSession={tagsFromSession}\n                onChange={saveTags}\n                open={tagEditorOpen}\n                onRequestClose={closeTagEditor}\n              />\n              <div style={{flex: 1}} />\n              <ShortcutHandler\n                shortcutLabel=\"⌥T\"\n                shortcutFilter={(e) => e.code === 'KeyT' && e.altKey}\n                onShortcut={openTagEditor}\n              >\n                <Button onClick={openTagEditor} icon={<Icon name=\"edit\" />}>\n                  Edit tags\n                </Button>\n              </ShortcutHandler>\n              <SessionSettingsSpacer />\n              <SecondPanelToggle axis=\"horizontal\" container={editorSplitPanelContainer} />\n            </SessionSettingsBar>\n            {pipeline.tags.length || tagsFromSession.length ? (\n              <Box\n                padding={{vertical: 8, left: 12, right: 0}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <TagContainer\n                  tagsFromDefinition={pipeline.tags}\n                  tagsFromSession={tagsFromSession}\n                  onRequestEdit={openTagEditor}\n                />\n              </Box>\n            ) : null}\n            {refreshableSessionBase ? (\n              <Box\n                padding={{vertical: 8, horizontal: 12}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray200}}\n              >\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <Icon name=\"warning\" color={Colors.Yellow500} />\n                  <div>\n                    {repoAddressAsHumanString(repoAddress)} has been manually refreshed, and this\n                    configuration may now be out of date.\n                  </div>\n                  <Button\n                    intent=\"primary\"\n                    onClick={() => onRefreshConfig(refreshableSessionBase)}\n                    disabled={state.configLoading}\n                  >\n                    Refresh config\n                  </Button>\n                  <Button onClick={onDismissRefreshWarning}>Dismiss</Button>\n                </Group>\n              </Box>\n            ) : null}\n            <SplitPanelContainer\n              ref={editorSplitPanelContainer}\n              axis=\"horizontal\"\n              identifier=\"execution-editor\"\n              firstMinSize={100}\n              firstInitialPercent={70}\n              first={\n                <ConfigEditor\n                  ref={editor}\n                  readOnly={false}\n                  configSchema={runConfigSchema}\n                  configCode={currentSession.runConfigYaml}\n                  onConfigChange={onConfigChange}\n                  onHelpContextChange={(next) => {\n                    if (!isHelpContextEqual(editorHelpContext, next)) {\n                      dispatch({type: 'set-editor-help-context', payload: next});\n                    }\n                  }}\n                  checkConfig={checkConfig}\n                />\n              }\n              second={\n                <ConfigEditorHelp\n                  context={editorHelpContext}\n                  allInnerTypes={runConfigSchema?.allConfigTypes || []}\n                />\n              }\n            />\n          </>\n        }\n        second={\n          <>\n            <LoadingOverlay\n              isLoading={previewLoading}\n              message={!runConfigSchema ? LOADING_CONFIG_SCHEMA : LOADING_RUN_PREVIEW}\n            />\n            <RunPreview\n              launchpadType={launchpadType}\n              document={previewedDocument}\n              validation={preview ? preview.isPipelineConfigValid : null}\n              solidSelection={currentSession.solidSelection}\n              runConfigSchema={runConfigSchema}\n              onHighlightPath={(path) => editor.current?.moveCursorToPath(path)}\n              onRemoveExtraPaths={(paths) => onRemoveExtraPaths(paths)}\n              onScaffoldMissingConfig={onScaffoldMissingConfig}\n            />\n          </>\n        }\n      />\n\n      <LaunchButtonContainer launchpadType={launchpadType}>\n        <LaunchRootExecutionButton\n          title={launchButtonTitle}\n          warning={launchButtonWarning}\n          hasLaunchPermission={canLaunchPipelineExecution}\n          pipelineName={pipeline.name}\n          getVariables={buildExecutionVariables}\n          disabled={preview?.isPipelineConfigValid?.__typename !== 'PipelineConfigValidationValid'}\n          behavior=\"open\"\n        />\n      </LaunchButtonContainer>\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default LaunchpadSession;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\nconst deletePropertyPath = (obj: any, path: string) => {\n  const parts = path.split('.');\n\n  // Here we iterate through the parts of the path to get to\n  // the second to last nested object. This is so we can call `delete` using\n  // this object and the last part of the path.\n  for (let i = 0; i < parts.length - 1; i++) {\n    obj = obj[parts[i]];\n    if (typeof obj === 'undefined') {\n      return;\n    }\n  }\n\n  const lastKey = parts.pop();\n  if (lastKey) {\n    delete obj[lastKey];\n  }\n};\n\nconst sanitizeConfigYamlString = (yamlString: string) => (yamlString || '').trim() || '{}';\n\nconst PREVIEW_CONFIG_QUERY = gql`\n  query PreviewConfigQuery(\n    $pipeline: PipelineSelector!\n    $runConfigData: RunConfigData!\n    $mode: String!\n  ) {\n    isPipelineConfigValid(pipeline: $pipeline, runConfigData: $runConfigData, mode: $mode) {\n      ...ConfigEditorValidationFragment\n      ...RunPreviewValidationFragment\n    }\n  }\n\n  ${CONFIG_EDITOR_VALIDATION_FRAGMENT}\n  ${RUN_PREVIEW_VALIDATION_FRAGMENT}\n`;\n\nconst SessionSettingsSpacer = styled.div`\n  width: 5px;\n`;\n\nconst PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY = gql`\n  query PipelineExecutionConfigSchemaQuery($selector: PipelineSelector!, $mode: String) {\n    runConfigSchemaOrError(selector: $selector, mode: $mode) {\n      ...LaunchpadSessionRunConfigSchemaFragment\n    }\n  }\n\n  fragment LaunchpadSessionRunConfigSchemaFragment on RunConfigSchemaOrError {\n    __typename\n    ... on RunConfigSchema {\n      ...ConfigEditorRunConfigSchemaFragment\n    }\n    ... on ModeNotFoundError {\n      ...LaunchpadSessionModeNotFound\n    }\n  }\n\n  fragment LaunchpadSessionModeNotFound on ModeNotFoundError {\n    message\n  }\n\n  ${CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT}\n`;\n","import {NonIdealState, NonIdealStateProps, Spinner, SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nexport const LaunchpadSessionError: React.FC<NonIdealStateProps> = (props) => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <SessionSettingsBar>\n          <Spinner purpose=\"section\" />\n        </SessionSettingsBar>\n        <NonIdealState {...props} />\n      </>\n    }\n    second={<div />}\n  />\n);\n","import {SplitPanelContainer} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LoadingOverlay} from './LoadingOverlay';\nimport {SessionSettingsBar} from './SessionSettingsBar';\n\nconst LOADING_PIPELINE = `Loading pipeline and partition sets...`;\n\nexport const LaunchpadSessionLoading = () => (\n  <SplitPanelContainer\n    axis=\"vertical\"\n    identifier=\"execution\"\n    firstInitialPercent={75}\n    firstMinSize={100}\n    first={\n      <>\n        <LoadingOverlay isLoading message={LOADING_PIPELINE} />\n        <SessionSettingsBar />\n      </>\n    }\n    second={<LoadingOverlay isLoading message=\"Loading pipeline and partition sets...\" />}\n  />\n);\n","import {Group, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const LoadingOverlay: React.FC<{\n  isLoading: boolean;\n  message: string;\n}> = ({isLoading, message}) => (\n  <LoadingOverlayContainer isLoading={isLoading}>\n    <Group direction=\"row\" spacing={8} alignItems=\"center\">\n      <Spinner purpose=\"body-text\" />\n      <div>{message}</div>\n    </Group>\n  </LoadingOverlayContainer>\n);\n\nconst LoadingOverlayContainer = styled.div<{isLoading: boolean}>`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  background-color: #fff;\n  z-index: 20;\n  display: ${({isLoading}) => (!isLoading ? 'none' : 'flex')};\n  align-items: center;\n  justify-content: center;\n  opacity: ${({isLoading}) => (isLoading ? '0.7' : '0')};\n  transition: opacity 150ms linear;\n  transition-delay: 300ms;\n`;\n","import {Colors} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const SessionSettingsBar = styled.div`\n  color: white;\n  display: flex;\n  position: relative;\n  border-bottom: 1px solid ${Colors.Gray200};\n  background: ${Colors.White};\n  align-items: center;\n  height: 47px;\n  padding: 8px 10px;\n`;\n","import {\n  Box,\n  Button,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {ShortcutHandler} from '../app/ShortcutHandler';\nimport {RunTag, TagAction} from '../runs/RunTag';\n\ninterface ITagEditorProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  open: boolean;\n  onChange: (tags: PipelineRunTag[]) => void;\n  onRequestClose: () => void;\n}\n\ninterface ITagContainerProps {\n  tagsFromDefinition?: PipelineRunTag[];\n  tagsFromSession: PipelineRunTag[];\n  onRequestEdit: () => void;\n  actions?: TagAction[];\n}\n\nexport const TagEditor: React.FC<ITagEditorProps> = ({\n  tagsFromDefinition = [],\n  tagsFromSession = [],\n  open,\n  onChange,\n  onRequestClose,\n}) => {\n  const [editState, setEditState] = React.useState(() =>\n    tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}],\n  );\n\n  // Reset the edit state when you close and re-open the modal, or when\n  // tagsFromSession change while the modal is closed.\n  React.useEffect(() => {\n    if (!open) {\n      setEditState(tagsFromSession.length ? tagsFromSession : [{key: '', value: ''}]);\n    }\n  }, [tagsFromSession, open]);\n\n  const toSave: PipelineRunTag[] = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => tag.key && tag.value);\n  const toError = editState\n    .map((tag: PipelineRunTag) => ({\n      key: tag.key.trim(),\n      value: tag.value.trim(),\n    }))\n    .filter((tag) => !tag.key !== !tag.value);\n\n  const onSave = () => {\n    if (!toError.length) {\n      onChange(toSave);\n      onRequestClose();\n    }\n  };\n\n  const disabled = editState === tagsFromSession || !!toError.length;\n\n  const onTagEdit = (key: string, value: string, idx: number) => {\n    setEditState((current) => [...current.slice(0, idx), {key, value}, ...current.slice(idx + 1)]);\n  };\n\n  const onRemove = (idx: number) => {\n    setEditState((current) => {\n      if (idx === 0 && current.length === 1) {\n        // If we're deleting the only item, just wipe it out.\n        return [{key: '', value: ''}];\n      }\n      return [...current.slice(0, idx), ...current.slice(idx + 1)];\n    });\n  };\n\n  const addTagEntry = () => {\n    setEditState((current) => [...current, {key: '', value: ''}]);\n  };\n\n  return (\n    <Dialog\n      icon=\"info\"\n      onClose={onRequestClose}\n      style={{minWidth: 700}}\n      title=\"Add tags to run\"\n      isOpen={open}\n    >\n      <DialogBody>\n        <Group spacing={16} direction=\"column\">\n          {tagsFromDefinition.length ? (\n            <Group direction=\"column\" spacing={8}>\n              <Box margin={{left: 2}} style={{fontSize: '13px', fontWeight: 500}}>\n                Tags from definition:\n              </Box>\n              <TagList>\n                {tagsFromDefinition.map((tag, idx) => {\n                  const {key} = tag;\n                  const anyOverride = editState.some((editable) => editable.key === key);\n                  if (anyOverride) {\n                    return (\n                      <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                        <span style={{opacity: 0.2}}>\n                          <RunTag tag={tag} key={idx} />\n                        </span>\n                      </Tooltip>\n                    );\n                  }\n                  return <RunTag tag={tag} key={key} />;\n                })}\n              </TagList>\n            </Group>\n          ) : null}\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>Custom tags:</div>\n            <Box flex={{direction: 'column', gap: 8}}>\n              {editState.map((tag, idx) => {\n                const {key, value} = tag;\n                return (\n                  <div\n                    key={idx}\n                    style={{\n                      display: 'flex',\n                      flexDirection: 'row',\n                      gap: 8,\n                    }}\n                  >\n                    <TextInput\n                      placeholder=\"Tag Key\"\n                      value={key}\n                      onChange={(e) => onTagEdit(e.target.value, value, idx)}\n                    />\n                    <TextInput\n                      placeholder=\"Tag Value\"\n                      value={value}\n                      onChange={(e) => onTagEdit(key, e.target.value, idx)}\n                    />\n                    <Button\n                      disabled={editState.length === 1 && !key.trim() && !value.trim()}\n                      onClick={() => onRemove(idx)}\n                      icon={<Icon name=\"delete\" />}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                );\n              })}\n            </Box>\n            <Box margin={{left: 2}} flex={{direction: 'row'}}>\n              <Button onClick={addTagEntry} icon={<Icon name=\"add_circle\" />}>\n                Add custom tag\n              </Button>\n            </Box>\n          </Box>\n        </Group>\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onRequestClose}>Cancel</Button>\n        <ShortcutHandler\n          shortcutLabel=\"⌥Enter\"\n          shortcutFilter={(e) => e.code === 'Enter' && e.altKey}\n          onShortcut={onSave}\n        >\n          <Button intent=\"primary\" onClick={onSave} disabled={disabled}>\n            Apply\n          </Button>\n        </ShortcutHandler>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const TagContainer = ({\n  tagsFromSession,\n  tagsFromDefinition,\n  actions,\n}: ITagContainerProps) => {\n  return (\n    <Container>\n      <TagList>\n        {tagsFromDefinition\n          ? tagsFromDefinition.map((tag, idx) => {\n              const {key} = tag;\n              const anyOverride = tagsFromSession.some((sessionTag) => sessionTag.key === key);\n              if (anyOverride) {\n                return (\n                  <Tooltip key={key} content=\"Overriden by custom tag value\" placement=\"top\">\n                    <span style={{opacity: 0.2}}>\n                      <RunTag tag={tag} key={idx} actions={actions} />\n                    </span>\n                  </Tooltip>\n                );\n              }\n              return <RunTag tag={tag} key={idx} actions={actions} />;\n            })\n          : undefined}\n        {tagsFromSession.map((tag, idx) => (\n          <RunTag tag={tag} key={idx} actions={actions} />\n        ))}\n      </TagList>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TagList = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n  gap: 4px;\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Mono,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {invalidatePartitions} from '../assets/PartitionSubscribers';\nimport {testId} from '../testing/testId';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  AddDynamicPartitionMutation,\n  AddDynamicPartitionMutationVariables,\n} from './types/CreatePartitionDialog.types';\n\n// Keep in sync with the backend which currently has 2 definitions:\n// INVALID_PARTITION_SUBSTRINGS and INVALID_STATIC_PARTITIONS_KEY_CHARACTERS\n// https://github.com/dagster-io/dagster/blob/b32508036370678ad0bbc0f117f138fa29b0c33d/python_modules/dagster/dagster/_core/definitions/multi_dimensional_partitions.py#L39\n// https://github.com/dagster-io/dagster/blob/b32508036370678ad0bbc0f117f138fa29b0c33d/python_modules/dagster/dagster/_core/definitions/partition.py#L92\nconst INVALID_PARITION_SUBSTRINGS = [\n  '...',\n  '\\x07', // bell or \\a on the backend.\n  '\\b',\n  '\\f',\n  '\\n',\n  '\\r',\n  '\\t',\n  '\\v',\n  '\\0',\n  '|',\n  ',',\n  '[',\n  ']',\n  ' ',\n];\n\nconst INVALID_PARTITION_SUBSTRINGS_READABLE = [\n  '...',\n  '\\\\a',\n  '\\\\b',\n  '\\\\f',\n  '\\\\n',\n  '\\\\r',\n  '\\\\t',\n  '\\\\v',\n  '\\\\0',\n  '|',\n  '\",\"',\n  '[',\n  ']',\n  '\" \"',\n];\n\nexport const CreatePartitionDialog = ({\n  isOpen,\n  partitionDefinitionName,\n  close,\n  repoAddress,\n  refetch,\n  onCreated,\n}: {\n  isOpen: boolean;\n  partitionDefinitionName?: string | null;\n  close: () => void;\n  repoAddress: RepoAddress;\n  refetch?: () => Promise<void>;\n  onCreated: (partitionName: string) => void;\n}) => {\n  const [partitionName, setPartitionName] = React.useState('');\n\n  const [createPartition] = useMutation<\n    AddDynamicPartitionMutation,\n    AddDynamicPartitionMutationVariables\n  >(CREATE_PARTITION_MUTATION);\n\n  const [isSaving, setIsSaving] = React.useState(false);\n\n  const isValidPartitionName = React.useMemo(() => {\n    return (\n      partitionName.length === 0 ||\n      !INVALID_PARITION_SUBSTRINGS.some((s) => partitionName.includes(s))\n    );\n  }, [partitionName]);\n\n  const error = isValidPartitionName ? null : (\n    <span data-testid={testId('warning-icon')}>\n      <Tooltip\n        content={\n          <div>\n            The following substrings are not allowed:{' '}\n            <Mono>[{INVALID_PARTITION_SUBSTRINGS_READABLE.join(',')}]</Mono>\n          </div>\n        }\n        placement=\"top\"\n      >\n        <Icon name=\"warning\" />\n      </Tooltip>\n    </span>\n  );\n\n  const handleSave = async () => {\n    if (!isValidPartitionName) {\n      return;\n    }\n    setIsSaving(true);\n    const result = await createPartition({\n      variables: {\n        repositorySelector: repoAddressToSelector(repoAddress),\n        partitionsDefName: partitionDefinitionName || '',\n        partitionKey: partitionName,\n      },\n\n      // Add any queries that reference asset partitions here so that they update if they're currently rendered.\n      refetchQueries: ['PartitionHealthQuery', 'AssetEventsQuery'],\n    });\n    setIsSaving(false);\n\n    const data = result.data?.addDynamicPartition;\n    switch (data?.__typename) {\n      case 'PythonError': {\n        showCustomAlert({\n          title: 'Could not create environment variable',\n          body: <PythonErrorInfo error={data} />,\n        });\n        break;\n      }\n      case 'DuplicateDynamicPartitionError': {\n        showCustomAlert({\n          title: 'Could not add partition',\n          body: 'A partition this name already exists.',\n        });\n        break;\n      }\n      case 'UnauthorizedError': {\n        showCustomAlert({\n          title: 'Could not add partition',\n          body: data.message ?? 'You do not have permission to do this.',\n        });\n        break;\n      }\n      case 'AddDynamicPartitionSuccess': {\n        refetch?.();\n        onCreated(partitionName);\n        close();\n        invalidatePartitions();\n        break;\n      }\n      default: {\n        showCustomAlert({\n          title: 'Could not add partition',\n          body: 'An unknown error occurred.',\n        });\n        break;\n      }\n    }\n  };\n  return (\n    <Dialog\n      isOpen={isOpen}\n      canEscapeKeyClose\n      canOutsideClickClose\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Icon name=\"add_circle\" size={24} />\n          <div>\n            Add a partition\n            {partitionDefinitionName ? (\n              <>\n                {' '}\n                for <Mono>{partitionDefinitionName}</Mono>\n              </>\n            ) : (\n              ''\n            )}\n          </div>\n        </Box>\n      }\n    >\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 6}}>\n          <div>Partition name</div>\n          <PartitionBox>\n            <TextInput\n              data-testid={testId('partition-input')}\n              rightElement={error ?? (isSaving ? <Spinner purpose=\"body-text\" /> : undefined)}\n              disabled={isSaving}\n              placeholder=\"name\"\n              value={partitionName}\n              onChange={(e) => setPartitionName(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.code === 'Enter') {\n                  handleSave();\n                }\n              }}\n              strokeColor={isValidPartitionName ? undefined : Colors.Red500}\n              ref={React.useCallback((inputElement: HTMLInputElement) => {\n                if (inputElement) {\n                  inputElement.focus();\n                }\n              }, [])}\n            />\n          </PartitionBox>\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={close}>Cancel</Button>\n        <Button\n          intent=\"primary\"\n          onClick={handleSave}\n          disabled={!isValidPartitionName}\n          data-testid={testId('save-partition-button')}\n        >\n          Save\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const CREATE_PARTITION_MUTATION = gql`\n  mutation AddDynamicPartitionMutation(\n    $partitionsDefName: String!\n    $partitionKey: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    addDynamicPartition(\n      partitionsDefName: $partitionsDefName\n      partitionKey: $partitionKey\n      repositorySelector: $repositorySelector\n    ) {\n      __typename\n      ... on AddDynamicPartitionSuccess {\n        partitionsDefName\n        partitionKey\n      }\n      ... on PythonError {\n        message\n        stack\n      }\n      ... on UnauthorizedError {\n        message\n      }\n    }\n  }\n`;\n\nconst PartitionBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 8;\n  align-items: center;\n  > *:first-child {\n    flex-grow: 1;\n  }\n`;\n","import React from 'react';\nimport {List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Checkbox} from './Checkbox';\nimport {Colors} from './Colors';\nimport {Icon} from './Icon';\nimport {MenuItem, Menu} from './Menu';\nimport {Popover} from './Popover';\nimport {Tag} from './Tag';\nimport {TextInput, TextInputStyles} from './TextInput';\nimport {useViewport} from './useViewport';\n\nexport type TagSelectorTagProps = {\n  remove: (ev: React.SyntheticEvent<HTMLDivElement>) => void;\n};\nexport type TagSelectorDropdownItemProps = {\n  toggle: () => void;\n  selected: boolean;\n};\nexport type TagSelectorDropdownProps = {\n  width: string;\n  allTags: string[];\n};\ntype Props = {\n  placeholder?: React.ReactNode;\n  allTags: string[];\n  selectedTags: string[];\n  setSelectedTags: (tags: string[]) => void;\n  renderTag?: (tag: string, tagProps: TagSelectorTagProps) => React.ReactNode;\n  renderTagList?: (tags: React.ReactNode[]) => React.ReactNode;\n  renderDropdown?: (\n    dropdown: React.ReactNode,\n    dropdownProps: TagSelectorDropdownProps,\n  ) => React.ReactNode;\n  renderDropdownItem?: (\n    tag: string,\n    dropdownItemProps: TagSelectorDropdownItemProps,\n  ) => React.ReactNode;\n  dropdownStyles?: React.CSSProperties;\n  rowWidth?: number;\n  rowHeight?: number;\n};\n\nconst defaultRenderTag = (tag: string, tagProps: TagSelectorTagProps) => {\n  return (\n    <Tag key={tag}>\n      <Box flex={{direction: 'row', gap: 4, justifyContent: 'space-between', alignItems: 'center'}}>\n        <span>{tag}</span>\n        <Box style={{cursor: 'pointer'}} onClick={tagProps.remove}>\n          <Icon name=\"close\" />\n        </Box>\n      </Box>\n    </Tag>\n  );\n};\n\nconst defaultRenderDropdownItem = (\n  tag: string,\n  dropdownItemProps: TagSelectorDropdownItemProps,\n) => {\n  return (\n    <label>\n      <MenuItem\n        text={\n          <Box flex={{alignItems: 'center', gap: 8}}>\n            <Checkbox checked={dropdownItemProps.selected} onChange={dropdownItemProps.toggle} />\n            <span>{tag}</span>\n          </Box>\n        }\n        tagName=\"div\"\n      />\n    </label>\n  );\n};\n\nconst MENU_ITEM_HEIGHT = 32;\n\nexport const TagSelector = ({\n  allTags,\n  placeholder,\n  selectedTags,\n  setSelectedTags,\n  renderTag,\n  renderDropdownItem,\n  renderDropdown,\n  dropdownStyles,\n  renderTagList,\n  rowHeight = MENU_ITEM_HEIGHT,\n}: Props) => {\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const {viewport, containerProps} = useViewport();\n\n  const dropdown = React.useMemo(() => {\n    const dropdownContent = (\n      <Box\n        style={{\n          maxHeight: '500px',\n          overflowY: 'auto',\n          ...dropdownStyles,\n        }}\n      >\n        <List\n          style={{outline: 'none', marginRight: -5, paddingRight: 5}}\n          rowCount={allTags.length}\n          rowHeight={rowHeight}\n          rowRenderer={(a) => {\n            const tag = allTags[a.index]!;\n            const selected = selectedTags.includes(tag);\n            const toggle = () => {\n              setSelectedTags(\n                selected ? selectedTags.filter((t) => t !== tag) : [...selectedTags, tag],\n              );\n            };\n            if (renderDropdownItem) {\n              return <div key={tag}>{renderDropdownItem(tag, {toggle, selected})}</div>;\n            }\n            return defaultRenderDropdownItem(tag, {toggle, selected});\n          }}\n          width={viewport.width}\n          height={Math.min(allTags.length * rowHeight, rowHeight * 7.5)}\n        />\n      </Box>\n    );\n    if (renderDropdown) {\n      return renderDropdown(dropdownContent, {width: viewport.width + 'px', allTags});\n    }\n    return <Menu style={{width: viewport.width + 'px'}}>{dropdownContent}</Menu>;\n  }, [\n    allTags,\n    dropdownStyles,\n    renderDropdown,\n    renderDropdownItem,\n    rowHeight,\n    selectedTags,\n    setSelectedTags,\n    viewport.width,\n  ]);\n\n  const dropdownContainer = React.useRef<HTMLDivElement>(null);\n\n  const tagsContent = React.useMemo(() => {\n    if (selectedTags.length === 0) {\n      return <Placeholder>{placeholder || 'Select tags'}</Placeholder>;\n    }\n    const tags = selectedTags.map((tag) =>\n      (renderTag || defaultRenderTag)(tag, {\n        remove: (ev) => {\n          setSelectedTags(selectedTags.filter((t) => t !== tag));\n          ev.stopPropagation();\n        },\n      }),\n    );\n    if (renderTagList) {\n      return renderTagList(tags);\n    }\n    return tags;\n  }, [selectedTags, renderTagList, placeholder, renderTag, setSelectedTags]);\n\n  return (\n    <Popover\n      placement=\"bottom-start\"\n      isOpen={isDropdownOpen}\n      onInteraction={(nextOpenState, e) => {\n        const target = e?.target;\n        if (isDropdownOpen && target instanceof HTMLElement) {\n          const isClickInside = dropdownContainer.current?.contains(target);\n          if (!isClickInside) {\n            setIsDropdownOpen(nextOpenState);\n          }\n        }\n      }}\n      content={<div ref={dropdownContainer}>{dropdown}</div>}\n      targetTagName=\"div\"\n    >\n      <Container\n        onClick={() => {\n          setIsDropdownOpen((isOpen) => !isOpen);\n        }}\n        {...containerProps}\n      >\n        <TagsContainer flex={{grow: 1, gap: 6}}>{tagsContent}</TagsContainer>\n        <div style={{cursor: 'pointer'}}>\n          <Icon name={isDropdownOpen ? 'expand_less' : 'expand_more'} />\n        </div>\n      </Container>\n    </Popover>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  ${TextInputStyles}\n`;\n\nconst Placeholder = styled.div`\n  color: ${Colors.Gray400};\n`;\n\nconst TagsContainer = styled(Box)`\n  overflow-x: auto;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  scrollbar-width: none;\n  -ms-overflow-style: none;\n`;\n\nexport const TagSelectorWithSearch = (\n  props: Props & {\n    searchPlaceholder?: string;\n  },\n) => {\n  const [search, setSearch] = React.useState('');\n  const {\n    allTags,\n    selectedTags,\n    setSelectedTags,\n    rowHeight,\n    renderDropdown,\n    searchPlaceholder,\n    ...rest\n  } = props;\n  const filteredTags = React.useMemo(() => {\n    if (search.trim() === '') {\n      return allTags;\n    }\n    return allTags.filter((tag) => tag.toLowerCase().includes(search.toLowerCase()));\n  }, [allTags, search]);\n  return (\n    <TagSelector\n      {...rest}\n      allTags={filteredTags}\n      selectedTags={selectedTags}\n      setSelectedTags={setSelectedTags}\n      dropdownStyles={{width: 'auto'}}\n      renderDropdown={React.useCallback(\n        (dropdownContent: React.ReactNode, dropdownProps: TagSelectorDropdownProps) => {\n          return (\n            <Menu style={{width: 'auto'}}>\n              <Box flex={{direction: 'column'}}>\n                <Box flex={{direction: 'column', grow: 1}} padding={{horizontal: 8}}>\n                  <TextInput\n                    value={search}\n                    onChange={(e) => setSearch(e.target.value)}\n                    placeholder={searchPlaceholder || 'Search'}\n                    ref={(input) => {\n                      if (input) {\n                        input.focus();\n                      }\n                    }}\n                  />\n                </Box>\n                {renderDropdown ? renderDropdown(dropdownContent, dropdownProps) : dropdownContent}\n              </Box>\n            </Menu>\n          );\n        },\n        [renderDropdown, search, searchPlaceholder],\n      )}\n    />\n  );\n};\n","import {Icon, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {testId} from '../testing/testId';\nimport {ClearButton} from '../ui/ClearButton';\n\nimport {partitionsToText, spanTextToSelections} from './SpanRepresentation';\n\nexport const DimensionRangeInput: React.FC<{\n  value: string[];\n  onChange: (partitionNames: string[]) => void;\n  partitionKeys: string[];\n  isTimeseries: boolean;\n}> = ({value, onChange, partitionKeys, isTimeseries}) => {\n  const [valueString, setValueString] = React.useState('');\n  const partitionNameJSON = React.useMemo(() => JSON.stringify(partitionKeys), [partitionKeys]);\n\n  React.useEffect(() => {\n    const partitionNameArr = JSON.parse(partitionNameJSON);\n    setValueString(isTimeseries ? partitionsToText(value, partitionNameArr) : value.join(', '));\n  }, [value, partitionNameJSON, isTimeseries]);\n\n  const placeholder = React.useMemo(() => {\n    return partitionKeys.length === 0\n      ? 'Loading partition keys...'\n      : placeholderForPartitions(partitionKeys, isTimeseries);\n  }, [partitionKeys, isTimeseries]);\n\n  const tryCommit = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    try {\n      onChange(spanTextToSelections(partitionKeys, valueString).selectedKeys);\n    } catch (err: any) {\n      e.preventDefault();\n      showCustomAlert({body: err.message});\n    }\n  };\n\n  const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      tryCommit(e);\n    }\n  };\n\n  return (\n    <TextInput\n      data-testid={testId('dimension-range-input')}\n      placeholder={placeholder}\n      value={valueString}\n      style={{display: 'flex', width: '100%', flex: 1, flexGrow: 1}}\n      onChange={(e) => setValueString(e.currentTarget.value)}\n      onKeyDown={onKeyDown}\n      onBlur={tryCommit}\n      rightElement={\n        <ClearButton\n          style={{display: valueString.length ? 'initial' : 'none'}}\n          onClick={() => onChange([])}\n        >\n          <Icon name=\"cancel\" />\n        </ClearButton>\n      }\n    />\n  );\n};\n\nfunction placeholderForPartitions(names: string[], isTimeseries: boolean) {\n  if (names.length === 0) {\n    return '';\n  }\n  if (names.length < 4 || !isTimeseries) {\n    return `ex: ${names[0]}, ${names[1]}`;\n  }\n  return `ex: ${names[0]}, ${names[1]}, [${names[2]}...${names[names.length - 1]}]`;\n}\n","import {\n  Box,\n  Button,\n  Checkbox,\n  Colors,\n  TagSelectorDropdownProps,\n  Icon,\n  Menu,\n  MenuDivider,\n  MenuItem,\n  TagSelectorWithSearch,\n  TagSelectorDropdownItemProps,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {AssetPartitionStatusDot} from '../assets/AssetPartitionList';\nimport {partitionStatusAtIndex} from '../assets/usePartitionHealthData';\nimport {PartitionDefinitionType} from '../graphql/types';\nimport {RunStatusDot} from '../runs/RunStatusDots';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\nimport {CreatePartitionDialog} from './CreatePartitionDialog';\nimport {DimensionRangeInput} from './DimensionRangeInput';\nimport {PartitionStatusHealthSource, PartitionStatus} from './PartitionStatus';\n\nexport const DimensionRangeWizard: React.FC<{\n  selected: string[];\n  setSelected: (selected: string[]) => void;\n  partitionKeys: string[];\n  health: PartitionStatusHealthSource;\n  dimensionType: PartitionDefinitionType;\n  partitionDefinitionName?: string | null;\n  repoAddress?: RepoAddress;\n  refetch?: () => Promise<void>;\n}> = ({\n  selected,\n  setSelected,\n  partitionKeys,\n  health,\n  dimensionType,\n  partitionDefinitionName,\n  repoAddress,\n  refetch,\n}) => {\n  const isTimeseries = dimensionType === PartitionDefinitionType.TIME_WINDOW;\n  const isDynamic = dimensionType === PartitionDefinitionType.DYNAMIC;\n\n  const [showCreatePartition, setShowCreatePartition] = React.useState(false);\n\n  return (\n    <>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 8}} padding={{vertical: 4}}>\n        <Box flex={{direction: 'column'}} style={{flex: 1}}>\n          {isTimeseries ? (\n            <DimensionRangeInput\n              value={selected}\n              partitionKeys={partitionKeys}\n              onChange={setSelected}\n              isTimeseries={isTimeseries}\n            />\n          ) : (\n            <OrdinalPartitionSelector\n              allPartitions={partitionKeys}\n              selectedPartitions={selected}\n              setSelectedPartitions={setSelected}\n              health={health}\n              setShowCreatePartition={setShowCreatePartition}\n              isDynamic={isDynamic}\n            />\n          )}\n        </Box>\n        {isTimeseries && (\n          <Button\n            small={true}\n            onClick={() => setSelected(partitionKeys.slice(-1))}\n            data-testid={testId('latest-partition-button')}\n          >\n            Latest\n          </Button>\n        )}\n        <Button small={true} onClick={() => setSelected(partitionKeys)}>\n          All\n        </Button>\n      </Box>\n      <Box margin={{bottom: 8}}>\n        {isDynamic && (\n          <LinkText\n            flex={{direction: 'row', alignItems: 'center', gap: 8}}\n            onClick={() => {\n              setShowCreatePartition(true);\n            }}\n          >\n            <StyledIcon name=\"add\" size={24} />\n            <div>Add a partition</div>\n          </LinkText>\n        )}\n        {isTimeseries && (\n          <PartitionStatus\n            partitionNames={partitionKeys}\n            health={health}\n            splitPartitions={!isTimeseries}\n            selected={selected}\n            onSelect={setSelected}\n          />\n        )}\n      </Box>\n      {repoAddress && (\n        <CreatePartitionDialog\n          key={showCreatePartition ? '1' : '0'}\n          isOpen={showCreatePartition}\n          partitionDefinitionName={partitionDefinitionName}\n          repoAddress={repoAddress}\n          close={() => {\n            setShowCreatePartition(false);\n          }}\n          refetch={refetch}\n          onCreated={(partitionName) => {\n            setSelected([...selected, partitionName]);\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nconst OrdinalPartitionSelector: React.FC<{\n  allPartitions: string[];\n  selectedPartitions: string[];\n  setSelectedPartitions: (tags: string[]) => void;\n  health: PartitionStatusHealthSource;\n  setShowCreatePartition: (show: boolean) => void;\n  isDynamic: boolean;\n}> = ({\n  allPartitions,\n  selectedPartitions,\n  setSelectedPartitions,\n  setShowCreatePartition,\n  isDynamic,\n  health,\n}) => {\n  const dotForPartitionKey = React.useCallback(\n    (partitionKey: string) => {\n      const index = allPartitions.indexOf(partitionKey);\n      if ('ranges' in health) {\n        return <AssetPartitionStatusDot status={partitionStatusAtIndex(health.ranges, index)} />;\n      } else {\n        return (\n          <RunStatusDot size={10} status={health.runStatusForPartitionKey(partitionKey, index)} />\n        );\n      }\n    },\n    [allPartitions, health],\n  );\n\n  return (\n    <>\n      <TagSelectorWithSearch\n        allTags={allPartitions}\n        selectedTags={selectedPartitions}\n        setSelectedTags={setSelectedPartitions}\n        placeholder=\"Select a partition or create one\"\n        renderDropdownItem={React.useCallback(\n          (tag: string, dropdownItemProps: TagSelectorDropdownItemProps) => {\n            return (\n              <label>\n                <MenuItem\n                  tagName=\"div\"\n                  text={\n                    <Box flex={{alignItems: 'center', gap: 12}}>\n                      <Checkbox\n                        checked={dropdownItemProps.selected}\n                        onChange={dropdownItemProps.toggle}\n                      />\n                      {dotForPartitionKey(tag)}\n                      <span>{tag}</span>\n                    </Box>\n                  }\n                />\n              </label>\n            );\n          },\n          [dotForPartitionKey],\n        )}\n        renderDropdown={React.useCallback(\n          (dropdown: React.ReactNode, {width, allTags}: TagSelectorDropdownProps) => {\n            const isAllSelected = allTags.every((t) => selectedPartitions.includes(t));\n            return (\n              <Menu style={{width}}>\n                <Box padding={4}>\n                  {isDynamic && (\n                    <>\n                      <Box flex={{direction: 'column'}}>\n                        <MenuItem\n                          tagName=\"div\"\n                          text={\n                            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                              <StyledIcon name=\"add\" size={24} />\n                              <span>Add partition</span>\n                            </Box>\n                          }\n                          onClick={() => {\n                            setShowCreatePartition(true);\n                          }}\n                        />\n                      </Box>\n                      <MenuDivider />\n                    </>\n                  )}\n                  {allTags.length ? (\n                    <>\n                      <label>\n                        <MenuItem\n                          tagName=\"div\"\n                          text={\n                            <Box flex={{alignItems: 'center', gap: 12}}>\n                              <Checkbox\n                                checked={isAllSelected}\n                                onChange={() => {\n                                  if (isAllSelected) {\n                                    setSelectedPartitions([]);\n                                  } else {\n                                    setSelectedPartitions(allTags);\n                                  }\n                                }}\n                              />\n                              <span>Select all ({allTags.length})</span>\n                            </Box>\n                          }\n                        />\n                      </label>\n                      {dropdown}\n                    </>\n                  ) : (\n                    <div style={{padding: '6px 6px 0px 6px', color: Colors.Gray700}}>\n                      No matching partitions found\n                    </div>\n                  )}\n                </Box>\n              </Menu>\n            );\n          },\n          [isDynamic, selectedPartitions, setSelectedPartitions, setShowCreatePartition],\n        )}\n        renderTagList={(tags) => {\n          if (tags.length > 4) {\n            return <span>{tags.length} partitions selected</span>;\n          }\n          return tags;\n        }}\n        searchPlaceholder=\"Filter partitions\"\n      />\n    </>\n  );\n};\n\nconst StyledIcon = styled(Icon)`\n  font-weight: 500;\n`;\n\nconst LinkText = styled(Box)`\n  color: ${Colors.Link};\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n  }\n  > * {\n    height: 24px;\n    align-content: center;\n    line-height: 24px;\n  }\n`;\n","import {NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  isGraph: boolean;\n  repoAddress?: RepoAddress;\n  result:\n    | {\n        __typename: 'PipelineSnapshotNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PipelineNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'RepositoryNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PythonError';\n        message: string;\n      };\n}\n\nexport const NonIdealPipelineQueryResult: React.FC<Props> = ({isGraph, repoAddress, result}) => {\n  if (result.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph snapshot not found' : 'Pipeline snapshot not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph not found' : 'Pipeline not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'RepositoryNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={`${repoAddress ? repoAddressAsHumanString(repoAddress) : 'Definitions'} not found`}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PythonError') {\n    return <NonIdealState icon=\"error\" title=\"Query error\" description={result.message} />;\n  }\n  return <span />;\n};\n","import * as React from 'react';\n\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nimport {ExplorerPath} from './PipelinePathUtils';\n\nexport const useJobTitle = (explorerPath: ExplorerPath, isJob: boolean) => {\n  const {pipelineName} = explorerPath;\n\n  const value = React.useMemo(() => {\n    if (isJob) {\n      return `Job: ${pipelineName}`;\n    }\n    return `Pipeline: ${pipelineName}`;\n  }, [isJob, pipelineName]);\n\n  useDocumentTitle(value);\n};\n","import {Colors, IconWrapper} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const ClearButton = styled.button`\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  margin: 0 -2px 0 0;\n  padding: 2px;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray400};\n    transition: background-color 100ms linear;\n  }\n\n  :hover ${IconWrapper}, :focus ${IconWrapper} {\n    background-color: ${Colors.Gray700};\n  }\n\n  :active ${IconWrapper} {\n    background-color: ${Colors.Dark};\n  }\n\n  :focus {\n    outline: none;\n  }\n`;\n","import {FontFamily} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const Version = styled.div`\n  font-family: ${FontFamily.monospace};\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n"],"names":["AssetEdges","edges","highlighted","strokeWidth","baseColor","Colors","AssetEdgeSet","color","filter","fromId","toId","React","id","btoa","viewBox","refX","refY","markerUnits","markerWidth","orient","d","fill","map","edge","idx","buildSVGPath","source","from","target","to","stroke","markerEnd","AssetGraphJobSidebar","pipelineSelector","queryResult","useQuery","ASSET_GRAPH_JOB_SIDEBAR","partialRefetch","variables","repositoryName","repositoryLocationName","repoAddress","buildRepoAddress","Loading","pipelineSnapshotOrError","__typename","NonIdealPipelineQueryResult","isGraph","result","SidebarContainerOverview","S","container","gql","SIDEBAR_ROOT_CONTAINER_FRAGMENT","PYTHON_ERROR_FRAGMENT","LatestMaterializationMetadata","assetKey","latest","liveData","console","log","latestRun","runOrError","repositoryOrigin","repo","useRepository","Box","padding","top","bottom","NonIdealState","icon","title","description","latestEvent","latestAssetLineage","assetLineage","MetadataTable","runId","timestamp","titleForRun","isHiddenAssetGroupJob","pipelineName","left","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","direction","spacing","alignItems","Icon","name","linkToRunEvent","stepKey","partition","flex","gap","Timestamp","ms","Number","Stale","include","length","AssetLineageElements","elements","metadataEntries","entry","label","MetadataEntry","expandSmallValues","repoLocation","location","styled","Table","AssetSidebarActivitySummary","assetLastMaterializedAt","assetHasDefinedPartitions","isSourceAsset","useRecentAssetEvents","materializations","observations","loadedPartitionKeys","loading","refetch","xAxis","grouped","useGroupedEvents","displayedEvent","vertical","Spinner","purpose","FailedRunSinceMaterializationBanner","run","runWhichFailedToMaterialize","border","side","width","CurrentRunsBanner","freshnessPolicy","margin","horizontal","CurrentMinutesLateTag","freshnessPolicyDescription","style","maxWidth","overflowX","fontSize","collapsedByDefault","AssetEventSystemTags","event","paddingLeft","AssetMaterializationGraphs","asSidebarSection","groups","columnCount","SidebarAssetInfo","graphNode","definition","partitionHealthRefreshHint","healthRefreshHintFromLiveData","partitionHealthData","usePartitionHealthData","data","SIDEBAR_ASSET_QUERY","path","lastMaterialization","asset","assetNodeOrError","Header","assetNode","repository","metadataForAssetNode","assetMetadata","assetType","hasAssetMetadata","assetConfigSchema","configField","configType","OpMetadataPlugin","op","metadata","pluginForMetadata","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","SidebarComponent","Description","partitionDefinition","isSource","borderBottom","nodeDependsOnSelf","DependsOnSelfBanner","opVersion","Version","ConfigTypeSchema","type","typesInScope","recursiveConfigTypes","requiredResources","resource","workspacePathFromAddress","resourceKey","AssetMetadata","TypeSidebarSection","PartitionHealthSummary","DagsterType","displayName","displayNameForAssetKey","right","marginBottom","display","justifyContent","flexWrap","AssetCatalogLink","assetDetailsPathForKey","UnderlyingOpsOrGraph","minimal","Link","SIDEBAR_ASSET_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","METADATA_ENTRY_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","ASSET_FOR_NAVIGATION_QUERY","MINIMAL_SCALE","GROUPS_ONLY_SCALE","AssetGraphExplorer","props","useAssetGraphData","explorerPath","opsQuery","fetchOptions","fetchResult","assetGraphData","graphQueryItems","graphAssetKeys","allAssetKeys","applyingEmptyDefault","useLiveDataForAssetKeys","liveDataByNode","liveDataRefreshState","runWatchers","allowStaleData","graphHasCycles","AssetGraphExplorerWithData","options","setOptions","onChangeExplorerPath","onNavigateToSourceAssetNode","fetchOptionFilters","findAssetLocation","apollo","useApolloClient","key","query","assetOrError","def","opNames","jobName","jobNames","find","groupName","useFindAssetLocation","useAssetLayout","layout","async","viewportEl","setHighlighted","selectedAssetValues","split","selectedGraphNodes","Object","values","nodes","node","includes","tokenForAssetKey","lastSelectedNode","selectedDefinitions","a","allDefinitionsForMaterialize","onSelectNode","e","stopPropagation","token","nodeIsInDisplayedGraph","nextOpsNameSelection","shiftKey","metaKey","tokensToAdd","tokensInRange","opsInRange","graph","existing","without","uniq","join","nextCenter","current","zoomToSVGCoords","bounds","x","y","lastRenderedLayout","setLastRenderedLayout","renderingNewLayout","focus","autocenter","allowGroupsOnlyZoomLevel","keys","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","ErrorBoundary","region","nodeType","undefined","SVGViewport","ref","r","interactor","graphWidth","graphHeight","height","graphHasNoMinimumZoom","onClick","onArrowKeyDown","dir","layoutWithoutExternalLinks","pickBy","nextId","closestNodeInDirection","zoomToSVGBox","onDoubleClick","maxZoom","maxAutocenterZoom","scale","SVGContainer","Math","max","sort","b","group","targetScale","scaleForSVGBounds","AssetGroupNode","JSON","parse","onMouseEnter","onMouseLeave","overflow","AssetNode","selected","Checkbox","format","checked","preferAssetRendering","onChange","position","QueryRefresh","refreshState","dataDescription","LaunchAssetObservationButton","preferredJobName","scope","isObservable","all","LaunchAssetExecutionButton","liveDataForStale","GraphQueryInput","items","value","placeholder","popoverPosition","second","resetErrorOnChange","graphDirectionOf","stack","pop","downstream","n","Boolean","some","push","seen","ledToTarget","repositoryDisambiguationRequired","fontWeight","userSelect","size","workspacePath","GroupRepoName","withMiddleTruncation","buildRepoPathForHuman","maxLength","GroupOutline","inset","background","fontFamily","FontFamily","Remark","remark","use","gfm","toPlainText","markdownCache","LRUCache","markdownToPlaintext","md","cached","get","str","processSync","toString","replace","trim","set","AssetInsetForHoverEffect","AssetTopTags","AssetNodeContainer","$selected","AssetNodeBox","$isSource","Name","marginTop","textOverflow","ASSET_NODE_NAME_MAX_LENGTH","$color","isPartitioned","AssetNodeStatusRow","paddingTop","isEqual","AssetNodeStatusBox","children","borderBottomLeftRadius","borderBottomRightRadius","whiteSpace","lineHeight","buildAssetNodeStatusContent","content","getStepKey","expanded","inProgressRunIds","unstartedRunIds","materializingRunId","late","isAssetLate","SpacerDot","lastObservation","status","AssetPartitionStatus","textAlign","TimestampDisplay","timeFormat","showSeconds","showTimezone","marginRight","numMaterializing","partitionStats","numPartitions","numMaterialized","numFailed","numMissing","StyleForAssetPartitionStatus","foreground","view","rel","Tooltip","humanizedLateString","freshnessInfo","currentMinutesLate","partitionCountString","lastMaterializationLink","endTime","AssetNodeMinimal","MinimalAssetNodeContainer","TooltipStyled","canShow","targetTagName","MinimalAssetNodeBox","$background","$border","MinimalName","ASSET_NODE_LIVE_FRAGMENT","ASSET_NODE_FRAGMENT","AssetNodeShowOnHover","p","marginLeft","AssetLatestRunSpinner","stopped","AssetRunLink","AssetNodeLink","AssetNodeLinkContainer","className","ASSET_LINK_NAME_MAX_LENGTH","ASSET_GRAPH_QUERY","notifyOnNetworkStatusChange","groupSelector","assetNodes","matching","hideNodesMatching","reject","buildGraphQueryItems","filterByQuery","buildGraphData","hideEdgesToNodesOutsideQuery","removeEdgesToHiddenAssets","inputs","dependencyKeys","dependsOn","solid","outputs","dependedByKeys","dependedBy","graphData","allNodes","allNodesById","groupBy","toGraphId","notSourceAsset","upstream","calculateGraphDistances","keyBy","g","start","dfsUpstream","depth","next","flatMap","i","dname","dfsDownstream","SUBSCRIPTION_MAX_POLL_RATE","assetKeys","liveResult","ASSETS_GRAPH_LIVE_QUERY","skip","buildLiveData","fetching","NetworkStatus","networkStatus","timerRef","onRefreshDebounced","setTimeout","fire","clearTimeout","useQueryRefreshAtInterval","useDidLaunchEvent","assetKeyTokens","Set","assetStepKeys","runInProgressId","slice","RunLogObserver","callback","counter","useSubscription","ASSET_LIVE_RUN_LOGS_SUBSCRIPTION","fetchPolicy","onSubscriptionData","logs","subscriptionData","pipelineRunLogs","messages","m","has","ASSET_LATEST_INFO_FRAGMENT","CONFIG_TYPE_SCHEMA_FRAGMENT","MULTIPLE_DEFINITIONS_WARNING","ASSET_DEFINITION_COLLISION_QUERY","collision","assetNodeDefinitionCollisions","allReposWithAsset","repositories","repoAddressAsHumanString","intent","underline","showCustomAlert","body","addr","AssetEventList","focused","setFocused","parentRef","focusedRowRef","rowVirtualizer","useVirtualizer","count","getScrollElement","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","el","HTMLElement","scrollIntoView","block","AssetListContainer","$totalHeight","index","AssetListRow","$height","$start","$focused","closest","AssetEventListPartitionRow","AssetEventListEventRow","Container","Row","ORDER","DagsterTag","collapsible","useStateWithStorage","shown","setShown","tags","transform","AssetEventSystemTagsTable","indexOf","t","AssetLineageInfoElement","lineage_info","partition_list_label","partitions","partition_list_str","asOf","modifiers","offset","enabled","placement","reduce","accum","curr","ii","collapsed","setCollapsed","info","ASSET_LINEAGE_FRAGMENT","xHover","setXHover","reversed","reverse","graphDataByMetadataLabel","extractNumericData","graphLabels","gridTemplateColumns","repeat","onHoverX","shrinkable","action","href","datapoints","series","numericMetadataLabels","k","append","minX","maxX","minY","maxY","existingForPartition","v","isNaN","xNumeric","l","NaN","intValue","parseInt","intRepr","floatValue","serie","xs","ys","minXNumeric","min","maxXNumeric","AssetMetadataTable","rows","DAGSTER_TYPE_FRAGMENT","adjective","toLocaleString","countMissing","PartitionCountTags","PartitionCountTag","total","PartitionCountContainer","PartitionCountLabels","PartitionCountLabel","AssetPartitionList","focusedDimensionKey","setFocusedDimensionKey","statusForPartition","getItemKey","scrollToIndex","smoothScroll","align","tabIndex","onKeyDown","shift","ArrowDown","ArrowUp","isDefaultPrevented","nextIdx","preventDefault","dimensionKey","state","AssetPartitionStatusDot","borderRadius","flexShrink","assetPartitionStatusesToStyle","dayjs","duration","relativeTime","minLate","humanize","policyOnHover","cronSchedule","maximumLagMinutes","cronScheduleTimezone","cronDesc","humanCronString","lagDesc","RadioContainer","IconWrapper","RunningBackfillsNotice","partitionSetName","RUNNING_BACKFILLS_NOTICE_QUERY","runningBackfillCount","partitionBackfillsOrError","results","LaunchAssetChoosePartitionsDialog","assets","Dialog","isOpen","open","canEscapeKeyClose","canOutsideClickClose","onClose","setOpen","LaunchAssetChoosePartitionsDialogBody","upstreamAssetKeys","_refetch","partitionedAssets","usePermissionsForLocation","permissions","canLaunchPipelineExecution","canLaunchPartitionBackfill","disabledReasons","launching","setLaunching","tagEditorOpen","setTagEditorOpen","setTags","previewCount","setPreviewCount","morePreviewsCount","Date","now","lastRefresh","setLastRefresh","assetHealth","assetHealthLoading","displayedHealth","mergedAssetHealth","itemWithAssetKey","anchorAssetKey","displayedBaseAsset","displayedPartitionDefinition","knownDimensions","dimensionTypes","missingFailedOnly","setMissingFailedOnly","usePartitionDimensionSelections","knownDimensionNames","modifyQueryString","skipPartitionKeyValidation","PartitionDefinitionType","shouldReadPartitionQueryStringParam","selections","setSelections","keysInSelection","explodePartitionKeysInSelection","dimensionKeys","states","stateForKey","Array","launchWithRangesAsTags","setLaunchWithRangesAsTags","canLaunchWithRangesAsTags","every","s","selectedRanges","selectedKeys","keysFiltered","client","history","useHistory","launchWithTelemetry","useLaunchWithTelemetry","useLaunchPadHooks","launchAsBackfill","onLaunch","onLaunchAsBackfill","onLaunchAsSingleRun","CONFIG_PARTITION_SELECTION_QUERY","repositorySelector","partitionName","partitionKey","tagAndConfigData","partitionSetOrError","tagsOrError","PythonErrorInfo","error","runConfigOrError","runConfigData","yaml","allTags","startsWith","executionParams","executionParamsForAssetJob","mode","selectorIfJobPage","mutate","mutation","LAUNCH_PARTITION_BACKFILL_MUTATION","backfillParams","selector","assetSelection","partitionNames","fromFailure","launchBackfillData","launchPartitionBackfill","showBackfillSuccessToast","backfillId","showBackfillErrorToast","testId","Warnings","ToggleableSection","isInitiallyOpen","range","as","Subheading","dimension","DimensionRangeWizard","partitionKeys","health","ranges","rangesForSingleDimension","dimensionType","setSelected","partitionDefinitionName","dynamicPartitionsDefinitionName","Alert","TagEditor","tagsFromSession","onRequestClose","onRequestEdit","actions","tag","Button","disabled","overflowY","maxHeight","showAssetKey","partitionDefinitionsEqual","ButtonLink","topBorder","UpstreamUnavailableWarning","upstreamAssetHealth","upstreamUnavailable","singleDimensionKey","dimensions","upstreamUnavailableSpans","assembleIntoSpans","span","stringForSpan","Error","LAUNCH_ASSET_CHOOSE_PARTITIONS_QUERY","DAEMON_NOT_RUNNING_ALERT_INSTANCE_FRAGMENT","USING_DEFAULT_LAUNCH_ERALERT_INSTANCE_FRAGMENT","instance","alerts","DaemonNotRunningAlert","UsingDefaultLauncherAlert","setIsOpen","cursor","Rotateable","$rotate","countOrBlank","isAnyPartitioned","ERROR_INVALID_ASSET_SELECTION","useMaterializationAction","launchpadElement","hasMaterializePermission","skipAllTerm","missingOrStale","isAssetMissing","isAssetStale","optionsForButton","firstOption","MaterializeButton","useDisabledButtonTooltipFix","borderTopRightRadius","borderRight","Popover","onInteraction","nextOpen","Menu","text","option","role","minWidth","borderTopLeftRadius","confirm","useConfirmation","setState","_forceLaunchpad","LAUNCH_ASSET_LOADER_QUERY","buildAssetCollisionsAlert","forceLaunchpad","stateForLaunchingAssets","upstreamAssetsWithNoMaterializations","missing","assetJobName","sessionPresets","getCommonJob","inSameRepo","inSameOrNoPartitionSpace","anchorAsset","getAnchorAssetForPartitionMappedBackfill","getUpstreamAssetKeys","LAUNCH_ASSET_LOADER_RESOURCE_QUERY","resourceResult","pipeline","pipelineOrError","message","partitionSets","partitionSetsOrError","requiredResourceKeys","resources","modes","anyResourcesHaveRequiredConfig","isRequired","anyAssetsHaveRequiredConfig","assumeConfigPresent","assetOpNames","flattenGraphs","solidSelectionQuery","base","partitionsSetName","jobsInCommon","partitionedRoots","aDeps","localeCompare","stringify","LAUNCH_ASSET_CHECK_UPSTREAM_QUERY","assetMaterializations","executionMetadata","pick","ridx","LAUNCH_ASSET_EXECUTION_ASSET_NODE_FRAGMENT","scopeAssets","stateForObservingAssets","_client","repoName","assetData","minHeight","keysForTotals","success","combinations","dkeys","dimensionIdx","small","splitPartitions","isTimeseriesDimension","staleStatus","StaleStatus","LABELS","self","StaleCauseCategory","StaleReasonsLabel","staleCauses","StaleCausesSummary","causes","groupedCauses","StaleReasonsTags","entries","fillColor","textColor","interactive","cause","category","reason","dependency","graphName","opCount","firstOp","opPath","UNDERLYING_OPS_ASSET_NODE_FRAGMENT","NO_PARTITION_KEY","sortByEventTimestamp","events","definedPartitionKeys","orderedPartitionKeys","sorted","groupByPartition","useSetStateUpdateCallback","currentState","updateCallback","stateRef","updateCallbackRef","Function","opts","serializer","defaults","encode","fromEntries","rangeText","decode","qs","endsWith","isFromPartitionQueryStringParam","partitionText","buildSerializer","useQueryPersistedState","setQuery","local","setLocal","knownDimensionNamesJSON","inflated","saved","allPartitionsRange","spanTextToSelections","placeholderDimensionSelection","partitionsToText","allPartitionsSpan","params","before","xAxisDefault","time","loadUsingPartitionKeys","ASSET_EVENTS_QUERY","partitionInLast","limit","assetObservations","allPartitionKeys","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","ConfigEditorConfigPicker","onSaveSession","onSelectPreset","onSelectPartition","presets","configGenerators","PickerContainer","ConfigEditorConfigGeneratorPicker","presetName","onSelect","item","ConfigEditorPartitionPicker","basePath","AppContext","repoAddressToSelector","CONFIG_PARTITIONS_QUERY","selection","sortOrderKey","sortOrder","setSortOrder","retrieved","partitionsOrError","onClickSort","order","rightElement","SortButton","onMouseDown","inputProps","Intent","isDynamicPartition","showCreatePartition","setShowCreatePartition","itemRenderer","noResults","inputValueRenderer","selectedItem","onItemSelect","defaultSelectedItem","itemPredicate","active","handleClick","close","onCreated","button","shortcutLabel","shortcutFilter","code","altKey","onShortcut","click","configGenerator","itemListRenderer","itemsParentRef","renderItem","filteredItems","renderedPresetItems","renderedPartitionSetItems","bothTypesPresent","ulRef","opacity","solidSelection","rightIcon","CONFIG_EDITOR_GENERATOR_PIPELINE_FRAGMENT","CONFIG_EDITOR_GENERATOR_PARTITION_SETS_FRAGMENT","CodeMirrorInDialogStyle","createGlobalStyle","LaunchpadTransientSessionContainer","launchpadType","initialData","useInitialDataForMode","initialSessionComplete","createSingleSession","runConfigYaml","session","setSession","LaunchpadSession","onSave","changes","newSession","LaunchpadStoredSessionsContainer","AssetLaunchpad","LaunchpadAllowedRoot","pipelinePath","JobLaunchpad","useParams","repoPath","useTrackPageView","explorerPathFromString","useJobTitle","useStripSnapshotFromPath","PIPELINE_EXECUTION_ROOT_QUERY","LaunchpadSessionLoading","LaunchpadSessionError","fallback","GUTTER_ID","rm","elt","parentNode","removeChild","showTooltipFor","tooltip","tt","document","createElement","nodeRect","getBoundingClientRect","appendChild","cloneNode","clientHeight","showTooltip","hide","CodeMirror","poll","setInterval","host","clearInterval","clearMarks","cm","lint","hasGutter","clearGutter","marked","clear","makeMarker","labels","severity","multiple","tooltips","marker","inner","annotationTooltip","ann","tip","messageHTML","innerHTML","createTextNode","updateLinting","annotationsNotSorted","annotations","lines","line","groupByLine","anns","maxSeverity","tipLabel","createDocumentFragment","formatAnnotation","markText","__annotation","setGutterMarker","onUpdateLinting","startLinting","passOptions","getAnnotations","getHelper","waitingFor","abort","off","on","getValue","arg2","operation","lintAsync","then","issues","timeout","delay","onMouseOver","box","srcElement","pos","coordsChar","spans","findMarksAt","docs","getDocs","docsEl","textContent","paddingBottom","popupTooltip","LintState","this","val","old","lintOnChange","getWrapperElement","gutters","getOption","hasLintGutter","AUTO_COMPLETE_AFTER_KEY","performLint","debounce","editor","ConfigEditorStyle","ConfigEditor","_editor","moveCursor","ch","setCursor","scroll","getScrollInfo","cursorCoords","moveCursorToPath","codeMirrorDoc","getDoc","yamlDoc","configCode","findRangeInDocumentFromPath","posFromIndex","prevProps","configSchema","performInitialPass","readOnly","context","expandAutocompletionContextAtCursor","onHelpContextChange","closestMappingType","theme","lineNumbers","indentUnit","smartIndent","showCursorWhenSelecting","checkConfig","hintOptions","completeSingle","closeOnUnfocus","schema","keyMap","extraKeys","showHint","execCommand","Tab","foldGutter","editorDidMount","onBeforeChange","onConfigChange","onCursorActivity","getSelection","onBlur","onKeyUp","test","isHelpContextEqual","prev","ConfigEditorHelp","allInnerTypes","ConfigScrollWrap","maxDepth","AutocompletionsNote","CONFIG_EDITOR_RUN_CONFIG_SCHEMA_FRAGMENT","CONFIG_EDITOR_VALIDATION_FRAGMENT","errorStackToYamlPath","fieldName","listIndex","mapKey","responseToYamlValidationResult","configYaml","response","isValid","errors","err","parsed","topLevelKey","forEach","ConfigEditorModePicker","resolvedMode","modeName","onModeChange","singleMode","valid","modeError","Select","activeItem","filterable","SOLID_SELECTOR_QUERY","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","OpSelector","serverProvidedSubsetError","onFlattenGraphsChange","inputRef","requestScopeHandleID","ops","explodeCompositesInHandleGraph","solidHandles","h","flattenGraphsEnabled","f","opsFetchError","queryResultOps","errorMessage","PopoverErrorWrap","ShortcutHandler","nextQuery","onFocus","linkToPreview","setFlattenGraphs","isValidationError","stateToHint","invalid","present","none","RemoveExtraConfigButton","onRemoveExtraPaths","extraNodes","knownKeyExtraPaths","otherPaths","parts","ScaffoldConfigButton","onScaffoldMissingConfig","missingNodes","confirmationMessage","RunPreview","validation","onHighlightPath","runConfigSchema","errorsOnly","setErrorsOnly","rootCompositeChildren","allConfigTypes","rootConfigType","root","fields","field","allConfigVersion","configTypeKey","errorsAndPaths","pathKey","fieldNames","solids","rest","hasOps","itemsIn","parents","boxes","pathErrors","isPresent","pathExistsInObject","containsMissing","missingNode","isInvalid","isMissing","_","Tag","ItemsEmptyNotice","axis","ErrorListContainer","Section","SectionTitle","ErrorRow","onHighlight","RuntimeAndResourcesSection","ItemSet","RUN_PREVIEW_VALIDATION_FRAGMENT","ErrorRowContainer","hoverable","displayed","substr","truncateErrorMessage","paddingRight","object","scaffoldType","typeLookup","isSelector","config","typeParamKeys","scalarTypeKey","String","Int","Float","Bool","Any","assertUnreachable","scaffoldPipelineConfig","createTypeLookup","YAML_SYNTAX_INVALID","reducer","previewLoading","payload","preview","previewedDocument","configLoading","editorHelpContext","LaunchButtonContainer","flexGrow","zIndex","initialState","currentSession","dispatch","mounted","editorSplitPanelContainer","previewCounter","configResult","PIPELINE_EXECUTION_CONFIG_SCHEMA_QUERY","configSchemaOrError","runConfigSchemaOrError","launchButtonTitle","launchButtonWarning","currentPreviewCount","configYamlOrEmpty","sanitizeConfigYamlString","PREVIEW_CONFIG_QUERY","isLatestRequest","isPipelineConfigValid","tagsApplyingNewBaseTags","newBaseTags","preservedUserTags","bt","preset","onlyKeyAndValue","needsRefresh","sessionSolidSelection","onConfigLoading","onConfigLoaded","assign","onRefreshConfig","matchingPreset","openTagEditor","refreshableSessionBase","LaunchRootExecutionButton","LoadingOverlay","isLoading","SessionSettingsBar","SessionSettingsSpacer","TextInput","tagsFromDefinition","tagDict","toSave","paths","deletePropertyPath","updatedRunConfigData","merge","warning","hasLaunchPermission","getVariables","uniqBy","behavior","obj","lastKey","yamlString","LoadingOverlayContainer","editState","setEditState","toError","onTagEdit","TagList","editable","flexDirection","onRemove","TagContainer","sessionTag","INVALID_PARITION_SUBSTRINGS","INVALID_PARTITION_SUBSTRINGS_READABLE","CreatePartitionDialog","setPartitionName","useMutation","CREATE_PARTITION_MUTATION","createPartition","isSaving","setIsSaving","isValidPartitionName","handleSave","partitionsDefName","refetchQueries","addDynamicPartition","invalidatePartitions","PartitionBox","onKeyPress","strokeColor","inputElement","defaultRenderTag","tagProps","remove","TagSelector","selectedTags","setSelectedTags","renderTag","renderDropdownItem","renderDropdown","dropdownStyles","renderTagList","rowHeight","isDropdownOpen","setIsDropdownOpen","useViewport","viewport","containerProps","dropdown","dropdownContent","outline","rowCount","rowRenderer","toggle","dropdownItemProps","tagName","defaultRenderDropdownItem","dropdownContainer","tagsContent","Placeholder","ev","nextOpenState","contains","TagsContainer","grow","TextInputStyles","TagSelectorWithSearch","search","setSearch","searchPlaceholder","filteredTags","toLowerCase","dropdownProps","input","DimensionRangeInput","isTimeseries","valueString","setValueString","partitionNameJSON","partitionNameArr","names","placeholderForPartitions","tryCommit","currentTarget","ClearButton","C","isDynamic","OrdinalPartitionSelector","allPartitions","selectedPartitions","setSelectedPartitions","LinkText","StyledIcon","PartitionStatus","dotForPartitionKey","partitionStatusAtIndex","runStatusForPartitionKey","isAllSelected","useDocumentTitle"],"sourceRoot":""}