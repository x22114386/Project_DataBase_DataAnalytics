{"version":3,"file":"static/js/102.a4a6e9fa.chunk.js","mappings":"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","sources":["../../core/src/assets/AssetLink.tsx","../../core/src/instance/BackfillPartitionsRequestedDialog.tsx","../../core/src/instance/BackfillRow.tsx","../../core/src/instance/BackfillStepStatusDialog.tsx","../../core/src/instance/BackfillTerminationDialog.tsx","../../core/src/instance/BackfillTable.tsx","../../core/src/instance/LastRunSummary.tsx","../../core/src/instance/StepSummaryForRun.tsx","../../core/src/instigation/InstigationTick.tsx","../../core/src/instigation/InstigationUtils.tsx","../../core/src/nav/RepositoryLink.tsx","../../core/src/nav/ScheduleOrSensorTag.tsx","../../core/src/overview/OverviewExpansionKey.tsx","../../core/src/partitions/PartitionRunList.tsx","../../core/src/partitions/PartitionStepStatus.tsx","../../core/src/partitions/RunMatrixUtils.tsx","../../core/src/partitions/useMatrixData.tsx","../../core/src/partitions/usePartitionStepQuery.tsx","../../core/src/resources/ResourceTabs.tsx","../../core/src/resources/ResourceRoot.tsx","../../core/src/resources/VirtualizedResourceRow.tsx","../../core/src/resources/VirtualizedResourceTable.tsx","../../core/src/resources/WorkspaceResourcesRoot.tsx","../../core/src/runs/RepoSectionHeader.tsx","../../core/src/runs/RunStatusPez.tsx","../../core/src/runs/mergeStatusToBackground.tsx","../../core/src/runs/RunTimeline.tsx","../../core/src/ui/useFormatDateTime.tsx","../../core/src/runs/batchRunsForTimeline.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/sensors/EditCursorDialog.tsx","../../core/src/ticks/SensorDryRunDialog.tsx","../../core/src/sensors/SensorDetails.tsx","../../core/src/sensors/SensorInfo.tsx","../../core/src/ticks/DryRunRequestTable.tsx","../../core/src/ui/findDuplicateRepoNames.tsx","../../core/src/ui/useRepoExpansionState.tsx","../../core/src/instance/JobMenu.tsx","../../core/src/workspace/VirtualizedJobRow.tsx","../../core/src/schedules/SchedulesTable.tsx","../../core/src/workspace/VirtualizedScheduleRow.tsx","../../core/src/workspace/VirtualizedSensorRow.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx","../../core/src/workspace/WorkspaceTabs.tsx","../../core/src/workspace/WorkspaceHeader.tsx"],"sourcesContent":["import {Box, Colors, Icon, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\nexport const AssetLink: React.FC<{\n  path: string[];\n  icon?: 'asset' | 'asset_non_sda' | 'folder';\n  textStyle?: 'break-word' | 'middle-truncate';\n  url?: string;\n  isGroup?: boolean;\n}> = (props) => {\n  const {path, icon, url, isGroup, textStyle = 'break-word'} = props;\n  const linkUrl = url ? url : assetDetailsPathForKey({path});\n  const assetPath =\n    path\n      .reduce((accum, elem, ii) => [...accum, ii > 0 ? ' / ' : '', elem], [] as string[])\n      .join('') + (isGroup ? '/' : '');\n\n  return (\n    <Box\n      flex={{direction: 'row', alignItems: 'flex-start', display: 'inline-flex'}}\n      style={{maxWidth: '100%'}}\n    >\n      {icon ? (\n        <Box margin={{right: 8, top: 2}}>\n          <Icon name={icon} color={Colors.Gray400} />\n        </Box>\n      ) : null}\n      <Link to={linkUrl} style={{overflow: 'hidden'}}>\n        {textStyle === 'break-word' ? (\n          <span style={{wordBreak: 'break-word'}}>{assetPath}</span>\n        ) : (\n          <MiddleTruncate text={assetPath} />\n        )}\n      </Link>\n    </Box>\n  );\n};\n","import {Button, DialogBody, DialogFooter, Dialog, FontFamily, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '18px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogBody>\n        {backfill && backfill.partitionNames ? (\n          <Box flex={{direction: 'column', gap: 8}} style={{maxHeight: '80vh', overflowY: 'auto'}}>\n            {backfill.partitionNames.map((partitionName) => (\n              <div key={partitionName}>{partitionName}</div>\n            ))}\n          </Box>\n        ) : null}\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {gql, QueryResult, useLazyQuery} from '@apollo/client';\nimport {Box, Button, Colors, Icon, MenuItem, Menu, Popover, Tag, Mono} from '@dagster-io/ui';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {useHistory, Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {RunStatus, BulkActionStatus} from '../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../partitions/PartitionStatus';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../runs/AssetKeyTagCollection';\nimport {inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../runs/RunTimeline';\nimport {runsPathWithFilters} from '../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\nconst NoBackfillStatusQuery = [\n  () => Promise.resolve({data: undefined} as QueryResult<undefined>),\n  {data: undefined, called: true, loading: false} as QueryResult<undefined>,\n] as const;\n\nexport const BackfillRow = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n  onShowPartitionsRequested,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  showBackfillTarget: boolean;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n}) => {\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId: backfill.id},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId: backfill.id},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusUnsupported = backfill.numPartitions === null || backfill.partitionNames === null;\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions.\n  //\n  // If the number of partitions or partition names are missing, we use a mock to\n  // avoid executing any query at all. This is a bit awkward, but seems cleaner than\n  // making the hooks below support an optional query function / result.\n  const [statusQueryFn, statusQueryResult] = statusUnsupported\n    ? NoBackfillStatusQuery\n    : (backfill.numPartitions || 0) > BACKFILL_PARTITIONS_COUNTS_THRESHOLD\n    ? statusCounts\n    : statusDetails;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses.results;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono style={{fontSize: '16px', lineHeight: '18px'}}>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 140}}>\n        {counts || statusUnsupported ? (\n          <BackfillStatusTag backfill={backfill} counts={counts} />\n        ) : (\n          <LoadingOrNone queryResult={statusQueryResult} noneString={'\\u2013'} />\n        )}\n      </td>\n      <td>\n        {backfill.isValidSerialization ? (\n          counts ? (\n            <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n          ) : (\n            <LoadingOrNone queryResult={statusQueryResult} noneString={'\\u2013'} />\n          )\n        ) : (\n          <p>A partitions definition has changed since this backfill ran.</p>\n        )}\n      </td>\n      <td>\n        <BackfillMenu\n          backfill={backfill}\n          onResumeBackfill={onResumeBackfill}\n          onTerminateBackfill={onTerminateBackfill}\n          onShowStepStatus={onShowStepStatus}\n          canCancelRuns={\n            counts ? counts[RunStatus.QUEUED] > 0 || counts[RunStatus.STARTED] > 0 : false\n          }\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BackfillMenu = ({\n  backfill,\n  canCancelRuns,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n}: {\n  backfill: BackfillTableFragment;\n  canCancelRuns: boolean;\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n}) => {\n  const history = useHistory();\n  const {hasResumePermission} = backfill;\n\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          {backfill.hasCancelPermission ? (\n            <>\n              {backfill.numCancelable > 0 ? (\n                <MenuItem\n                  text=\"Cancel backfill submission\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n              {canCancelRuns ? (\n                <MenuItem\n                  text=\"Terminate unfinished runs\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n            </>\n          ) : null}\n          {hasResumePermission &&\n          backfill.status === BulkActionStatus.FAILED &&\n          backfill.partitionSet ? (\n            <MenuItem\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => onResumeBackfill(backfill)}\n            />\n          ) : null}\n          <MenuItem\n            text=\"View backfill runs\"\n            icon=\"settings_backup_restore\"\n            onClick={() => history.push(runsUrl)}\n          />\n          <MenuItem\n            text=\"View step status\"\n            icon=\"view_list\"\n            onClick={() => {\n              onShowStepStatus(backfill);\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n  const partitionCounts = Object.entries(counts).reduce((partitionCounts, [runStatus, count]) => {\n    partitionCounts[runStatus] = (partitionCounts[runStatus] || 0) + count;\n    return partitionCounts;\n  }, {} as {[status: string]: number});\n\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        statuses?.filter((s) => s.partitionName === key)[0]?.runStatus || RunStatus.NOT_STARTED,\n    }),\n    [statuses],\n  );\n\n  return statuses && backfill.partitionNames ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      health={health}\n      splitPartitions\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[RunStatus.SUCCESS]}\n      inProgressCount={partitionCounts[RunStatus.STARTED]}\n      failedCount={partitionCounts[RunStatus.FAILURE]}\n    />\n  );\n};\n\nconst BackfillTarget: React.FC<{\n  backfill: BackfillTableFragment;\n}> = ({backfill}) => {\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const repoAddress = partitionSet\n    ? buildRepoAddress(\n        partitionSet.repositoryOrigin.repositoryName,\n        partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const repo = useRepository(repoAddress);\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.Gray400} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} modalTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nconst BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  counts: {[status: string]: number} | null;\n}) => {\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>Requested</Tag>;\n    case BulkActionStatus.CANCELED:\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">{backfill.status === 'FAILED' ? 'Failed' : 'Canceled'}</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (backfill.partitionNames === null) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (!counts) {\n        return <div style={{color: Colors.Gray500}}>None</div>;\n      }\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Button, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionPerOpStatus} from '../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  BackfillTableFragment,\n  PartitionSetForBackfillTableFragment,\n} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfill?.partitionSet || backfill.partitionNames === null) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface ContentProps {\n  backfill: BackfillTableFragment;\n  partitionSet: PartitionSetForBackfillTableFragment;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n\n  const runsFilter = React.useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../graphql/types';\nimport {cancelableStatuses} from '../runs/RunStatuses';\nimport {TerminationDialog} from '../runs/TerminationDialog';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const unfinishedMap = React.useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={!!backfill && backfill.status !== BulkActionStatus.CANCELED && !!numUnscheduled}\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        <DialogBody>\n          There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n          yet to be queued or launched.\n        </DialogBody>\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      <TerminationDialog\n        isOpen={\n          !!backfill &&\n          (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n          !!Object.keys(unfinishedMap).length\n        }\n        onClose={onClose}\n        onComplete={onComplete}\n        selectedRuns={unfinishedMap}\n      />\n    </>\n  );\n};\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      __typename\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Group, Table} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\n\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillStepStatusDialog} from './BackfillStepStatusDialog';\nimport {BackfillTerminationDialog} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [terminationBackfill, setTerminationBackfill] = React.useState<BackfillTableFragment>();\n  const [stepStatusBackfill, setStepStatusBackfill] = React.useState<BackfillTableFragment>();\n  const [\n    partitionsRequestedBackfill,\n    setPartitionsRequestedBackfill,\n  ] = React.useState<BackfillTableFragment>();\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const candidateId = terminationBackfill?.id;\n\n  React.useEffect(() => {\n    if (candidateId) {\n      const [backfill] = backfills.filter(\n        (backfill) => backfill.id === candidateId && backfill.hasCancelPermission,\n      );\n      setTerminationBackfill(backfill);\n    }\n  }, [backfills, candidateId]);\n\n  const resume = async (backfill: BackfillTableFragment) => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      SharedToaster.show({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      SharedToaster.show({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onTerminateBackfill={setTerminationBackfill}\n              onResumeBackfill={resume}\n              onShowStepStatus={setStepStatusBackfill}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n            />\n          ))}\n        </tbody>\n      </Table>\n      <BackfillStepStatusDialog\n        backfill={stepStatusBackfill}\n        onClose={() => setStepStatusBackfill(undefined)}\n      />\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n      <BackfillTerminationDialog\n        backfill={terminationBackfill}\n        onClose={() => setTerminationBackfill(undefined)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    hasCancelPermission\n    hasResumePermission\n    numCancelable\n    partitionNames\n    isValidSerialization\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary: React.FC<Props> = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0];\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tag,\n  Body,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {InstigationType, InstigationTickStatus} from '../graphql/types';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\n\nimport {\n  LaunchedRunListQuery,\n  LaunchedRunListQueryVariables,\n  TickTagFragment,\n} from './types/InstigationTick.types';\n\nexport const TickTag: React.FC<{\n  tick: TickTagFragment;\n  instigationType?: InstigationType;\n}> = ({tick, instigationType}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  switch (tick.status) {\n    case InstigationTickStatus.STARTED:\n      return <Tag>Started</Tag>;\n    case InstigationTickStatus.SUCCESS:\n      if (!tick.runIds.length) {\n        return <Tag intent=\"primary\">Requested</Tag>;\n      }\n      const tag = (\n        <>\n          <Tag intent=\"primary\" interactive>\n            <ButtonLink underline=\"never\" onClick={() => setOpen(true)}>\n              {tick.runIds.length} Requested\n            </ButtonLink>\n          </Tag>\n          <Dialog\n            isOpen={open}\n            onClose={() => setOpen(false)}\n            style={{width: '90vw'}}\n            title=\"Launched runs\"\n          >\n            <RunList runIds={tick.runIds} />\n            <DialogFooter>\n              <Button intent=\"primary\" onClick={() => setOpen(false)}>\n                OK\n              </Button>\n            </DialogFooter>\n          </Dialog>\n        </>\n      );\n      if (tick.runKeys.length > tick.runIds.length) {\n        const message = `${tick.runKeys.length} runs requested, but ${\n          tick.runKeys.length - tick.runIds.length\n        } skipped because the runs already exist for those requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            {tag}\n          </Tooltip>\n        );\n      }\n      return tag;\n\n    case InstigationTickStatus.SKIPPED:\n      if (tick.runKeys.length) {\n        const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      if (tick.skipReason) {\n        return (\n          <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      return <Tag intent=\"warning\">Skipped</Tag>;\n    case InstigationTickStatus.FAILURE:\n      if (!tick.error) {\n        return <Tag intent=\"danger\">Failure</Tag>;\n      } else {\n        const error = tick.error;\n        const showError = () =>\n          showCustomAlert({\n            title: instigationType\n              ? instigationType === InstigationType.SCHEDULE\n                ? 'Schedule Response'\n                : 'Sensor Response'\n              : 'Python Error',\n            body: <PythonErrorInfo error={error} />,\n          });\n        return (\n          <>\n            <LinkButton onClick={showError}>\n              <Tag minimal={true} intent=\"danger\">\n                Failure\n              </Tag>\n            </LinkButton>\n            <ButtonLink onClick={showError} style={{marginLeft: 4, fontSize: 12}}>\n              View\n            </ButtonLink>\n          </>\n        );\n      }\n    default:\n      return assertUnreachable(tick.status);\n  }\n};\n\nexport const RunList: React.FC<{runIds: string[]}> = ({runIds}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList: React.FC<{\n  originRunIds?: string[];\n}> = ({originRunIds}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.Gray200}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\nconst LinkButton = styled.button`\n  background: inherit;\n  border: none;\n  cursor: pointer;\n  font-size: inherit;\n  text-decoration: none;\n  padding: 0;\n`;\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\n\nexport const InstigatedRunStatus: React.FC<{\n  instigationState: InstigationStateFragment;\n}> = ({instigationState}) => {\n  if (!instigationState.runs.length) {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n  return <LastRunSummary run={instigationState.runs[0]} name={instigationState.name} />;\n};\n\nexport const RunStatusLink: React.FC<{run: RunStatusFragment}> = ({run}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.runId}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({runId: run.runId})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    runId\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.Gray500};\n  }\n`;\n","import {Box, Colors, Icon, IconWrapper, MiddleTruncate, Spinner, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {\n  NO_RELOAD_PERMISSION_TEXT,\n  ReloadRepositoryLocationButton,\n} from './ReloadRepositoryLocationButton';\n\nexport const RepositoryLink: React.FC<{\n  repoAddress: RepoAddress;\n  showIcon?: boolean;\n  showRefresh?: boolean;\n}> = ({repoAddress, showIcon = false, showRefresh = true}) => {\n  const {location} = repoAddress;\n  const repoString = repoAddressAsHumanString(repoAddress);\n\n  return (\n    <Box flex={{display: 'inline-flex', direction: 'row', alignItems: 'center'}} title={repoString}>\n      {showIcon && <Icon name=\"folder\" style={{marginRight: 8}} color={Colors.Gray400} />}\n      <RepositoryName to={workspacePathFromAddress(repoAddress)} style={{flex: 1}}>\n        <MiddleTruncate text={repoString} />\n      </RepositoryName>\n      {showRefresh ? (\n        <ReloadRepositoryLocationButton\n          location={location}\n          ChildComponent={({codeLocation, tryReload, reloading, hasReloadPermission}) => {\n            const tooltipContent = () => {\n              if (!hasReloadPermission) {\n                return NO_RELOAD_PERMISSION_TEXT;\n              }\n\n              return reloading ? (\n                'Reloading…'\n              ) : (\n                <>\n                  Reload location <strong>{codeLocation}</strong>\n                </>\n              );\n            };\n\n            return (\n              <ReloadTooltip content={tooltipContent()}>\n                {reloading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <StyledButton disabled={!hasReloadPermission} onClick={tryReload}>\n                    <Icon\n                      name=\"refresh\"\n                      color={hasReloadPermission ? Colors.Gray400 : Colors.Gray300}\n                    />\n                  </StyledButton>\n                )}\n              </ReloadTooltip>\n            );\n          }}\n        />\n      ) : null}\n    </Box>\n  );\n};\n\nconst RepositoryName = styled(Link)`\n  max-width: 280px;\n`;\n\nconst ReloadTooltip = styled(Tooltip)`\n  margin-left: 4px;\n\n  && {\n    display: block;\n  }\n`;\n\nconst StyledButton = styled.button`\n  background-color: transparent;\n  border: 0;\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  margin: 0;\n\n  :disabled {\n    cursor: default;\n  }\n\n  :focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & ${IconWrapper} {\n    display: block;\n    transition: color 100ms linear;\n  }\n\n  :hover ${IconWrapper} {\n    color: ${Colors.Blue500};\n  }\n`;\n","import {Box, ButtonLink, Colors, Tag, Tooltip, FontFamily, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitch.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitch.types';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ScheduleAndSensorDialog} from './ScheduleAndSensorDialog';\n\nexport const ScheduleOrSensorTag: React.FC<{\n  schedules: ScheduleSwitchFragment[];\n  sensors: SensorSwitchFragment[];\n  repoAddress: RepoAddress;\n  showSwitch?: boolean;\n}> = ({schedules, sensors, repoAddress, showSwitch = true}) => {\n  const [open, setOpen] = React.useState(false);\n\n  const scheduleCount = schedules.length;\n  const sensorCount = sensors.length;\n\n  if (scheduleCount > 1 || sensorCount > 1 || (scheduleCount && sensorCount)) {\n    const buttonText =\n      scheduleCount && sensorCount\n        ? `${scheduleCount + sensorCount} schedules/sensors`\n        : scheduleCount\n        ? `${scheduleCount} schedules`\n        : `${sensorCount} sensors`;\n\n    const icon = scheduleCount > 1 ? 'schedule' : 'sensors';\n\n    return (\n      <>\n        <Tag icon={icon}>\n          <ButtonLink onClick={() => setOpen(true)} color={Colors.Link}>\n            {buttonText}\n          </ButtonLink>\n        </Tag>\n        <ScheduleAndSensorDialog\n          isOpen={open}\n          onClose={() => setOpen(false)}\n          repoAddress={repoAddress}\n          schedules={schedules}\n          sensors={sensors}\n          showSwitch={showSwitch}\n        />\n      </>\n    );\n  }\n\n  if (scheduleCount) {\n    return (\n      <MatchingSchedule schedule={schedules[0]} repoAddress={repoAddress} showSwitch={showSwitch} />\n    );\n  }\n\n  if (sensorCount) {\n    return <MatchingSensor sensor={sensors[0]} repoAddress={repoAddress} showSwitch={showSwitch} />;\n  }\n\n  return null;\n};\n\nconst MatchingSchedule: React.FC<{\n  schedule: ScheduleSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({schedule, repoAddress, showSwitch}) => {\n  const {cronSchedule, executionTimezone, scheduleState} = schedule;\n  const running = scheduleState.status === 'RUNNING';\n  const tag = (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"schedule\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n          style={{overflow: 'hidden', textOverflow: 'ellipsis'}}\n        >\n          {humanCronString(cronSchedule, executionTimezone || 'UTC')}\n        </Link>\n        {showSwitch ? (\n          <ScheduleSwitch size=\"small\" repoAddress={repoAddress} schedule={schedule} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n\n  return schedule.cronSchedule ? (\n    <Tooltip\n      placement=\"top-start\"\n      content={\n        <Box flex={{direction: 'column', gap: 4}}>\n          <div>\n            Name: <strong>{schedule.name}</strong>\n          </div>\n          <div>\n            Cron:{' '}\n            <span style={{fontFamily: FontFamily.monospace, marginLeft: '4px'}}>\n              ({schedule.cronSchedule})\n            </span>\n          </div>\n          <div>\n            Timezone: <strong>{schedule.executionTimezone || 'UTC'}</strong>\n          </div>\n        </Box>\n      }\n    >\n      {tag}\n    </Tooltip>\n  ) : (\n    tag\n  );\n};\n\nconst MatchingSensor: React.FC<{\n  sensor: SensorSwitchFragment;\n  repoAddress: RepoAddress;\n  showSwitch: boolean;\n}> = ({sensor, repoAddress, showSwitch}) => {\n  const running = sensor.sensorState.status === 'RUNNING';\n  return (\n    <Tag intent={running ? 'primary' : 'none'} icon=\"sensors\">\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <Link\n          to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n          style={{maxWidth: 200, overflow: 'hidden'}}\n        >\n          <MiddleTruncate text={sensor.name} />\n        </Link>\n        {showSwitch ? (\n          <SensorSwitch size=\"small\" repoAddress={repoAddress} sensor={sensor} />\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList: React.FC<PartitionRunListProps> = (props) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n          runId\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  useViewport,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  partitionStatusAtIndex,\n  Range,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  topLabelHeightForLabels,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixStep,\n  PartitionRuns,\n  useMatrixData,\n  MatrixData,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  StatusSquareColor,\n} from './useMatrixData';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\nexport const PartitionPerAssetStatus: React.FC<\n  Omit<PartitionStepStatusBaseProps, 'partitionNames'> & {\n    assetHealth: PartitionHealthData[];\n    assetQueryItems: GraphQueryItem[];\n    rangeDimensionIdx: number;\n    rangeDimension: PartitionHealthDimension;\n  }\n> = ({assetHealth, rangeDimension, rangeDimensionIdx, assetQueryItems, ...rest}) => {\n  const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n  for (const a of assetHealth) {\n    if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n      // Ignore assets in the job / graph that do not have the range partition dimension.\n      continue;\n    }\n    const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n    rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n  }\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n      idx: partitionKeyIdx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: assetPartitionStatusToSquareColor(\n          partitionStatusAtIndex(rangesByAssetKey[box.node.name], partitionKeyIdx),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\nexport const PartitionPerOpStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    repoAddress: RepoAddress;\n    partitions: PartitionRuns[];\n  }\n> = ({repoAddress, pipelineName, partitions, partitionNames, ...rest}) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\nconst PartitionStepStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    data: MatrixData;\n    showLatestRun: boolean;\n  }\n> = (props) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = React.useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.KeylineGray};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: white;\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: #ececec;\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.KeylineGray};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare: React.FC<{\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}> = ({step, runs, runsLoaded, hovered, setHovered, setFocused, partitionName}) => {\n  const [opened, setOpened] = React.useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = runs[runs.length - 1].status;\n    squareStatus = runStatus === RunStatus.CANCELED ? 'failure' : runStatus.toLowerCase();\n  }\n\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1], {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: Colors.Green500,\n  SUCCESS_SKIPPED: Colors.Green200,\n  FAILURE: Colors.Red500,\n  FAILURE_SKIPPED: Colors.Red200,\n  SKIPPED: Colors.Yellow500,\n  IN_PROGRESS: '#eee',\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.Gray100};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.White};\n        .tilted {\n          background: ${Colors.Gray100};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.Gray400}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.Blue500};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue500};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.Blue200};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue200};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.Blue500} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: rgba(248, 247, 245, 1);\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(white 0%, white 45%, rgba(248, 247, 245, 1) 60%);\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) => flatGradientStack([hovered ? Colors.Gray100 : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  const maxlength = Math.max(...labels.map((p) => p.length));\n  return (maxlength > 10 ? maxlength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted: React.FC<{label: string; $height: number}> = ({label, $height}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.Gray200};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nimport {\n  PartitionMatrixStepRunFragment,\n  PartitionMatrixSolidHandleFragment,\n} from './types/useMatrixData.types';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagit 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    (partitionsByName as any)[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1];\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx];\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx].color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx].color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii].finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii].runs.length === 0 ||\n        partitionColumns[ii].steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    runId\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {useApolloClient, ApolloClient, gql} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQueryVariables,\n  PartitionStepLoaderQuery,\n} from './types/usePartitionStepQuery.types';\nimport {PartitionRuns, PARTITION_MATRIX_STEP_RUN_FRAGMENT} from './useMatrixData';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.runId === r.runId))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Tabs, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {TabLink} from '../ui/TabLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst titles: {[key: string]: string} = {\n  configuration: 'Configuration',\n  uses: 'Uses',\n};\n\nexport const ResourceTabs: React.FC<{\n  repoAddress: RepoAddress;\n  resourceName: string;\n  numUses: number;\n}> = (props) => {\n  const {repoAddress, resourceName, numUses} = props;\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/resources/:name/:tab?',\n  ]);\n\n  const active = (match?.params.tab && titles[match?.params.tab]) || 'Configuration';\n\n  return (\n    <>\n      <Tabs size=\"large\" selectedTabId={active}>\n        <TabLink\n          key=\"configuration\"\n          id=\"Configuration\"\n          title=\"Configuration\"\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}`)}\n        />\n        <TabLink\n          key=\"uses\"\n          id=\"Uses\"\n          title={\n            <Box flex={{gap: 4, alignItems: 'center'}}>\n              Uses\n              <Tag intent=\"none\" minimal={true}>\n                {numUses}\n              </Tag>\n            </Box>\n          }\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}/uses`)}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  CaptionMono,\n  Colors,\n  Group,\n  Heading,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  SplitPanelContainer,\n  Subheading,\n  Table,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, useParams, useRouteMatch} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetLink} from '../assets/AssetLink';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ResourceTabs} from './ResourceTabs';\nimport {\n  ResourceRootQuery,\n  ResourceRootQueryVariables,\n  ResourceDetailsFragment,\n} from './types/ResourceRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nconst remapName = (inName: string): string => {\n  if (inName === 'StringSourceType') {\n    return 'String';\n  } else if (inName === 'IntSourceType') {\n    return 'Int';\n  } else if (inName === 'BoolSourceType') {\n    return 'Bool';\n  }\n  return inName;\n};\n\nexport const succinctType = (resourceType: string | undefined): string | null => {\n  return resourceType?.split('.').pop() || null;\n};\n\nconst resourceDisplayName = (\n  resource: undefined | {name: string; resourceType: string},\n): string | null => {\n  if (!resource) {\n    return null;\n  }\n  return resource.name.startsWith('_nested_')\n    ? succinctType(resource?.resourceType)\n    : resource.name;\n};\n\nconst SectionHeader = (props: {children: React.ReactNode}) => {\n  return (\n    <Box\n      padding={{left: 24, vertical: 16}}\n      background={Colors.Gray50}\n      border={{width: 1, color: Colors.KeylineGray, side: 'all'}}\n    >\n      {props.children}\n    </Box>\n  );\n};\n\nexport const ResourceRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {resourceName} = useParams<{resourceName: string}>();\n\n  useDocumentTitle(`Resource: ${resourceName}`);\n\n  const resourceSelector = {\n    ...repoAddressToSelector(repoAddress),\n    resourceName,\n  };\n  const queryResult = useQuery<ResourceRootQuery, ResourceRootQueryVariables>(RESOURCE_ROOT_QUERY, {\n    variables: {\n      resourceSelector,\n    },\n  });\n\n  const displayName =\n    (queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails' &&\n      resourceDisplayName(queryResult.data?.topLevelResourceDetailsOrError)) ||\n    resourceName;\n\n  const numUses =\n    queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails'\n      ? queryResult.data.topLevelResourceDetailsOrError.parentResources.length +\n        queryResult.data.topLevelResourceDetailsOrError.assetKeysUsing.length +\n        queryResult.data.topLevelResourceDetailsOrError.jobsOpsUsing.length\n      : 0;\n\n  const tab = useRouteMatch<{tab?: string}>(['/locations/:repoPath/resources/:name/:tab?'])?.params\n    .tab;\n\n  return (\n    <Page style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>{displayName}</Heading>}\n        tabs={\n          <ResourceTabs repoAddress={repoAddress} resourceName={resourceName} numUses={numUses} />\n        }\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({topLevelResourceDetailsOrError}) => {\n          if (topLevelResourceDetailsOrError.__typename !== 'ResourceDetails') {\n            let message: string | null = null;\n            if (topLevelResourceDetailsOrError.__typename === 'PythonError') {\n              message = topLevelResourceDetailsOrError.message;\n            }\n\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load resource.</div>\n                    {message && (\n                      <ButtonLink\n                        color={Colors.Link}\n                        underline=\"always\"\n                        onClick={() => {\n                          showCustomAlert({\n                            title: 'Python error',\n                            body: message,\n                          });\n                        }}\n                      >\n                        View error\n                      </ButtonLink>\n                    )}\n                  </Group>\n                }\n              />\n            );\n          }\n\n          const resourceTypeSuccinct = succinctType(topLevelResourceDetailsOrError.resourceType);\n\n          return (\n            <div style={{height: '100%', display: 'flex'}}>\n              <SplitPanelContainer\n                identifier=\"explorer\"\n                firstInitialPercent={50}\n                firstMinSize={400}\n                first={\n                  <Box padding={{bottom: 48}} style={{overflowY: 'auto'}}>\n                    {tab === 'uses' ? (\n                      <ResourceUses\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                        numUses={numUses}\n                      />\n                    ) : (\n                      <ResourceConfig\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                      />\n                    )}\n                  </Box>\n                }\n                second={\n                  <RightInfoPanel>\n                    <RightInfoPanelContent>\n                      <Box\n                        flex={{gap: 4, direction: 'column'}}\n                        margin={{left: 24, right: 12, vertical: 16}}\n                      >\n                        <Heading>{displayName}</Heading>\n\n                        <Tooltip content={topLevelResourceDetailsOrError.resourceType || ''}>\n                          <Mono>{resourceTypeSuccinct}</Mono>\n                        </Tooltip>\n                      </Box>\n\n                      <SidebarSection title=\"Definition\">\n                        <Box padding={{vertical: 16, horizontal: 24}}>\n                          <Tag icon=\"resource\">\n                            Resource in{' '}\n                            <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                          </Tag>\n                        </Box>\n                      </SidebarSection>\n                      {topLevelResourceDetailsOrError.description ? (\n                        <SidebarSection title=\"Description\">\n                          <Box padding={{vertical: 16, horizontal: 24}}>\n                            {topLevelResourceDetailsOrError.description}\n                          </Box>\n                        </SidebarSection>\n                      ) : null}\n                    </RightInfoPanelContent>\n                  </RightInfoPanel>\n                }\n              />\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst ResourceConfig: React.FC<{\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n}> = (props) => {\n  const {resourceDetails, repoAddress} = props;\n\n  const configuredValues = Object.fromEntries(\n    resourceDetails.configuredValues.map((cv) => [cv.key, {value: cv.value, type: cv.type}]),\n  );\n  const nestedResources = resourceDetails.nestedResources;\n\n  return (\n    <>\n      {nestedResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Resource dependencies</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: 120}}>Key</th>\n                <th style={{width: 180}}>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {nestedResources.map((resource) => {\n                const resourceEntry =\n                  resource.type === 'TOP_LEVEL' && resource.resource ? (\n                    <ResourceEntry\n                      url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                      name={resourceDisplayName(resource.resource) || ''}\n                      description={resource.resource.description || undefined}\n                    />\n                  ) : (\n                    <ResourceEntry name={resource.name} />\n                  );\n\n                return (\n                  <tr key={resource.name}>\n                    <td>\n                      <strong>{resource.name}</strong>\n                    </td>\n                    <td colSpan={2}>{resourceEntry}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      <Box>\n        <SectionHeader>\n          <Subheading>Configuration</Subheading>\n        </SectionHeader>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Key</th>\n              <th style={{width: 90}}>Type</th>\n              <th style={{width: 90}}>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {resourceDetails.configFields.length === 0 ? (\n              <tr>\n                <td colSpan={3}>\n                  <Box padding={{vertical: 8}}>\n                    <NonIdealState\n                      icon=\"settings\"\n                      title=\"No configuration\"\n                      description=\"This resource has no configuration fields.\"\n                    />\n                  </Box>\n                </td>\n              </tr>\n            ) : (\n              resourceDetails.configFields.map((field) => {\n                const defaultValue = field.defaultValueAsJson;\n                const type = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name].type\n                  : null;\n                const actualValue = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name].value\n                  : defaultValue;\n\n                const isDefault = type === 'VALUE' && defaultValue === actualValue;\n                return (\n                  <tr key={field.name}>\n                    <td>\n                      <Box flex={{direction: 'column', gap: 4, alignItems: 'flex-start'}}>\n                        <strong>{field.name}</strong>\n                        <div style={{fontSize: 12, color: Colors.Gray700}}>{field.description}</div>\n                      </Box>\n                    </td>\n                    <td>{remapName(field.configTypeKey)}</td>\n                    <td>\n                      <Box flex={{direction: 'row', gap: 16}}>\n                        <Tooltip content={<>Default: {defaultValue}</>} canShow={!isDefault}>\n                          {type === 'ENV_VAR' ? <Tag>{actualValue}</Tag> : actualValue}\n                        </Tooltip>\n                        {isDefault && <Tag>Default</Tag>}\n                        {type === 'ENV_VAR' && <Tag intent=\"success\">Env var</Tag>}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </Table>\n      </Box>\n    </>\n  );\n};\n\nconst ResourceUses: React.FC<{\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n  numUses: number;\n}> = (props) => {\n  const {resourceDetails, repoAddress, numUses} = props;\n\n  if (numUses === 0) {\n    return (\n      <Box padding={{vertical: 16}}>\n        <NonIdealState\n          icon=\"list\"\n          title=\"No uses\"\n          description=\"This resource is not used by any assets or resources.\"\n        />\n      </Box>\n    );\n  }\n\n  const parentResources = resourceDetails.parentResources;\n  return (\n    <>\n      {parentResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Parent resources</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {parentResources.map((resource) => {\n                return (\n                  resource.resource && (\n                    <tr key={resource.name}>\n                      <td>\n                        <ResourceEntry\n                          url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                          name={resourceDisplayName(resource.resource) || ''}\n                          description={resource.resource.description || undefined}\n                        />\n                      </td>\n                    </tr>\n                  )\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.assetKeysUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Assets</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Asset key</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.assetKeysUsing.map((assetKey) => {\n                return (\n                  <tr key={assetKey.path.join('/')}>\n                    <td>\n                      <AssetLink key={assetKey.path.join('/')} path={assetKey.path} icon=\"asset\" />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.jobsOpsUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Jobs</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Job name</th>\n                <th>Ops</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.jobsOpsUsing.map((jobOps) => {\n                return (\n                  <tr key={jobOps.job.name}>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        <Icon name=\"job\" color={Colors.Gray400} />\n\n                        <Link\n                          to={workspacePathFromAddress(repoAddress, `/jobs/${jobOps.job.name}`)}\n                        >\n                          <MiddleTruncate text={jobOps.job.name} />\n                        </Link>\n                      </Box>\n                    </td>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        {jobOps.opsUsing.map((op) => (\n                          <Box\n                            flex={{\n                              direction: 'row',\n                              alignItems: 'center',\n                              display: 'inline-flex',\n                              gap: 8,\n                            }}\n                            style={{maxWidth: '100%'}}\n                            key={op.handleID}\n                          >\n                            <Icon name=\"op\" color={Colors.Gray400} />\n\n                            <Link\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/jobs/${jobOps.job.name}/${op.handleID.split('.').join('/')}`,\n                              )}\n                            >\n                              <MiddleTruncate text={op.solid.name} />\n                            </Link>\n                          </Box>\n                        ))}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n    </>\n  );\n};\n\nconst ResourceEntry: React.FC<{\n  name: string;\n  url?: string;\n  description?: string;\n}> = (props) => {\n  const {url, name, description} = props;\n\n  return (\n    <Box flex={{direction: 'column'}}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}} style={{maxWidth: '100%'}}>\n        <Icon name=\"resource\" color={Colors.Blue700} />\n        <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n          {url ? (\n            <Link to={url} style={{overflow: 'hidden'}}>\n              <MiddleTruncate text={name} />\n            </Link>\n          ) : (\n            <MiddleTruncate text={name} />\n          )}\n        </div>\n      </Box>\n      <CaptionMono>{description}</CaptionMono>\n    </Box>\n  );\n};\n\nconst RightInfoPanel = styled.div`\n  position: relative;\n\n  height: 100%;\n  min-height: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: ${Colors.White};\n`;\n\nconst RightInfoPanelContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst RESOURCE_DETAILS_FRAGMENT = gql`\n  fragment ResourceDetailsFragment on ResourceDetails {\n    name\n    description\n    configFields {\n      name\n      description\n      configTypeKey\n      isRequired\n      defaultValueAsJson\n    }\n    configuredValues {\n      key\n      value\n      type\n    }\n    nestedResources {\n      name\n      type\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    parentResources {\n      name\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    assetKeysUsing {\n      path\n    }\n    jobsOpsUsing {\n      job {\n        id\n        name\n      }\n      opsUsing {\n        handleID\n        solid {\n          name\n        }\n      }\n    }\n    resourceType\n  }\n`;\nconst RESOURCE_ROOT_QUERY = gql`\n  query ResourceRootQuery($resourceSelector: ResourceSelector!) {\n    topLevelResourceDetailsOrError(resourceSelector: $resourceSelector) {\n      ...ResourceDetailsFragment\n      ...PythonErrorFragment\n    }\n  }\n  ${RESOURCE_DETAILS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Caption, Colors, Icon, MiddleTruncate, Mono, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {succinctType} from './ResourceRoot';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 1fr';\n\ninterface ResourceRowProps extends ResourceEntryFragment {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedResourceRow = (props: ResourceRowProps) => {\n  const {\n    name,\n    description,\n    repoAddress,\n    start,\n    height,\n    resourceType,\n    parentResources,\n    jobsOpsUsing,\n    assetKeysUsing,\n  } = props;\n  const resourceTypeSuccinct = succinctType(resourceType);\n  const uses = parentResources.length + jobsOpsUsing.length + assetKeysUsing.length;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n              <Icon name=\"resource\" color={Colors.Gray400} />\n\n              <span style={{fontWeight: 500}}>\n                <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </span>\n            </Box>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Tooltip content={resourceType}>\n            <Mono>{resourceTypeSuccinct}</Mono>\n          </Tooltip>\n        </RowCell>\n        <RowCell>\n          <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}/uses`)}>{uses}</Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedResourceHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Uses</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceHeader, VirtualizedResourceRow} from './VirtualizedResourceRow';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n}\n\nexport const VirtualizedResourceTable: React.FC<Props> = ({repoAddress, resources}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: resources.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: ResourceEntryFragment = resources[index];\n              return (\n                <VirtualizedResourceRow\n                  key={key}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                  {...row}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {WorkspaceHeader} from '../workspace/WorkspaceHeader';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceTable} from './VirtualizedResourceTable';\nimport {\n  WorkspaceResourcesQuery,\n  WorkspaceResourcesQueryVariables,\n} from './types/WorkspaceResourcesRoot.types';\n\nexport const WorkspaceResourcesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Resources: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceResourcesQuery, WorkspaceResourcesQueryVariables>(\n    WORKSPACE_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const resources = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.allTopLevelResourceDetails;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [resources, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                <div>\n                  No resources matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={`No resources were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedResourceTable repoAddress={repoAddress} resources={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"resources\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nexport const RESOURCE_ENTRY_FRAGMENT = gql`\n  fragment ResourceEntryFragment on ResourceDetails {\n    name\n    description\n    resourceType\n    parentResources {\n      name\n    }\n    assetKeysUsing {\n      path\n    }\n    jobsOpsUsing {\n      job {\n        id\n      }\n    }\n  }\n`;\n\nconst WORKSPACE_RESOURCES_QUERY = gql`\n  query WorkspaceResourcesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        allTopLevelResourceDetails {\n          ...ResourceEntryFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.Dark} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.Gray50};\n  border: 0;\n  box-shadow: inset 0px -1px 0 ${Colors.KeylineGray}, inset 0px 1px 0 ${Colors.KeylineGray};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.Gray100};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.Gray700};\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.runId}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.runId}\n            runId={run.runId}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.runId}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.KeylineGray};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.Dark};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {Colors} from '@dagster-io/ui';\n\nimport {queuedStatuses, inProgressStatuses, failedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.Blue200;\n    case 'inProgress':\n      return Colors.Blue500;\n    case 'failed':\n      return Colors.Red500;\n    case 'succeeded':\n      return Colors.Green500;\n    case 'scheduled':\n      return Colors.Blue200;\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  Popover,\n  Mono,\n  FontFamily,\n  Tooltip,\n  Tag,\n  Icon,\n  Spinner,\n  MiddleTruncate,\n} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SECTION_HEADER_HEIGHT} from './RepoSectionHeader';\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {batchRunsForTimeline, RunBatch} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; job: TimelineJob};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const [width, setWidth] = React.useState<number | null>(null);\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce((accum, job) => {\n    const {repoAddress} = job;\n    const repoKey = repoAddressAsURLString(repoAddress);\n    const jobsForRepo = accum[repoKey] || [];\n    return {...accum, [repoKey]: [...jobsForRepo, job]};\n  }, {} as Record<string, TimelineJob[]>);\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    for (const repoKey in buckets) {\n      const bucket = buckets[repoKey];\n      const repoAddress = repoAddressFromPath(repoKey);\n      if (!repoAddress) {\n        continue;\n      }\n\n      flat.push({type: 'header', repoAddress, jobCount: bucket.length});\n      if (expandedKeys.includes(repoKey)) {\n        bucket.forEach((job) => {\n          flat.push({type: 'job', repoAddress, job});\n        });\n      }\n    }\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const observer = React.useRef<ResizeObserver | null>(null);\n\n  const containerRef = React.useCallback((node: HTMLDivElement | null) => {\n    if (node) {\n      observer.current = new ResizeObserver((entries) => {\n        const entry = entries[0];\n        setWidth(entry.contentRect.width);\n      });\n      observer.current.observe(node);\n    } else {\n      observer.current?.disconnect();\n    }\n  }, []);\n\n  if (!width) {\n    return (\n      <Timeline $height={DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT} ref={containerRef}>\n        <div />\n      </Timeline>\n    );\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey].length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n\n  return (\n    <>\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        Jobs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index];\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      jobs={buckets[repoKey]}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    job={row.job}\n                    key={key}\n                    height={size}\n                    top={start}\n                    range={range}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {\n    expanded,\n    onToggle,\n    onToggleAll,\n    repoAddress,\n    isDuplicateRepoName,\n    jobs,\n    height,\n    top,\n  } = props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags jobs={jobs} />}\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.Gray200}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine style={{left: nowLeft, backgroundColor: Colors.Blue500, zIndex: 1}} />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Gray800};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset 0 1px 0 ${Colors.KeylineGray},\n    inset -1px 0 0 ${Colors.KeylineGray};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset -1px 0 0 ${Colors.KeylineGray};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.KeylineGray};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${Colors.Blue500};\n  border-radius: 1px;\n  color: ${Colors.White};\n  cursor: default;\n  font-size: 12px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 2;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $height={height} $start={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.Gray900}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0].id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.White}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n    >\n      {content()}\n    </Box>\n  );\n};\n\nconst Timeline = styled.div<{$height: number}>`\n  ${({$height}) => `height: ${$height}px;`}\n  position: relative;\n`;\n\ntype RowProps = {$height: number; $start: number};\n\nconst Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.KeylineGray};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n\n  :hover {\n    background-color: ${Colors.Gray10};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 2px;\n  height: ${ROW_HEIGHT - 4}px;\n  position: absolute;\n  top: 2px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition: background-color 300ms linear, width 300ms ease-in-out;\n\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.White};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? {side: 'top', width: 1, color: Colors.KeylineGray} : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n          <Link to={`${job.path}runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import * as React from 'react';\n\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\n/**\n * Return a date/time formatter function that takes the user's stored timezone into\n * account. Useful for rendering arbitrary non-typical date/time formats.\n *\n * @returns string\n */\nexport const useFormatDateTime = () => {\n  const {\n    timezone: [storedTimezone],\n    hourCycle: [storedHourCycle],\n  } = React.useContext(TimeContext);\n\n  const timeZone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n  const hourCycle = storedHourCycle === 'Automatic' ? undefined : storedHourCycle;\n\n  return React.useCallback(\n    (date: Date, options: Intl.DateTimeFormatOptions, language = navigator.language) => {\n      return Intl.DateTimeFormat(language, {timeZone, hourCycle, ...options}).format(date);\n    },\n    [timeZone, hourCycle],\n  );\n};\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n  const nowLeft = ((now - start) / (end - start)) * width;\n\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => b.left - a.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths) {\n      const schedulerHealth = schedulerHealths[0];\n      healthy = !!(schedulerHealth.required && schedulerHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  ButtonLink,\n  Button,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  TextArea,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport 'chartjs-adapter-date-fns';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {SensorSelector} from '../graphql/types';\n\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from './types/EditCursorDialog.types';\n\nexport const EditCursorDialog: React.FC<{\n  isOpen: boolean;\n  cursor: string;\n  sensorSelector: SensorSelector;\n  onClose: () => void;\n}> = ({isOpen, sensorSelector, cursor, onClose}) => {\n  const [cursorValue, setCursorValue] = React.useState(cursor);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const [requestSet] = useMutation<SetSensorCursorMutation, SetSensorCursorMutationVariables>(\n    SET_CURSOR_MUTATION,\n  );\n\n  const onSave = async () => {\n    setIsSaving(true);\n    const {data} = await requestSet({\n      variables: {sensorSelector, cursor: cursorValue},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      SharedToaster.show({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      SharedToaster.show({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={() => {\n        onClose();\n        setCursorValue(cursor);\n      }}\n      style={{\n        width: '500px',\n      }}\n      title={`Edit ${sensorSelector.sensorName} cursor`}\n    >\n      <DialogBody>\n        <TextArea\n          value={cursorValue}\n          $resize=\"vertical\"\n          onChange={(e) => setCursorValue(e.target.value)}\n          style={{width: '100%'}}\n        />\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button intent=\"primary\" onClick={onSave} disabled={isSaving}>\n          Set cursor value\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const SET_CURSOR_MUTATION = gql`\n  mutation SetSensorCursorMutation($sensorSelector: SensorSelector!, $cursor: String) {\n    setSensorCursor(sensorSelector: $sensorSelector, cursor: $cursor) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          status\n          typeSpecificData {\n            ... on SensorData {\n              lastCursor\n            }\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog: React.FC<Props> = (props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun: React.FC<Props> = ({repoAddress, name, currentCursor, onClose, jobName}) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = React.useState(currentCursor);\n\n  const [submitting, setSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<PythonErrorFragment | null>(null);\n  const [\n    sensorExecutionData,\n    setSensorExecutionData,\n  ] = React.useState<DryRunInstigationTick | null>(null);\n\n  const sensorSelector = React.useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = React.useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = React.useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = React.useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      SharedToaster.show({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      SharedToaster.show({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                    ? 'Error'\n                    : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                          ? 'Persisted'\n                          : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={Colors.Green500} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      __typename\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            runConfigYaml\n            tags {\n              key\n              value\n            }\n            runKey\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.KeylineGray};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {\n  Box,\n  Button,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Heading,\n  FontFamily,\n  ButtonLink,\n  Icon,\n  Colors,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationStatus, InstigationType, SensorType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment.types';\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  minIntervalSeconds = Math.max(30, minIntervalSeconds);\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n}> = ({sensor, repoAddress, daemonHealth, refreshState}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    targets,\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = React.useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n  const repo = useRepository(repoAddress);\n  const pipelinesAndJobs = repo?.repository.pipelines;\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const targetCount = targets?.length || 0;\n\n  const targetNames = React.useMemo(\n    () => new Set((targets || []).map((target) => target.pipelineName)),\n    [targets],\n  );\n\n  const anyPipelines = React.useMemo(() => {\n    return (pipelinesAndJobs || []).some(\n      (pipelineOrJob) => !pipelineOrJob.isJob && targetNames.has(pipelineOrJob.name),\n    );\n  }, [pipelinesAndJobs, targetNames]);\n\n  const pipelineOrJobLabel = React.useMemo(() => {\n    if (anyPipelines) {\n      return targetCount > 1 ? 'Jobs / Pipelines' : 'Pipeline';\n    }\n    return targetCount > 1 ? 'Jobs' : 'Job';\n  }, [anyPipelines, targetCount]);\n\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = React.useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n          </Box>\n        }\n        icon=\"sensors\"\n        tags={\n          <>\n            <Tag icon=\"sensors\">\n              Sensor in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {sensor.nextTick && daemonHealth && running ? (\n              <Tag icon=\"timer\">\n                Next tick: <TimestampDisplay timestamp={sensor.nextTick.timestamp!} />\n              </Tag>\n            ) : null}\n          </>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            {sensor.sensorType === SensorType.STANDARD ? (\n              <Button\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test Sensor\n              </Button>\n            ) : null}\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} />\n                    <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.targets && sensor.targets.length ? (\n            <tr>\n              <td>{pipelineOrJobLabel}</td>\n              <td>\n                <Group direction=\"column\" spacing={2}>\n                  {sensor.targets.map((target) =>\n                    target.pipelineName ? (\n                      <PipelineReference\n                        key={target.pipelineName}\n                        pipelineName={target.pipelineName}\n                        pipelineHrefContext={repoAddress}\n                        isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                      />\n                    ) : null,\n                  )}\n                </Group>\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Cursor</td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <span style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n                  {cursor ? cursor : 'None'}\n                </span>\n                <ButtonLink onClick={() => setCursorEditing(true)} style={{fontSize: '12px'}}>\n                  <Box flex={{direction: 'row', alignItems: 'flex-end', gap: 4}}>\n                    <Icon name=\"edit\" color={Colors.Blue500} size={12} />\n                    <span>Edit</span>\n                  </Box>\n                </ButtonLink>\n              </Box>\n              <EditCursorDialog\n                isOpen={isCursorEditing}\n                sensorSelector={sensorSelector}\n                cursor={cursor ? cursor : ''}\n                onClose={() => setCursorEditing(false)}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {metadata.assetKeys.map((key) => (\n                    <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                  ))}\n                </Box>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SensorInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const sensorHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SENSOR',\n    );\n    if (sensorHealths) {\n      const sensorHealth = sensorHealths[0];\n      healthy = !!(sensorHealth.required && sensorHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The sensor daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a\n                href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {Box, Icon, Table, Tag} from '@dagster-io/ui';\nimport qs from 'qs';\nimport React from 'react';\n\nimport {RunRequest} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequest[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable: React.FC<Props> = ({\n  runRequests,\n  isJob,\n  repoAddress,\n  mode,\n  jobName,\n}) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>\n                    {key}: {value}\n                  </Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <AnchorButton\n                icon={<Icon name=\"edit\" />}\n                target=\"_blank\"\n                to={workspacePathFromAddress(\n                  repoAddress,\n                  `/pipeline_or_job/${jobName}/playground/setup?${qs.stringify({\n                    mode,\n                    config: request.runConfigYaml,\n                    tags: request.tags,\n                  })}`,\n                )}\n              >\n                Open in Launchpad\n              </AnchorButton>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import * as React from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagit.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = React.useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = React.useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = React.useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RUN_FRAGMENT} from '../runs/RunFragments';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReExecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const {\n    permissions: {canLaunchPipelineReexecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n\n  const fetchIfPossible = React.useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const onLaunch = useJobReExecution(run);\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => onLaunch({type: 'all'})}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => onLaunch({type: 'from-failure'})}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <Popover\n      onOpened={() => fetchIfPossible()}\n      content={\n        <Menu>\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n            })}\n            icon=\"job\"\n            text=\"View job\"\n          />\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n              path: '/runs',\n            })}\n            icon=\"checklist\"\n            text=\"View all recent runs\"\n          />\n          {canLaunchPipelineReexecution ? (\n            reExecuteAllItem\n          ) : (\n            <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n              {reExecuteAllItem}\n            </Tooltip>\n          )}\n          {canLaunchPipelineReexecution ? (\n            reExecuteFromFailureItem\n          ) : (\n            <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n              {reExecuteFromFailureItem}\n            </Tooltip>\n          )}\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        parentPipelineSnapshotId\n        ...RunFragment\n      }\n    }\n  }\n\n  ${RUN_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const {schedules, sensors} = data.pipelineOrError;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [data]);\n\n  const latestRuns = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const runs = data.pipelineOrError.runs;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>\n            {data?.pipelineOrError.__typename === 'Pipeline'\n              ? data.pipelineOrError.description\n              : ''}\n          </CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu job={{isJob, name, runs: latestRuns}} repoAddress={repoAddress} />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp4-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1fr 1fr 148px 210px 92px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.Dark,\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={scheduleData.scheduleState.ticks[0]}\n                instigationType={InstigationType.SCHEDULE}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs.length > 0 ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.Gray400}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp4-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '76px 1.5fr 1fr 120px 148px 180px';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {name, repoAddress, start, height} = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData?.targets && sensorData.targets.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.targets.map((target) => (\n                  <PipelineReference\n                    key={target.pipelineName}\n                    showIcon\n                    size=\"small\"\n                    pipelineName={target.pipelineName}\n                    pipelineHrefContext={repoAddress}\n                    isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                  />\n                ))}\n              </Box>\n            ) : null}\n            {sensorData?.metadata.assetKeys && sensorData.metadata.assetKeys.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.metadata.assetKeys.map((key) => (\n                  <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                ))}\n              </Box>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.Dark}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState.ticks.length ? (\n            <div>\n              <TickTag\n                tick={sensorData.sensorState.ticks[0]}\n                instigationType={InstigationType.SENSOR}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs.length > 0 ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell />\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Job / Asset</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}> = ({queryResult, noneString = 'None'}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText = ({children}: {children: React.ReactNode}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.Gray500};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: LazyQueryExecFunction<any, any>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"assets\" title=\"Assets\" to={workspacePathFromAddress(repoAddress, '/assets')} />\n        <TabLink id=\"jobs\" title=\"Jobs\" to={workspacePathFromAddress(repoAddress, '/jobs')} />\n        <TabLink\n          id=\"schedules\"\n          title=\"Schedules\"\n          to={workspacePathFromAddress(repoAddress, '/schedules')}\n        />\n        <TabLink\n          id=\"sensors\"\n          title=\"Sensors\"\n          to={workspacePathFromAddress(repoAddress, '/sensors')}\n        />\n        <TabLink id=\"graphs\" title=\"Graphs\" to={workspacePathFromAddress(repoAddress, '/graphs')} />\n        <TabLink id=\"ops\" title=\"Ops\" to={workspacePathFromAddress(repoAddress, '/ops')} />\n        <TabLink\n          id=\"resources\"\n          title=\"Resources\"\n          to={workspacePathFromAddress(repoAddress, '/resources')}\n        />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {PageHeader, Box, Heading, Colors, Button, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {\n  NO_RELOAD_PERMISSION_TEXT,\n  ReloadRepositoryLocationButton,\n} from '../nav/ReloadRepositoryLocationButton';\n\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  tab: string;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n}\n\nexport const WorkspaceHeader = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, tab, refreshState, queryData} = props;\n\n  return (\n    <PageHeader\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Heading>\n            <Link to=\"/locations\" style={{color: Colors.Dark}}>\n              Deployment\n            </Link>\n          </Heading>\n          <Heading>/</Heading>\n          <Heading style={{color: Colors.Gray600}}>{repoAddressAsHumanString(repoAddress)}</Heading>\n        </Box>\n      }\n      tabs={\n        <WorkspaceTabs\n          repoAddress={repoAddress}\n          tab={tab}\n          refreshState={refreshState}\n          queryData={queryData}\n        />\n      }\n      right={\n        <ReloadRepositoryLocationButton\n          location={repoAddress.location}\n          ChildComponent={({tryReload, reloading, hasReloadPermission}) => {\n            return (\n              <Tooltip\n                canShow={!hasReloadPermission}\n                content={hasReloadPermission ? '' : NO_RELOAD_PERMISSION_TEXT}\n                useDisabledButtonTooltipFix\n              >\n                <Button\n                  onClick={() => tryReload()}\n                  loading={reloading}\n                  disabled={!hasReloadPermission}\n                  icon={<Icon name=\"refresh\" />}\n                >\n                  Reload definitions\n                </Button>\n              </Tooltip>\n            );\n          }}\n        />\n      }\n    />\n  );\n};\n"],"names":["AssetLink","props","path","icon","url","isGroup","textStyle","linkUrl","assetDetailsPathForKey","assetPath","reduce","accum","elem","ii","join","flex","direction","alignItems","display","style","maxWidth","margin","right","top","name","color","Colors","to","overflow","wordBreak","text","BackfillPartitionsRequestedDialog","backfill","onClose","Dialog","isOpen","title","fontSize","fontFamily","FontFamily","id","partitionNames","Box","gap","maxHeight","overflowY","map","partitionName","topBorder","Button","onClick","NoBackfillStatusQuery","Promise","resolve","data","undefined","called","loading","BackfillRow","allPartitions","showBackfillTarget","onTerminateBackfill","onResumeBackfill","onShowStepStatus","onShowPartitionsRequested","statusDetails","useLazyQuery","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","variables","backfillId","notifyOnNetworkStatusChange","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","statusUnsupported","numPartitions","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","statusQueryFn","statusQueryResult","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","React","partitionBackfillOrError","__typename","counts","statuses","Object","fromEntries","partitionStatusCounts","e","runStatus","count","partitionStatuses","results","countBy","k","width","lineHeight","isAssetBackfill","runsPathWithFilters","token","value","timestamp","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","BackfillStatusTag","queryResult","noneString","isValidSerialization","BackfillRunStatus","BackfillMenu","canCancelRuns","RunStatus","history","useHistory","hasResumePermission","runsUrl","Popover","content","Menu","hasCancelPermission","numCancelable","intent","status","BulkActionStatus","partitionSet","push","position","Icon","partitionCounts","entries","health","runStatusForPartitionKey","key","filter","s","PartitionStatus","splitPartitions","entry","find","r","runId","succeededCount","inProgressCount","failedCount","assetSelection","partitionSetName","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","repo","useRepository","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","fontWeight","workspacePipelinePath","repoName","repoLocation","pipelineName","isJob","isThisThingAJob","encodeURIComponent","workspacePathFromAddress","repoAddressAsHumanString","length","AssetKeyTagCollection","assetKeys","modalTitle","PipelineReference","showIcon","size","pipelineHrefContext","location","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","includes","small","hideStatusTooltip","bottom","error","showCustomAlert","body","PythonErrorInfo","Array","from","inProgressStatuses","some","styled","gql","BackfillStepStatusDialog","BackfillStepStatusDialogContent","pageSize","setPageSize","offset","setOffset","runsFilter","partitions","usePartitionStepQuery","partitionTagName","DagsterTag","repositorySelector","repoAddressToSelector","jobName","skipQuery","BackfillTerminationDialog","onComplete","useMutation","CANCEL_BACKFILL_MUTATION","cancelBackfill","useQuery","skip","isSubmitting","setIsSubmitting","unfinishedMap","partition","cancelableStatuses","numUnscheduled","cancel","disabled","TerminationDialog","keys","selectedRuns","PYTHON_ERROR_FRAGMENT","BackfillTable","backfills","refetch","terminationBackfill","setTerminationBackfill","stepStatusBackfill","setStepStatusBackfill","partitionsRequestedBackfill","setPartitionsRequestedBackfill","RESUME_BACKFILL_MUTATION","resumeBackfill","candidateId","resume","resumePartitionBackfill","SharedToaster","message","Group","spacing","action","Table","BACKFILL_TABLE_FRAGMENT","LastRunSummary","run","showHover","showButton","showSummary","justifyContent","tagElement","interactionKind","hoverOpenDelay","tag","failedStatuses","A","StepSummaryForRun","STEP_SUMMARY_FOR_RUN_QUERY","pipelineRunOrError","relevantSteps","stepStats","step","StepEventStatus","stepCount","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","stepKey","TickTag","tick","instigationType","open","setOpen","InstigationTickStatus","runIds","underline","RunList","runKeys","skipReason","targetTagName","showError","InstigationType","LinkButton","minimal","marginLeft","assertUnreachable","LAUNCHED_RUN_LIST_QUERY","padding","purpose","pipelineRunsOrError","description","runs","FailedRunList","originRunIds","border","side","TICK_TAG_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","RunStatusLink","target","rel","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","RepositoryLink","showRefresh","repoString","marginRight","RepositoryName","ChildComponent","codeLocation","tryReload","reloading","hasReloadPermission","ReloadTooltip","NO_RELOAD_PERMISSION_TEXT","StyledButton","Link","Tooltip","IconWrapper","ScheduleOrSensorTag","schedules","sensors","showSwitch","scheduleCount","sensorCount","buttonText","MatchingSchedule","schedule","MatchingSensor","sensor","cronSchedule","executionTimezone","running","scheduleState","textOverflow","humanCronString","placement","sensorState","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","tags","Spinner","NonIdealState","RunTable","getVisibleItemCount","viewportWidth","ceil","BOX_SIZE","PartitionPerAssetStatus","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","rangesByAssetKey","a","dimensions","ranges","rangesForSingleDimension","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","buildLayout","nodes","mode","GanttChartMode","boxes","b","node","stepRows","box","x","totalFailurePercent","finalFailurePercent","partitionColumns","partitionKeys","partitionKey","partitionKeyIdx","idx","runsLoaded","steps","unix","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","state","AssetPartitionStatus","PartitionPerOpStatus","pipelineSelector","pipeline","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","useViewport","viewport","containerProps","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","max","visibleEnd","visibleColumns","slice","minUnix","Date","now","maxUnix","min","timeboundsOfPartitions","topLabelHeight","topLabelHeightForLabels","p","PartitionRunMatrixContainer","autoFocus","floating","flexShrink","height","paddingLeft","Divider","stepName","PagerControl","$direction","zIndex","$height","label","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","left","squareStatus","opened","setOpened","toLowerCase","className","onMouseEnter","onMouseLeave","onOpening","onClosed","MenuLink","linkToRunEvent","STEP_STATUS_COLORS","SUCCESS","SUCCESS_SKIPPED","FAILURE","FAILURE_SKIPPED","SKIPPED","IN_PROGRESS","flatGradient","GridColumn","multiselectFocused","TopLabelTiltedInner","LeftLabel","TopLabel","labels","maxlength","TopLabelTilted","GRID_FLOATING_CONTAINER_WIDTH","GridFloatingContainer","MISSING_STEP_STATUSES","Set","getStartTime","startTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","RegExp","match","inputs","cachedMatrixData","current","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","layout","options","partitionsByName","sort","blankState","previousRunStatus","lastRun","lastRunStepStatus","stats","has","currRunStatus","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","splice","every","buildMatrixData","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","split","v","runTags","parse","stopIdx","nextCursorIdx","sliceNames","partitionSetTag","partitionTag","runTagsFilter","fetchRunsForFilter","limit","fetched","concat","timer","setInterval","clearInterval","recent","pending","relevant","t","updated","o","byName","assemblePartitions","fetchPolicy","PARTITION_STEP_LOADER_QUERY","titles","configuration","uses","ResourceTabs","resourceName","numUses","useRouteMatch","active","params","tab","Tabs","selectedTabId","TabLink","succinctType","resourceType","pop","resourceDisplayName","resource","startsWith","SectionHeader","vertical","background","children","ResourceRoot","useTrackPageView","useParams","useDocumentTitle","resourceSelector","RESOURCE_ROOT_QUERY","displayName","topLevelResourceDetailsOrError","parentResources","assetKeysUsing","jobsOpsUsing","Page","PageHeader","tabs","Loading","allowStaleData","Alert","ButtonLink","resourceTypeSuccinct","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","ResourceUses","resourceDetails","ResourceConfig","second","RightInfoPanel","RightInfoPanelContent","horizontal","configuredValues","cv","type","nestedResources","resourceEntry","ResourceEntry","colSpan","configFields","field","inName","defaultValue","defaultValueAsJson","hasOwnProperty","actualValue","isDefault","configTypeKey","canShow","jobOps","job","MiddleTruncate","opsUsing","op","handleID","whiteSpace","RESOURCE_DETAILS_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedResourceRow","start","$start","RowGrid","VirtualizedResourceHeader","gridTemplateColumns","VirtualizedResourceTable","resources","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","ref","$totalHeight","index","row","WorkspaceResourcesRoot","searchValue","setSearchValue","selector","queryResultOverview","WORKSPACE_RESOURCES_QUERY","refreshState","sanitizedSearch","trim","toLocaleLowerCase","anySearch","repositoryOrError","allTopLevelResourceDetails","filteredBySearch","searchToLower","WorkspaceHeader","queryData","TextInput","onChange","placeholder","paddingTop","RESOURCE_ENTRY_FRAGMENT","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","RunStatusPezList","fade","RunStatusOverlay","OverlayContainer","OverlayTitle","RunRow","SummaryContainer","statusToColor","mergeStatusToBackground","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","successStatuses","statusArr","element","runCount","colors","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","RunTimeline","jobs","range","setWidth","includesTicks","buckets","repoKey","repoAddressAsURLString","jobsForRepo","allKeys","useRepoExpansionState","expandedKeys","onToggle","onToggleAll","flattened","flat","bucket","repoAddressFromPath","jobCount","_","observer","containerRef","ResizeObserver","contentRect","observe","disconnect","Timeline","DATE_TIME_HEIGHT","repoOrder","localeCompare","expandedJobCount","duplicateRepoNames","findDuplicateRepoNames","anyJobs","TIME_HEADER_HEIGHT","TimeDividers","interval","TimelineHeaderRow","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","RunStatusTags","RunStatusTagsWithCounts","inProgressText","succeededText","failedText","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeZoneName","timeOnlyOptions","hour","end","formatDateTime","TimeContext","storedTimezone","timezone","storedHourCycle","hourCycle","timeZone","browserTimezone","date","language","navigator","Intl","DateTimeFormat","format","useFormatDateTime","dateMarkers","totalTime","startDate","startDateStringWithTimezone","dayBoundaries","cursor","valueOf","dayStart","getTime","dayEnd","setDate","getDate","startLeftMsec","endRight","toString","timeMarkers","firstMarker","markerCount","time","replace","marker","nowLeft","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","containerWidth","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","Row","JobName","jobType","RunChunks","batch","RunChunk","$background","$multiple","RunHoverContent","BatchCount","AnchorButton","transform","ROW_HEIGHT","sliced","remaining","HoverContentJobName","TimeElapsed","startUnix","endUnix","overlap","config","rangeLength","batches","consolidated","shift","next","canBatch","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","href","EditCursorDialog","sensorSelector","cursorValue","setCursorValue","isSaving","setIsSaving","SET_CURSOR_MUTATION","requestSet","onSave","setSensorCursor","sensorName","$resize","SensorDryRunDialog","SensorDryRun","currentCursor","EVALUATE_SENSOR_MUTATION","sensorDryRun","setCursor","submitting","setSubmitting","setError","sensorExecutionData","setSensorExecutionData","submitTest","selectorData","evaluationResult","buttons","testId","cursorState","setCursorState","setCursorMutation","onPersistCursorValue","runRequests","numRunRequests","didSkip","Grid","grow","minHeight","Subheading","humanizeSensorInterval","minIntervalSeconds","SensorDetails","ticks","targets","metadata","isCursorEditing","setCursorEditing","pipelinesAndJobs","repository","pipelines","latestTick","targetCount","targetNames","anyPipelines","pipelineOrJob","pipelineOrJobLabel","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","InstigationStatus","SensorSwitch","nextTick","QueryRefresh","sensorType","SensorType","MetadataTable","marginTop","SensorInfo","sensorHealths","sensorHealth","RunRequestTable","request","runKey","runConfigYaml","repoNames","uniques","duplicates","add","validateExpandedKeys","parsed","isArray","collapsedKey","collapsedStorageKey","basePath","buildStorageKey","AppContext","useStateWithStorage","collapsedKeys","setCollapsedKeys","nextCollapsedKeys","delete","expand","collapsedSet","JobMenu","usePermissionsForLocation","canLaunchPipelineReexecution","permissions","disabledReasons","RUN_RE_EXECUTION_QUERY","fetchHasExecutionPlan","fetchIfPossible","onLaunch","useJobReExecution","reExecuteAllItem","canRunAllSteps","reExecuteFromFailureItem","canRunFromFailure","onOpened","RUN_FRAGMENT","VirtualizedJobRow","SINGLE_JOB_QUERY","buildPipelineSelector","queryJob","pipelineOrError","latestRuns","ScheduleSensorTagContainer","reverse","VirtualizedJobHeader","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","errorDisplay","runningScheduleCount","errors","popoverClassName","fill","VirtualizedScheduleRow","SINGLE_SCHEDULE_QUERY","scheduleName","querySchedule","scheduleData","scheduleOrError","cronString","ScheduleSwitch","runningCount","ScheduleStringContainer","timeFormat","showSeconds","showTimezone","VirtualizedScheduleHeader","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorData","sensorOrError","VirtualizedSensorHeader","RepoRow","getModifierState","LoadingOrNone","CaptionText","CaptionTextContainer","Caption","lazyQueryFn","setTimeout","clearTimeout","WorkspaceTabs","ReloadRepositoryLocationButton","useDisabledButtonTooltipFix"],"sourceRoot":""}